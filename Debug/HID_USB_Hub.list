
HID_USB_Hub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006180  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08006308  08006308  00016308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080064fc  080064fc  000164fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006500  08006500  00016500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000f0  20000000  08006504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000200f0  2**0
                  CONTENTS
  7 .bss          00000a40  200000f0  200000f0  000200f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000b30  20000b30  000200f0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018130  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000338e  00000000  00000000  00038250  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c20  00000000  00000000  0003b5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a88  00000000  00000000  0003c200  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005672  00000000  00000000  0003cc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004f77  00000000  00000000  000422fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00047271  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002ea8  00000000  00000000  000472f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0004a198  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000f0 	.word	0x200000f0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080062f0 	.word	0x080062f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000f4 	.word	0x200000f4
 80001c4:	080062f0 	.word	0x080062f0

080001c8 <TM_USART_Putc>:
 * @brief  Puts character to USART port
 * @param  *USARTx: Pointer to USARTx peripheral you will use
 * @param  c: character to be send over USART
 * @retval None
 */
static __INLINE void TM_USART_Putc(USART_TypeDef* USARTx, volatile char c) {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	70fb      	strb	r3, [r7, #3]
	/* Check USART if enabled */
	if ((USARTx->CR1 & USART_CR1_UE)) {	
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	899b      	ldrh	r3, [r3, #12]
 80001d8:	b29b      	uxth	r3, r3
 80001da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d014      	beq.n	800020c <TM_USART_Putc+0x44>
		/* Wait to be ready, buffer empty */
		USART_WAIT(USARTx);
 80001e2:	bf00      	nop
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	881b      	ldrh	r3, [r3, #0]
 80001e8:	b29b      	uxth	r3, r3
 80001ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d0f8      	beq.n	80001e4 <TM_USART_Putc+0x1c>
		/* Send data */
		USARTx->DR = (uint16_t)(c & 0x01FF);
 80001f2:	78fb      	ldrb	r3, [r7, #3]
 80001f4:	b2db      	uxtb	r3, r3
 80001f6:	b29a      	uxth	r2, r3
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	809a      	strh	r2, [r3, #4]
		/* Wait to be ready, buffer empty */
		USART_WAIT(USARTx);
 80001fc:	bf00      	nop
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	881b      	ldrh	r3, [r3, #0]
 8000202:	b29b      	uxth	r3, r3
 8000204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000208:	2b00      	cmp	r3, #0
 800020a:	d0f8      	beq.n	80001fe <TM_USART_Putc+0x36>
	}
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr

08000218 <HC05_HID_COM_Init>:
#include "HC05_HID.h"


void HC05_HID_COM_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	/* Initialize USART1 at 115200 baud, TX: PB6, RX: PB7 */
	TM_USART_Init(USART1, TM_USART_PinsPack_2, 115200);
 800021c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000220:	2101      	movs	r1, #1
 8000222:	4802      	ldr	r0, [pc, #8]	; (800022c <HC05_HID_COM_Init+0x14>)
 8000224:	f000 fe8e 	bl	8000f44 <TM_USART_Init>
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}
 800022c:	40011000 	.word	0x40011000

08000230 <HC05_HID_SendKeyboardState>:

void HC05_HID_SendKeyboardState(uint8_t *pbuf)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	uint8_t ui8Idx= 0;
 8000238:	2300      	movs	r3, #0
 800023a:	73fb      	strb	r3, [r7, #15]
	HC05_HID_WRITE(0xFD);
 800023c:	21fd      	movs	r1, #253	; 0xfd
 800023e:	4815      	ldr	r0, [pc, #84]	; (8000294 <HC05_HID_SendKeyboardState+0x64>)
 8000240:	f7ff ffc2 	bl	80001c8 <TM_USART_Putc>
	HC05_HID_WRITE(9);
 8000244:	2109      	movs	r1, #9
 8000246:	4813      	ldr	r0, [pc, #76]	; (8000294 <HC05_HID_SendKeyboardState+0x64>)
 8000248:	f7ff ffbe 	bl	80001c8 <TM_USART_Putc>
	HC05_HID_WRITE(1);
 800024c:	2101      	movs	r1, #1
 800024e:	4811      	ldr	r0, [pc, #68]	; (8000294 <HC05_HID_SendKeyboardState+0x64>)
 8000250:	f7ff ffba 	bl	80001c8 <TM_USART_Putc>
	HC05_HID_WRITE(pbuf[0]);
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	4619      	mov	r1, r3
 800025a:	480e      	ldr	r0, [pc, #56]	; (8000294 <HC05_HID_SendKeyboardState+0x64>)
 800025c:	f7ff ffb4 	bl	80001c8 <TM_USART_Putc>
	HC05_HID_WRITE(0);
 8000260:	2100      	movs	r1, #0
 8000262:	480c      	ldr	r0, [pc, #48]	; (8000294 <HC05_HID_SendKeyboardState+0x64>)
 8000264:	f7ff ffb0 	bl	80001c8 <TM_USART_Putc>
	for(ui8Idx = 0 ; ui8Idx < 6 ; ui8Idx ++)
 8000268:	2300      	movs	r3, #0
 800026a:	73fb      	strb	r3, [r7, #15]
 800026c:	e00b      	b.n	8000286 <HC05_HID_SendKeyboardState+0x56>
	{
		HC05_HID_WRITE(pbuf[ui8Idx + 2]);
 800026e:	7bfb      	ldrb	r3, [r7, #15]
 8000270:	3302      	adds	r3, #2
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	4413      	add	r3, r2
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	4619      	mov	r1, r3
 800027a:	4806      	ldr	r0, [pc, #24]	; (8000294 <HC05_HID_SendKeyboardState+0x64>)
 800027c:	f7ff ffa4 	bl	80001c8 <TM_USART_Putc>
	for(ui8Idx = 0 ; ui8Idx < 6 ; ui8Idx ++)
 8000280:	7bfb      	ldrb	r3, [r7, #15]
 8000282:	3301      	adds	r3, #1
 8000284:	73fb      	strb	r3, [r7, #15]
 8000286:	7bfb      	ldrb	r3, [r7, #15]
 8000288:	2b05      	cmp	r3, #5
 800028a:	d9f0      	bls.n	800026e <HC05_HID_SendKeyboardState+0x3e>

	}
}
 800028c:	bf00      	nop
 800028e:	3710      	adds	r7, #16
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40011000 	.word	0x40011000

08000298 <HC05_HID_SendMouseState>:

void HC05_HID_SendMouseState(uint8_t *pbuf)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	HC05_HID_WRITE((uint8_t)0xFD);
 80002a0:	21fd      	movs	r1, #253	; 0xfd
 80002a2:	4815      	ldr	r0, [pc, #84]	; (80002f8 <HC05_HID_SendMouseState+0x60>)
 80002a4:	f7ff ff90 	bl	80001c8 <TM_USART_Putc>
	HC05_HID_WRITE((uint8_t)0x05);
 80002a8:	2105      	movs	r1, #5
 80002aa:	4813      	ldr	r0, [pc, #76]	; (80002f8 <HC05_HID_SendMouseState+0x60>)
 80002ac:	f7ff ff8c 	bl	80001c8 <TM_USART_Putc>
	HC05_HID_WRITE((uint8_t)0x02);
 80002b0:	2102      	movs	r1, #2
 80002b2:	4811      	ldr	r0, [pc, #68]	; (80002f8 <HC05_HID_SendMouseState+0x60>)
 80002b4:	f7ff ff88 	bl	80001c8 <TM_USART_Putc>
	HC05_HID_WRITE(pbuf[0]);//Button
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	4619      	mov	r1, r3
 80002be:	480e      	ldr	r0, [pc, #56]	; (80002f8 <HC05_HID_SendMouseState+0x60>)
 80002c0:	f7ff ff82 	bl	80001c8 <TM_USART_Putc>
	HC05_HID_WRITE(pbuf[1]);//X-stop
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	3301      	adds	r3, #1
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	4619      	mov	r1, r3
 80002cc:	480a      	ldr	r0, [pc, #40]	; (80002f8 <HC05_HID_SendMouseState+0x60>)
 80002ce:	f7ff ff7b 	bl	80001c8 <TM_USART_Putc>
	HC05_HID_WRITE(pbuf[2]);//Y-stop
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	3302      	adds	r3, #2
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	4619      	mov	r1, r3
 80002da:	4807      	ldr	r0, [pc, #28]	; (80002f8 <HC05_HID_SendMouseState+0x60>)
 80002dc:	f7ff ff74 	bl	80001c8 <TM_USART_Putc>
	HC05_HID_WRITE(pbuf[3]);//Wheel
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	3303      	adds	r3, #3
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	4619      	mov	r1, r3
 80002e8:	4803      	ldr	r0, [pc, #12]	; (80002f8 <HC05_HID_SendMouseState+0x60>)
 80002ea:	f7ff ff6d 	bl	80001c8 <TM_USART_Putc>
}
 80002ee:	bf00      	nop
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40011000 	.word	0x40011000

080002fc <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000304:	4a06      	ldr	r2, [pc, #24]	; (8000320 <NVIC_PriorityGroupConfig+0x24>)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800030c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000310:	60d3      	str	r3, [r2, #12]
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	e000ed00 	.word	0xe000ed00

08000324 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800032c:	2300      	movs	r3, #0
 800032e:	73fb      	strb	r3, [r7, #15]
 8000330:	2300      	movs	r3, #0
 8000332:	73bb      	strb	r3, [r7, #14]
 8000334:	230f      	movs	r3, #15
 8000336:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	78db      	ldrb	r3, [r3, #3]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d039      	beq.n	80003b4 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000340:	4b27      	ldr	r3, [pc, #156]	; (80003e0 <NVIC_Init+0xbc>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	43db      	mvns	r3, r3
 8000346:	0a1b      	lsrs	r3, r3, #8
 8000348:	b2db      	uxtb	r3, r3
 800034a:	f003 0307 	and.w	r3, r3, #7
 800034e:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000350:	7bfb      	ldrb	r3, [r7, #15]
 8000352:	f1c3 0304 	rsb	r3, r3, #4
 8000356:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000358:	7b7a      	ldrb	r2, [r7, #13]
 800035a:	7bfb      	ldrb	r3, [r7, #15]
 800035c:	fa42 f303 	asr.w	r3, r2, r3
 8000360:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	785b      	ldrb	r3, [r3, #1]
 8000366:	461a      	mov	r2, r3
 8000368:	7bbb      	ldrb	r3, [r7, #14]
 800036a:	fa02 f303 	lsl.w	r3, r2, r3
 800036e:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	789a      	ldrb	r2, [r3, #2]
 8000374:	7b7b      	ldrb	r3, [r7, #13]
 8000376:	4013      	ands	r3, r2
 8000378:	b2da      	uxtb	r2, r3
 800037a:	7bfb      	ldrb	r3, [r7, #15]
 800037c:	4313      	orrs	r3, r2
 800037e:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000380:	7bfb      	ldrb	r3, [r7, #15]
 8000382:	011b      	lsls	r3, r3, #4
 8000384:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000386:	4a17      	ldr	r2, [pc, #92]	; (80003e4 <NVIC_Init+0xc0>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	4413      	add	r3, r2
 800038e:	7bfa      	ldrb	r2, [r7, #15]
 8000390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <NVIC_Init+0xc0>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	095b      	lsrs	r3, r3, #5
 800039c:	b2db      	uxtb	r3, r3
 800039e:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	f003 031f 	and.w	r3, r3, #31
 80003a8:	2101      	movs	r1, #1
 80003aa:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80003ae:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80003b2:	e00f      	b.n	80003d4 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80003b4:	490b      	ldr	r1, [pc, #44]	; (80003e4 <NVIC_Init+0xc0>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	095b      	lsrs	r3, r3, #5
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	f003 031f 	and.w	r3, r3, #31
 80003c8:	2201      	movs	r2, #1
 80003ca:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80003cc:	f100 0320 	add.w	r3, r0, #32
 80003d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	e000ed00 	.word	0xe000ed00
 80003e4:	e000e100 	.word	0xe000e100

080003e8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b087      	sub	sp, #28
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]
 80003f6:	2300      	movs	r3, #0
 80003f8:	613b      	str	r3, [r7, #16]
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]
 8000402:	e076      	b.n	80004f2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000404:	2201      	movs	r2, #1
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	fa02 f303 	lsl.w	r3, r2, r3
 800040c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	4013      	ands	r3, r2
 8000416:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000418:	68fa      	ldr	r2, [r7, #12]
 800041a:	693b      	ldr	r3, [r7, #16]
 800041c:	429a      	cmp	r2, r3
 800041e:	d165      	bne.n	80004ec <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	005b      	lsls	r3, r3, #1
 8000428:	2103      	movs	r1, #3
 800042a:	fa01 f303 	lsl.w	r3, r1, r3
 800042e:	43db      	mvns	r3, r3
 8000430:	401a      	ands	r2, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	791b      	ldrb	r3, [r3, #4]
 800043e:	4619      	mov	r1, r3
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	fa01 f303 	lsl.w	r3, r1, r3
 8000448:	431a      	orrs	r2, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	791b      	ldrb	r3, [r3, #4]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d003      	beq.n	800045e <GPIO_Init+0x76>
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	791b      	ldrb	r3, [r3, #4]
 800045a:	2b02      	cmp	r3, #2
 800045c:	d12e      	bne.n	80004bc <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	689a      	ldr	r2, [r3, #8]
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	2103      	movs	r1, #3
 8000468:	fa01 f303 	lsl.w	r3, r1, r3
 800046c:	43db      	mvns	r3, r3
 800046e:	401a      	ands	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	689a      	ldr	r2, [r3, #8]
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	795b      	ldrb	r3, [r3, #5]
 800047c:	4619      	mov	r1, r3
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	431a      	orrs	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	685a      	ldr	r2, [r3, #4]
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	b29b      	uxth	r3, r3
 8000494:	4619      	mov	r1, r3
 8000496:	2301      	movs	r3, #1
 8000498:	408b      	lsls	r3, r1
 800049a:	43db      	mvns	r3, r3
 800049c:	401a      	ands	r2, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	683a      	ldr	r2, [r7, #0]
 80004a8:	7992      	ldrb	r2, [r2, #6]
 80004aa:	4611      	mov	r1, r2
 80004ac:	697a      	ldr	r2, [r7, #20]
 80004ae:	b292      	uxth	r2, r2
 80004b0:	fa01 f202 	lsl.w	r2, r1, r2
 80004b4:	b292      	uxth	r2, r2
 80004b6:	431a      	orrs	r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	68da      	ldr	r2, [r3, #12]
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	2103      	movs	r1, #3
 80004c8:	fa01 f303 	lsl.w	r3, r1, r3
 80004cc:	43db      	mvns	r3, r3
 80004ce:	401a      	ands	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	68da      	ldr	r2, [r3, #12]
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	79db      	ldrb	r3, [r3, #7]
 80004dc:	4619      	mov	r1, r3
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	fa01 f303 	lsl.w	r3, r1, r3
 80004e6:	431a      	orrs	r2, r3
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	3301      	adds	r3, #1
 80004f0:	617b      	str	r3, [r7, #20]
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	2b0f      	cmp	r3, #15
 80004f6:	d985      	bls.n	8000404 <GPIO_Init+0x1c>
    }
  }
}
 80004f8:	bf00      	nop
 80004fa:	371c      	adds	r7, #28
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	887a      	ldrh	r2, [r7, #2]
 8000514:	831a      	strh	r2, [r3, #24]
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	460b      	mov	r3, r1
 800052c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	887a      	ldrh	r2, [r7, #2]
 8000532:	835a      	strh	r2, [r3, #26]
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	460b      	mov	r3, r1
 800054a:	807b      	strh	r3, [r7, #2]
 800054c:	4613      	mov	r3, r2
 800054e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000558:	787a      	ldrb	r2, [r7, #1]
 800055a:	887b      	ldrh	r3, [r7, #2]
 800055c:	f003 0307 	and.w	r3, r3, #7
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	fa02 f303 	lsl.w	r3, r2, r3
 8000566:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000568:	887b      	ldrh	r3, [r7, #2]
 800056a:	08db      	lsrs	r3, r3, #3
 800056c:	b29b      	uxth	r3, r3
 800056e:	4618      	mov	r0, r3
 8000570:	887b      	ldrh	r3, [r7, #2]
 8000572:	08db      	lsrs	r3, r3, #3
 8000574:	b29b      	uxth	r3, r3
 8000576:	461a      	mov	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3208      	adds	r2, #8
 800057c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000580:	887b      	ldrh	r3, [r7, #2]
 8000582:	f003 0307 	and.w	r3, r3, #7
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	210f      	movs	r1, #15
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	43db      	mvns	r3, r3
 8000590:	ea02 0103 	and.w	r1, r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f100 0208 	add.w	r2, r0, #8
 800059a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800059e:	887b      	ldrh	r3, [r7, #2]
 80005a0:	08db      	lsrs	r3, r3, #3
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	461a      	mov	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3208      	adds	r2, #8
 80005aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	4313      	orrs	r3, r2
 80005b2:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80005b4:	887b      	ldrh	r3, [r7, #2]
 80005b6:	08db      	lsrs	r3, r3, #3
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	461a      	mov	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3208      	adds	r2, #8
 80005c0:	68b9      	ldr	r1, [r7, #8]
 80005c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b089      	sub	sp, #36	; 0x24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80005dc:	2300      	movs	r3, #0
 80005de:	61bb      	str	r3, [r7, #24]
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
 80005e8:	2302      	movs	r3, #2
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	2302      	movs	r3, #2
 80005f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80005f4:	4b47      	ldr	r3, [pc, #284]	; (8000714 <RCC_GetClocksFreq+0x140>)
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f003 030c 	and.w	r3, r3, #12
 80005fc:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80005fe:	69bb      	ldr	r3, [r7, #24]
 8000600:	2b04      	cmp	r3, #4
 8000602:	d007      	beq.n	8000614 <RCC_GetClocksFreq+0x40>
 8000604:	2b08      	cmp	r3, #8
 8000606:	d009      	beq.n	800061c <RCC_GetClocksFreq+0x48>
 8000608:	2b00      	cmp	r3, #0
 800060a:	d13d      	bne.n	8000688 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4a42      	ldr	r2, [pc, #264]	; (8000718 <RCC_GetClocksFreq+0x144>)
 8000610:	601a      	str	r2, [r3, #0]
      break;
 8000612:	e03d      	b.n	8000690 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4a41      	ldr	r2, [pc, #260]	; (800071c <RCC_GetClocksFreq+0x148>)
 8000618:	601a      	str	r2, [r3, #0]
      break;
 800061a:	e039      	b.n	8000690 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800061c:	4b3d      	ldr	r3, [pc, #244]	; (8000714 <RCC_GetClocksFreq+0x140>)
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	0d9b      	lsrs	r3, r3, #22
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000628:	4b3a      	ldr	r3, [pc, #232]	; (8000714 <RCC_GetClocksFreq+0x140>)
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000630:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d00c      	beq.n	8000652 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000638:	4a38      	ldr	r2, [pc, #224]	; (800071c <RCC_GetClocksFreq+0x148>)
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000640:	4a34      	ldr	r2, [pc, #208]	; (8000714 <RCC_GetClocksFreq+0x140>)
 8000642:	6852      	ldr	r2, [r2, #4]
 8000644:	0992      	lsrs	r2, r2, #6
 8000646:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800064a:	fb02 f303 	mul.w	r3, r2, r3
 800064e:	61fb      	str	r3, [r7, #28]
 8000650:	e00b      	b.n	800066a <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000652:	4a31      	ldr	r2, [pc, #196]	; (8000718 <RCC_GetClocksFreq+0x144>)
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	fbb2 f3f3 	udiv	r3, r2, r3
 800065a:	4a2e      	ldr	r2, [pc, #184]	; (8000714 <RCC_GetClocksFreq+0x140>)
 800065c:	6852      	ldr	r2, [r2, #4]
 800065e:	0992      	lsrs	r2, r2, #6
 8000660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000664:	fb02 f303 	mul.w	r3, r2, r3
 8000668:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800066a:	4b2a      	ldr	r3, [pc, #168]	; (8000714 <RCC_GetClocksFreq+0x140>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	0c1b      	lsrs	r3, r3, #16
 8000670:	f003 0303 	and.w	r3, r3, #3
 8000674:	3301      	adds	r3, #1
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800067a:	69fa      	ldr	r2, [r7, #28]
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	601a      	str	r2, [r3, #0]
      break;
 8000686:	e003      	b.n	8000690 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a23      	ldr	r2, [pc, #140]	; (8000718 <RCC_GetClocksFreq+0x144>)
 800068c:	601a      	str	r2, [r3, #0]
      break;
 800068e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000690:	4b20      	ldr	r3, [pc, #128]	; (8000714 <RCC_GetClocksFreq+0x140>)
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000698:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800069a:	69bb      	ldr	r3, [r7, #24]
 800069c:	091b      	lsrs	r3, r3, #4
 800069e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80006a0:	4a1f      	ldr	r2, [pc, #124]	; (8000720 <RCC_GetClocksFreq+0x14c>)
 80006a2:	69bb      	ldr	r3, [r7, #24]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	40da      	lsrs	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <RCC_GetClocksFreq+0x140>)
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80006c0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80006c2:	69bb      	ldr	r3, [r7, #24]
 80006c4:	0a9b      	lsrs	r3, r3, #10
 80006c6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80006c8:	4a15      	ldr	r2, [pc, #84]	; (8000720 <RCC_GetClocksFreq+0x14c>)
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	4413      	add	r3, r2
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	685a      	ldr	r2, [r3, #4]
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	40da      	lsrs	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <RCC_GetClocksFreq+0x140>)
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80006e8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	0b5b      	lsrs	r3, r3, #13
 80006ee:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80006f0:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <RCC_GetClocksFreq+0x14c>)
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	4413      	add	r3, r2
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	685a      	ldr	r2, [r3, #4]
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	40da      	lsrs	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	60da      	str	r2, [r3, #12]
}
 8000708:	bf00      	nop
 800070a:	3724      	adds	r7, #36	; 0x24
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	40023800 	.word	0x40023800
 8000718:	00f42400 	.word	0x00f42400
 800071c:	007a1200 	.word	0x007a1200
 8000720:	20000000 	.word	0x20000000

08000724 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000730:	78fb      	ldrb	r3, [r7, #3]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d006      	beq.n	8000744 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000736:	490a      	ldr	r1, [pc, #40]	; (8000760 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <RCC_AHB1PeriphClockCmd+0x3c>)
 800073a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4313      	orrs	r3, r2
 8000740:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000742:	e006      	b.n	8000752 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000744:	4906      	ldr	r1, [pc, #24]	; (8000760 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	43db      	mvns	r3, r3
 800074e:	4013      	ands	r3, r2
 8000750:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800

08000764 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d006      	beq.n	8000784 <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000776:	490a      	ldr	r1, [pc, #40]	; (80007a0 <RCC_AHB2PeriphClockCmd+0x3c>)
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <RCC_AHB2PeriphClockCmd+0x3c>)
 800077a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4313      	orrs	r3, r2
 8000780:	634b      	str	r3, [r1, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
 8000782:	e006      	b.n	8000792 <RCC_AHB2PeriphClockCmd+0x2e>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8000784:	4906      	ldr	r1, [pc, #24]	; (80007a0 <RCC_AHB2PeriphClockCmd+0x3c>)
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <RCC_AHB2PeriphClockCmd+0x3c>)
 8000788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	43db      	mvns	r3, r3
 800078e:	4013      	ands	r3, r2
 8000790:	634b      	str	r3, [r1, #52]	; 0x34
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d006      	beq.n	80007c4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80007b6:	490a      	ldr	r1, [pc, #40]	; (80007e0 <RCC_APB2PeriphClockCmd+0x3c>)
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <RCC_APB2PeriphClockCmd+0x3c>)
 80007ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4313      	orrs	r3, r2
 80007c0:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80007c2:	e006      	b.n	80007d2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80007c4:	4906      	ldr	r1, [pc, #24]	; (80007e0 <RCC_APB2PeriphClockCmd+0x3c>)
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <RCC_APB2PeriphClockCmd+0x3c>)
 80007c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	43db      	mvns	r3, r3
 80007ce:	4013      	ands	r3, r2
 80007d0:	644b      	str	r3, [r1, #68]	; 0x44
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800

080007e4 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007f0:	78fb      	ldrb	r3, [r7, #3]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d006      	beq.n	8000804 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80007f6:	490a      	ldr	r1, [pc, #40]	; (8000820 <RCC_APB1PeriphResetCmd+0x3c>)
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <RCC_APB1PeriphResetCmd+0x3c>)
 80007fa:	6a1a      	ldr	r2, [r3, #32]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4313      	orrs	r3, r2
 8000800:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8000802:	e006      	b.n	8000812 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000804:	4906      	ldr	r1, [pc, #24]	; (8000820 <RCC_APB1PeriphResetCmd+0x3c>)
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <RCC_APB1PeriphResetCmd+0x3c>)
 8000808:	6a1a      	ldr	r2, [r3, #32]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	43db      	mvns	r3, r3
 800080e:	4013      	ands	r3, r2
 8000810:	620b      	str	r3, [r1, #32]
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000830:	78fb      	ldrb	r3, [r7, #3]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d006      	beq.n	8000844 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000836:	490a      	ldr	r1, [pc, #40]	; (8000860 <RCC_APB2PeriphResetCmd+0x3c>)
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <RCC_APB2PeriphResetCmd+0x3c>)
 800083a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4313      	orrs	r3, r2
 8000840:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000842:	e006      	b.n	8000852 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000844:	4906      	ldr	r1, [pc, #24]	; (8000860 <RCC_APB2PeriphResetCmd+0x3c>)
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <RCC_APB2PeriphResetCmd+0x3c>)
 8000848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	43db      	mvns	r3, r3
 800084e:	4013      	ands	r3, r2
 8000850:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a3b      	ldr	r2, [pc, #236]	; (800095c <USART_DeInit+0xf8>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d108      	bne.n	8000886 <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8000874:	2101      	movs	r1, #1
 8000876:	2010      	movs	r0, #16
 8000878:	f7ff ffd4 	bl	8000824 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800087c:	2100      	movs	r1, #0
 800087e:	2010      	movs	r0, #16
 8000880:	f7ff ffd0 	bl	8000824 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000884:	e065      	b.n	8000952 <USART_DeInit+0xee>
  else if (USARTx == USART2)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a35      	ldr	r2, [pc, #212]	; (8000960 <USART_DeInit+0xfc>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d10a      	bne.n	80008a4 <USART_DeInit+0x40>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800088e:	2101      	movs	r1, #1
 8000890:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000894:	f7ff ffa6 	bl	80007e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000898:	2100      	movs	r1, #0
 800089a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800089e:	f7ff ffa1 	bl	80007e4 <RCC_APB1PeriphResetCmd>
}
 80008a2:	e056      	b.n	8000952 <USART_DeInit+0xee>
  else if (USARTx == USART3)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a2f      	ldr	r2, [pc, #188]	; (8000964 <USART_DeInit+0x100>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d10a      	bne.n	80008c2 <USART_DeInit+0x5e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 80008ac:	2101      	movs	r1, #1
 80008ae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80008b2:	f7ff ff97 	bl	80007e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80008b6:	2100      	movs	r1, #0
 80008b8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80008bc:	f7ff ff92 	bl	80007e4 <RCC_APB1PeriphResetCmd>
}
 80008c0:	e047      	b.n	8000952 <USART_DeInit+0xee>
  else if (USARTx == UART4)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4a28      	ldr	r2, [pc, #160]	; (8000968 <USART_DeInit+0x104>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d10a      	bne.n	80008e0 <USART_DeInit+0x7c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80008ca:	2101      	movs	r1, #1
 80008cc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80008d0:	f7ff ff88 	bl	80007e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80008d4:	2100      	movs	r1, #0
 80008d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80008da:	f7ff ff83 	bl	80007e4 <RCC_APB1PeriphResetCmd>
}
 80008de:	e038      	b.n	8000952 <USART_DeInit+0xee>
  else if (USARTx == UART5)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a22      	ldr	r2, [pc, #136]	; (800096c <USART_DeInit+0x108>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d10a      	bne.n	80008fe <USART_DeInit+0x9a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80008e8:	2101      	movs	r1, #1
 80008ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ee:	f7ff ff79 	bl	80007e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80008f2:	2100      	movs	r1, #0
 80008f4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008f8:	f7ff ff74 	bl	80007e4 <RCC_APB1PeriphResetCmd>
}
 80008fc:	e029      	b.n	8000952 <USART_DeInit+0xee>
  else if (USARTx == USART6)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <USART_DeInit+0x10c>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d108      	bne.n	8000918 <USART_DeInit+0xb4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8000906:	2101      	movs	r1, #1
 8000908:	2020      	movs	r0, #32
 800090a:	f7ff ff8b 	bl	8000824 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 800090e:	2100      	movs	r1, #0
 8000910:	2020      	movs	r0, #32
 8000912:	f7ff ff87 	bl	8000824 <RCC_APB2PeriphResetCmd>
}
 8000916:	e01c      	b.n	8000952 <USART_DeInit+0xee>
  else if (USARTx == UART7)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a16      	ldr	r2, [pc, #88]	; (8000974 <USART_DeInit+0x110>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d10a      	bne.n	8000936 <USART_DeInit+0xd2>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 8000920:	2101      	movs	r1, #1
 8000922:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000926:	f7ff ff5d 	bl	80007e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 800092a:	2100      	movs	r1, #0
 800092c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000930:	f7ff ff58 	bl	80007e4 <RCC_APB1PeriphResetCmd>
}
 8000934:	e00d      	b.n	8000952 <USART_DeInit+0xee>
    if (USARTx == UART8)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <USART_DeInit+0x114>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d109      	bne.n	8000952 <USART_DeInit+0xee>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 800093e:	2101      	movs	r1, #1
 8000940:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000944:	f7ff ff4e 	bl	80007e4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8000948:	2100      	movs	r1, #0
 800094a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800094e:	f7ff ff49 	bl	80007e4 <RCC_APB1PeriphResetCmd>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40011000 	.word	0x40011000
 8000960:	40004400 	.word	0x40004400
 8000964:	40004800 	.word	0x40004800
 8000968:	40004c00 	.word	0x40004c00
 800096c:	40005000 	.word	0x40005000
 8000970:	40011400 	.word	0x40011400
 8000974:	40007800 	.word	0x40007800
 8000978:	40007c00 	.word	0x40007c00

0800097c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000992:	2300      	movs	r3, #0
 8000994:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	8a1b      	ldrh	r3, [r3, #16]
 800099a:	b29b      	uxth	r3, r3
 800099c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	88db      	ldrh	r3, [r3, #6]
 80009aa:	461a      	mov	r2, r3
 80009ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ae:	4313      	orrs	r3, r2
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80009b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	899b      	ldrh	r3, [r3, #12]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80009c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80009c8:	f023 030c 	bic.w	r3, r3, #12
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	889a      	ldrh	r2, [r3, #4]
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	891b      	ldrh	r3, [r3, #8]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80009de:	4313      	orrs	r3, r2
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	461a      	mov	r2, r3
 80009e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e6:	4313      	orrs	r3, r2
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80009ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	8a9b      	ldrh	r3, [r3, #20]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	899b      	ldrh	r3, [r3, #12]
 8000a06:	461a      	mov	r2, r3
 8000a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fdda 	bl	80005d4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a30      	ldr	r2, [pc, #192]	; (8000ae4 <USART_Init+0x168>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d003      	beq.n	8000a30 <USART_Init+0xb4>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a2f      	ldr	r2, [pc, #188]	; (8000ae8 <USART_Init+0x16c>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d102      	bne.n	8000a36 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	623b      	str	r3, [r7, #32]
 8000a34:	e001      	b.n	8000a3a <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	899b      	ldrh	r3, [r3, #12]
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	b21b      	sxth	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	da0c      	bge.n	8000a60 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000a46:	6a3a      	ldr	r2, [r7, #32]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4413      	add	r3, r2
 8000a4e:	009a      	lsls	r2, r3, #2
 8000a50:	441a      	add	r2, r3
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5c:	61fb      	str	r3, [r7, #28]
 8000a5e:	e00b      	b.n	8000a78 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000a60:	6a3a      	ldr	r2, [r7, #32]
 8000a62:	4613      	mov	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4413      	add	r3, r2
 8000a68:	009a      	lsls	r2, r3, #2
 8000a6a:	441a      	add	r2, r3
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a76:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <USART_Init+0x170>)
 8000a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a80:	095b      	lsrs	r3, r3, #5
 8000a82:	011b      	lsls	r3, r3, #4
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a88:	091b      	lsrs	r3, r3, #4
 8000a8a:	2264      	movs	r2, #100	; 0x64
 8000a8c:	fb02 f303 	mul.w	r3, r2, r3
 8000a90:	69fa      	ldr	r2, [r7, #28]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	899b      	ldrh	r3, [r3, #12]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	b21b      	sxth	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	da0c      	bge.n	8000abc <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	3332      	adds	r3, #50	; 0x32
 8000aa8:	4a10      	ldr	r2, [pc, #64]	; (8000aec <USART_Init+0x170>)
 8000aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8000aae:	095b      	lsrs	r3, r3, #5
 8000ab0:	f003 0307 	and.w	r3, r3, #7
 8000ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8000aba:	e00b      	b.n	8000ad4 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	011b      	lsls	r3, r3, #4
 8000ac0:	3332      	adds	r3, #50	; 0x32
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <USART_Init+0x170>)
 8000ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac8:	095b      	lsrs	r3, r3, #5
 8000aca:	f003 030f 	and.w	r3, r3, #15
 8000ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	811a      	strh	r2, [r3, #8]
}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40011000 	.word	0x40011000
 8000ae8:	40011400 	.word	0x40011400
 8000aec:	51eb851f 	.word	0x51eb851f

08000af0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	da0b      	bge.n	8000b1c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000b04:	490d      	ldr	r1, [pc, #52]	; (8000b3c <NVIC_SetPriority+0x4c>)
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	f003 030f 	and.w	r3, r3, #15
 8000b0c:	3b04      	subs	r3, #4
 8000b0e:	683a      	ldr	r2, [r7, #0]
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	0112      	lsls	r2, r2, #4
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	440b      	add	r3, r1
 8000b18:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000b1a:	e009      	b.n	8000b30 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000b1c:	4908      	ldr	r1, [pc, #32]	; (8000b40 <NVIC_SetPriority+0x50>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	683a      	ldr	r2, [r7, #0]
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	0112      	lsls	r2, r2, #4
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00
 8000b40:	e000e100 	.word	0xe000e100

08000b44 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b52:	d301      	bcc.n	8000b58 <SysTick_Config+0x14>
 8000b54:	2301      	movs	r3, #1
 8000b56:	e011      	b.n	8000b7c <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000b58:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <SysTick_Config+0x40>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000b60:	3b01      	subs	r3, #1
 8000b62:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000b64:	210f      	movs	r1, #15
 8000b66:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6a:	f7ff ffc1 	bl	8000af0 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000b6e:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <SysTick_Config+0x40>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <SysTick_Config+0x40>)
 8000b76:	2207      	movs	r2, #7
 8000b78:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000b7a:	2300      	movs	r3, #0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	e000e010 	.word	0xe000e010

08000b88 <SysTick_Handler>:
void TM_DELAY_TIM_IRQ_HANDLER(void) {
	TM_DELAY_TIM->SR = ~TIM_IT_Update;
#elif defined(KEIL_IDE)
void TimingDelay_Decrement(void) {
#else
void SysTick_Handler(void) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
#endif
	uint8_t i;
	
	TM_Time++;
 8000b8e:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <SysTick_Handler+0xe4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	3301      	adds	r3, #1
 8000b94:	4a35      	ldr	r2, [pc, #212]	; (8000c6c <SysTick_Handler+0xe4>)
 8000b96:	6013      	str	r3, [r2, #0]
	if (TM_Time2 != 0x00) {
 8000b98:	4b35      	ldr	r3, [pc, #212]	; (8000c70 <SysTick_Handler+0xe8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d004      	beq.n	8000baa <SysTick_Handler+0x22>
		TM_Time2--;
 8000ba0:	4b33      	ldr	r3, [pc, #204]	; (8000c70 <SysTick_Handler+0xe8>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	4a32      	ldr	r2, [pc, #200]	; (8000c70 <SysTick_Handler+0xe8>)
 8000ba8:	6013      	str	r3, [r2, #0]
	}
	
	/* Call user function */
	TM_DELAY_1msHandler();
 8000baa:	f3af 8000 	nop.w
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8000bae:	2300      	movs	r3, #0
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	e052      	b.n	8000c5a <SysTick_Handler+0xd2>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	4a2f      	ldr	r2, [pc, #188]	; (8000c74 <SysTick_Handler+0xec>)
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4413      	add	r3, r2
 8000bbc:	685b      	ldr	r3, [r3, #4]
		if (
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d048      	beq.n	8000c54 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	4a2b      	ldr	r2, [pc, #172]	; (8000c74 <SysTick_Handler+0xec>)
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	4413      	add	r3, r2
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	7b1b      	ldrb	r3, [r3, #12]
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d040      	beq.n	8000c54 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	4a27      	ldr	r2, [pc, #156]	; (8000c74 <SysTick_Handler+0xec>)
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	4413      	add	r3, r2
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	689b      	ldr	r3, [r3, #8]
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d038      	beq.n	8000c54 <SysTick_Handler+0xcc>
		) {
			/* Decrease counter */
			CustomTimers.Timers[i]->CNT--;
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <SysTick_Handler+0xec>)
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4413      	add	r3, r2
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	3a01      	subs	r2, #1
 8000bf0:	609a      	str	r2, [r3, #8]
			
			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	4a1f      	ldr	r2, [pc, #124]	; (8000c74 <SysTick_Handler+0xec>)
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d128      	bne.n	8000c54 <SysTick_Handler+0xcc>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i]->UserParameters);
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <SysTick_Handler+0xec>)
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	4413      	add	r3, r2
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	691a      	ldr	r2, [r3, #16]
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4918      	ldr	r1, [pc, #96]	; (8000c74 <SysTick_Handler+0xec>)
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	440b      	add	r3, r1
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	4790      	blx	r2
				
				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <SysTick_Handler+0xec>)
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	4413      	add	r3, r2
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	4912      	ldr	r1, [pc, #72]	; (8000c74 <SysTick_Handler+0xec>)
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	440b      	add	r3, r1
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	6093      	str	r3, [r2, #8]
				
				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->AutoReload) {
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <SysTick_Handler+0xec>)
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d106      	bne.n	8000c54 <SysTick_Handler+0xcc>
					/* Disable counter */
					CustomTimers.Timers[i]->Enabled = 0;
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <SysTick_Handler+0xec>)
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	4413      	add	r3, r2
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < CustomTimers.Count; i++) {
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	3301      	adds	r3, #1
 8000c58:	71fb      	strb	r3, [r7, #7]
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <SysTick_Handler+0xec>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	79fa      	ldrb	r2, [r7, #7]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d3a7      	bcc.n	8000bb4 <SysTick_Handler+0x2c>
				}
			}
		}
	}
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	2000010c 	.word	0x2000010c
 8000c70:	20000110 	.word	0x20000110
 8000c74:	20000118 	.word	0x20000118

08000c78 <TM_DELAY_Init>:

void TM_DELAY_Init(void) {	
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
#if defined(TM_DELAY_TIM)
	TM_DELAY_INT_InitTIM();
#else
	/* Set Systick interrupt every 1ms */
	if (SysTick_Config(SystemCoreClock / 1000)) {
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <TM_DELAY_Init+0x3c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0d      	ldr	r2, [pc, #52]	; (8000cb8 <TM_DELAY_Init+0x40>)
 8000c82:	fba2 2303 	umull	r2, r3, r2, r3
 8000c86:	099b      	lsrs	r3, r3, #6
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff5b 	bl	8000b44 <SysTick_Config>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d000      	beq.n	8000c96 <TM_DELAY_Init+0x1e>
		/* Capture error */
		while (1);
 8000c94:	e7fe      	b.n	8000c94 <TM_DELAY_Init+0x1c>
	}
	
	#ifdef __GNUC__
		/* Set multiplier for delay under 1us with pooling mode = not so accurate */
		mult = SystemCoreClock / 7000000;
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <TM_DELAY_Init+0x3c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	099b      	lsrs	r3, r3, #6
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <TM_DELAY_Init+0x44>)
 8000c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca2:	0a9b      	lsrs	r3, r3, #10
 8000ca4:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <TM_DELAY_Init+0x48>)
 8000ca6:	6013      	str	r3, [r2, #0]
		mult = SystemCoreClock / 3000000;
	#endif
#endif
	
	/* Set initialized flag */
	TM_DELAY_Initialized = 1;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <TM_DELAY_Init+0x4c>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	701a      	strb	r2, [r3, #0]
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200000ec 	.word	0x200000ec
 8000cb8:	10624dd3 	.word	0x10624dd3
 8000cbc:	02659117 	.word	0x02659117
 8000cc0:	20000170 	.word	0x20000170
 8000cc4:	20000114 	.word	0x20000114

08000cc8 <TM_DISCO_LedInit>:
#include "tm_stm32f4_disco.h"

/* Button pressed status for onpressed/onreleased events */
static volatile uint8_t TM_INT_DISCO_ButtonPressed = 0;

void TM_DISCO_LedInit(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af02      	add	r7, sp, #8
	/* Set pins as output */
	TM_GPIO_Init(TM_DISCO_LED_PORT, LED_ALL, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High);
 8000cce:	2303      	movs	r3, #3
 8000cd0:	9301      	str	r3, [sp, #4]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <TM_DISCO_LedInit+0x2c>)
 8000ce0:	f000 f80a 	bl	8000cf8 <TM_GPIO_Init>
	
	/* Turn leds off */
	TM_DISCO_LedOff(LED_ALL);
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <TM_DISCO_LedInit+0x2c>)
 8000ce6:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8000cea:	835a      	strh	r2, [r3, #26]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40020c00 	.word	0x40020c00

08000cf8 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af02      	add	r7, sp, #8
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	4608      	mov	r0, r1
 8000d02:	4611      	mov	r1, r2
 8000d04:	461a      	mov	r2, r3
 8000d06:	4603      	mov	r3, r0
 8000d08:	807b      	strh	r3, [r7, #2]
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	707b      	strb	r3, [r7, #1]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 8000d12:	887b      	ldrh	r3, [r7, #2]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00e      	beq.n	8000d36 <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f000 f875 	bl	8000e08 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8000d1e:	7838      	ldrb	r0, [r7, #0]
 8000d20:	787a      	ldrb	r2, [r7, #1]
 8000d22:	8879      	ldrh	r1, [r7, #2]
 8000d24:	7d3b      	ldrb	r3, [r7, #20]
 8000d26:	9301      	str	r3, [sp, #4]
 8000d28:	7c3b      	ldrb	r3, [r7, #16]
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f000 f882 	bl	8000e38 <TM_GPIO_INT_Init>
 8000d34:	e000      	b.n	8000d38 <TM_GPIO_Init+0x40>
		return;
 8000d36:	bf00      	nop
}
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <TM_GPIO_InitAlternate>:

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af02      	add	r7, sp, #8
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	4608      	mov	r0, r1
 8000d48:	4611      	mov	r1, r2
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	807b      	strh	r3, [r7, #2]
 8000d50:	460b      	mov	r3, r1
 8000d52:	707b      	strb	r3, [r7, #1]
 8000d54:	4613      	mov	r3, r2
 8000d56:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 8000d58:	887b      	ldrh	r3, [r7, #2]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d03e      	beq.n	8000ddc <TM_GPIO_InitAlternate+0x9e>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f000 f852 	bl	8000e08 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	e029      	b.n	8000dbe <TM_GPIO_InitAlternate+0x80>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8000d6a:	887a      	ldrh	r2, [r7, #2]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	fa42 f303 	asr.w	r3, r2, r3
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d01d      	beq.n	8000db6 <TM_GPIO_InitAlternate+0x78>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	08da      	lsrs	r2, r3, #3
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	08d9      	lsrs	r1, r3, #3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3108      	adds	r1, #8
 8000d86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d8a:	68f9      	ldr	r1, [r7, #12]
 8000d8c:	f001 0107 	and.w	r1, r1, #7
 8000d90:	0089      	lsls	r1, r1, #2
 8000d92:	200f      	movs	r0, #15
 8000d94:	fa00 f101 	lsl.w	r1, r0, r1
 8000d98:	43c9      	mvns	r1, r1
 8000d9a:	400b      	ands	r3, r1
 8000d9c:	7f38      	ldrb	r0, [r7, #28]
 8000d9e:	68f9      	ldr	r1, [r7, #12]
 8000da0:	f001 0107 	and.w	r1, r1, #7
 8000da4:	0089      	lsls	r1, r1, #2
 8000da6:	fa00 f101 	lsl.w	r1, r0, r1
 8000daa:	4319      	orrs	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3208      	adds	r2, #8
 8000db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000db4:	e000      	b.n	8000db8 <TM_GPIO_InitAlternate+0x7a>
			continue;
 8000db6:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2b0f      	cmp	r3, #15
 8000dc2:	d9d2      	bls.n	8000d6a <TM_GPIO_InitAlternate+0x2c>
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8000dc4:	787a      	ldrb	r2, [r7, #1]
 8000dc6:	8879      	ldrh	r1, [r7, #2]
 8000dc8:	7e3b      	ldrb	r3, [r7, #24]
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	783b      	ldrb	r3, [r7, #0]
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f000 f82f 	bl	8000e38 <TM_GPIO_INT_Init>
 8000dda:	e000      	b.n	8000dde <TM_GPIO_InitAlternate+0xa0>
		return;
 8000ddc:	bf00      	nop
}
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8000df2:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8000df6:	0a9b      	lsrs	r3, r3, #10
 8000df8:	b29b      	uxth	r3, r3
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff ffe7 	bl	8000de4 <TM_GPIO_GetPortSource>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461a      	mov	r2, r3
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	fa03 f102 	lsl.w	r1, r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <TM_GPIO_INT_EnableClock+0x2c>)
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <TM_GPIO_INT_EnableClock+0x2c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	430b      	orrs	r3, r1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800

08000e38 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	4608      	mov	r0, r1
 8000e42:	4611      	mov	r1, r2
 8000e44:	461a      	mov	r2, r3
 8000e46:	4603      	mov	r3, r0
 8000e48:	807b      	strh	r3, [r7, #2]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	707b      	strb	r3, [r7, #1]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ffc6 	bl	8000de4 <TM_GPIO_GetPortSource>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]
 8000e60:	e067      	b.n	8000f32 <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8000e62:	887a      	ldrh	r2, [r7, #2]
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	fa42 f303 	asr.w	r3, r2, r3
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d05b      	beq.n	8000f2a <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8000e72:	7bbb      	ldrb	r3, [r7, #14]
 8000e74:	7bba      	ldrb	r2, [r7, #14]
 8000e76:	4932      	ldr	r1, [pc, #200]	; (8000f40 <TM_GPIO_INT_Init+0x108>)
 8000e78:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000e7c:	b211      	sxth	r1, r2
 8000e7e:	7bfa      	ldrb	r2, [r7, #15]
 8000e80:	2001      	movs	r0, #1
 8000e82:	fa00 f202 	lsl.w	r2, r0, r2
 8000e86:	b212      	sxth	r2, r2
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	b212      	sxth	r2, r2
 8000e8c:	b291      	uxth	r1, r2
 8000e8e:	4a2c      	ldr	r2, [pc, #176]	; (8000f40 <TM_GPIO_INT_Init+0x108>)
 8000e90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	7bfa      	ldrb	r2, [r7, #15]
 8000e9a:	0052      	lsls	r2, r2, #1
 8000e9c:	2103      	movs	r1, #3
 8000e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea2:	43d2      	mvns	r2, r2
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	7e39      	ldrb	r1, [r7, #24]
 8000ea8:	7bfa      	ldrb	r2, [r7, #15]
 8000eaa:	0052      	lsls	r2, r2, #1
 8000eac:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2103      	movs	r1, #3
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	7879      	ldrb	r1, [r7, #1]
 8000eca:	7bfa      	ldrb	r2, [r7, #15]
 8000ecc:	0052      	lsls	r2, r2, #1
 8000ece:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8000ed8:	787b      	ldrb	r3, [r7, #1]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d002      	beq.n	8000ee4 <TM_GPIO_INT_Init+0xac>
 8000ede:	787b      	ldrb	r3, [r7, #1]
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d123      	bne.n	8000f2c <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	7bfa      	ldrb	r2, [r7, #15]
 8000eea:	2101      	movs	r1, #1
 8000eec:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef0:	b292      	uxth	r2, r2
 8000ef2:	43d2      	mvns	r2, r2
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	7839      	ldrb	r1, [r7, #0]
 8000ef8:	7bfa      	ldrb	r2, [r7, #15]
 8000efa:	fa01 f202 	lsl.w	r2, r1, r2
 8000efe:	b292      	uxth	r2, r2
 8000f00:	431a      	orrs	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	2103      	movs	r1, #3
 8000f10:	fa01 f303 	lsl.w	r3, r1, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	4013      	ands	r3, r2
 8000f18:	7f39      	ldrb	r1, [r7, #28]
 8000f1a:	7bfa      	ldrb	r2, [r7, #15]
 8000f1c:	0052      	lsls	r2, r2, #1
 8000f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f22:	431a      	orrs	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	e000      	b.n	8000f2c <TM_GPIO_INT_Init+0xf4>
			continue;
 8000f2a:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d994      	bls.n	8000e62 <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000130 	.word	0x20000130

08000f44 <TM_USART_Init>:
	uint32_t Parity,
	uint32_t StopBits,
	uint32_t WordLength
);

void TM_USART_Init(USART_TypeDef* USARTx, TM_USART_PinsPack_t pinspack, uint32_t baudrate) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af04      	add	r7, sp, #16
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	72fb      	strb	r3, [r7, #11]
#ifdef USE_USART1
	if (USARTx == USART1) {
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4a37      	ldr	r2, [pc, #220]	; (8001034 <TM_USART_Init+0xf0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d10d      	bne.n	8000f76 <TM_USART_Init+0x32>
		TM_USART_INT_Init(USART1, pinspack, baudrate, TM_USART1_HARDWARE_FLOW_CONTROL, TM_USART1_MODE, TM_USART1_PARITY, TM_USART1_STOP_BITS, TM_USART1_WORD_LENGTH);
 8000f5a:	7af9      	ldrb	r1, [r7, #11]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	9303      	str	r3, [sp, #12]
 8000f60:	2300      	movs	r3, #0
 8000f62:	9302      	str	r3, [sp, #8]
 8000f64:	2300      	movs	r3, #0
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	230c      	movs	r3, #12
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	4830      	ldr	r0, [pc, #192]	; (8001034 <TM_USART_Init+0xf0>)
 8000f72:	f000 faef 	bl	8001554 <TM_USART_INT_Init>
	}
#endif
#ifdef USE_USART2
	if (USARTx == USART2) {
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4a2f      	ldr	r2, [pc, #188]	; (8001038 <TM_USART_Init+0xf4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d10d      	bne.n	8000f9a <TM_USART_Init+0x56>
		TM_USART_INT_Init(USART2, pinspack, baudrate, TM_USART2_HARDWARE_FLOW_CONTROL, TM_USART2_MODE, TM_USART2_PARITY, TM_USART2_STOP_BITS, TM_USART2_WORD_LENGTH);
 8000f7e:	7af9      	ldrb	r1, [r7, #11]
 8000f80:	2300      	movs	r3, #0
 8000f82:	9303      	str	r3, [sp, #12]
 8000f84:	2300      	movs	r3, #0
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	2300      	movs	r3, #0
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	230c      	movs	r3, #12
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2300      	movs	r3, #0
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	4828      	ldr	r0, [pc, #160]	; (8001038 <TM_USART_Init+0xf4>)
 8000f96:	f000 fadd 	bl	8001554 <TM_USART_INT_Init>
	}
#endif
#ifdef USE_USART3
	if (USARTx == USART3) {
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4a27      	ldr	r2, [pc, #156]	; (800103c <TM_USART_Init+0xf8>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d10d      	bne.n	8000fbe <TM_USART_Init+0x7a>
		TM_USART_INT_Init(USART3, pinspack, baudrate, TM_USART3_HARDWARE_FLOW_CONTROL, TM_USART3_MODE, TM_USART3_PARITY, TM_USART3_STOP_BITS, TM_USART3_WORD_LENGTH);
 8000fa2:	7af9      	ldrb	r1, [r7, #11]
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	9303      	str	r3, [sp, #12]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2300      	movs	r3, #0
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	230c      	movs	r3, #12
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	4820      	ldr	r0, [pc, #128]	; (800103c <TM_USART_Init+0xf8>)
 8000fba:	f000 facb 	bl	8001554 <TM_USART_INT_Init>
	}
#endif
#ifdef USE_UART4
	if (USARTx == UART4) {
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4a1f      	ldr	r2, [pc, #124]	; (8001040 <TM_USART_Init+0xfc>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d10d      	bne.n	8000fe2 <TM_USART_Init+0x9e>
		TM_USART_INT_Init(UART4, pinspack, baudrate, TM_UART4_HARDWARE_FLOW_CONTROL, TM_UART4_MODE, TM_UART4_PARITY, TM_UART4_STOP_BITS, TM_UART4_WORD_LENGTH);
 8000fc6:	7af9      	ldrb	r1, [r7, #11]
 8000fc8:	2300      	movs	r3, #0
 8000fca:	9303      	str	r3, [sp, #12]
 8000fcc:	2300      	movs	r3, #0
 8000fce:	9302      	str	r3, [sp, #8]
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	9301      	str	r3, [sp, #4]
 8000fd4:	230c      	movs	r3, #12
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2300      	movs	r3, #0
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	4818      	ldr	r0, [pc, #96]	; (8001040 <TM_USART_Init+0xfc>)
 8000fde:	f000 fab9 	bl	8001554 <TM_USART_INT_Init>
	}
#endif
#ifdef USE_UART5
	if (USARTx == UART5) {
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4a17      	ldr	r2, [pc, #92]	; (8001044 <TM_USART_Init+0x100>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d10d      	bne.n	8001006 <TM_USART_Init+0xc2>
		TM_USART_INT_Init(UART5, pinspack, baudrate, TM_UART5_HARDWARE_FLOW_CONTROL, TM_UART5_MODE, TM_UART5_PARITY, TM_UART5_STOP_BITS, TM_UART5_WORD_LENGTH);
 8000fea:	7af9      	ldrb	r1, [r7, #11]
 8000fec:	2300      	movs	r3, #0
 8000fee:	9303      	str	r3, [sp, #12]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	9302      	str	r3, [sp, #8]
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	230c      	movs	r3, #12
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	4810      	ldr	r0, [pc, #64]	; (8001044 <TM_USART_Init+0x100>)
 8001002:	f000 faa7 	bl	8001554 <TM_USART_INT_Init>
	}
#endif
#ifdef USE_USART6
	if (USARTx == USART6) {
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <TM_USART_Init+0x104>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d10d      	bne.n	800102a <TM_USART_Init+0xe6>
		TM_USART_INT_Init(USART6, pinspack, baudrate, TM_USART6_HARDWARE_FLOW_CONTROL, TM_USART6_MODE, TM_USART6_PARITY, TM_USART6_STOP_BITS, TM_USART6_WORD_LENGTH);
 800100e:	7af9      	ldrb	r1, [r7, #11]
 8001010:	2300      	movs	r3, #0
 8001012:	9303      	str	r3, [sp, #12]
 8001014:	2300      	movs	r3, #0
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	2300      	movs	r3, #0
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	230c      	movs	r3, #12
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2300      	movs	r3, #0
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	4808      	ldr	r0, [pc, #32]	; (8001048 <TM_USART_Init+0x104>)
 8001026:	f000 fa95 	bl	8001554 <TM_USART_INT_Init>
#ifdef USE_UART8
	if (USARTx == UART8) {
		TM_USART_INT_Init(UART8, pinspack, baudrate, TM_UART8_HARDWARE_FLOW_CONTROL, TM_UART8_MODE, TM_UART8_PARITY, TM_UART8_STOP_BITS, TM_UART8_WORD_LENGTH);
	}
#endif
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40011000 	.word	0x40011000
 8001038:	40004400 	.word	0x40004400
 800103c:	40004800 	.word	0x40004800
 8001040:	40004c00 	.word	0x40004c00
 8001044:	40005000 	.word	0x40005000
 8001048:	40011400 	.word	0x40011400

0800104c <TM_USART_INT_InsertToBuffer>:
		USART_WAIT(USARTx);
	}
}

/* Private functions */
void TM_USART_INT_InsertToBuffer(TM_USART_t* u, uint8_t c) {
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	70fb      	strb	r3, [r7, #3]
	/* Still available space in buffer */
	if (u->Num < u->Size) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	88da      	ldrh	r2, [r3, #6]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	889b      	ldrh	r3, [r3, #4]
 8001060:	429a      	cmp	r2, r3
 8001062:	d21b      	bcs.n	800109c <TM_USART_INT_InsertToBuffer+0x50>
		/* Check overflow */
		if (u->In == u->Size) {
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	891a      	ldrh	r2, [r3, #8]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	889b      	ldrh	r3, [r3, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	d102      	bne.n	8001076 <TM_USART_INT_InsertToBuffer+0x2a>
			u->In = 0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	811a      	strh	r2, [r3, #8]
		}
		
		/* Add to buffer */
		u->Buffer[u->In] = c;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	8912      	ldrh	r2, [r2, #8]
 800107e:	4413      	add	r3, r2
 8001080:	78fa      	ldrb	r2, [r7, #3]
 8001082:	701a      	strb	r2, [r3, #0]
		u->In++;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	891b      	ldrh	r3, [r3, #8]
 8001088:	3301      	adds	r3, #1
 800108a:	b29a      	uxth	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	811a      	strh	r2, [r3, #8]
		u->Num++;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	88db      	ldrh	r3, [r3, #6]
 8001094:	3301      	adds	r3, #1
 8001096:	b29a      	uxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	80da      	strh	r2, [r3, #6]
	}
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <TM_USART_InitCustomPinsCallback>:

__weak void TM_USART_InitCustomPinsCallback(USART_TypeDef* USARTx, uint16_t AlternateFunction) {
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <TM_USART_INT_GetUsart>:

TM_USART_t* TM_USART_INT_GetUsart(USART_TypeDef* USARTx) {
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	TM_USART_t* u;
	
#ifdef USE_USART1
	if (USARTx == USART1) {
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a15      	ldr	r2, [pc, #84]	; (8001120 <TM_USART_INT_GetUsart+0x60>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d101      	bne.n	80010d4 <TM_USART_INT_GetUsart+0x14>
		u = &TM_USART1;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <TM_USART_INT_GetUsart+0x64>)
 80010d2:	60fb      	str	r3, [r7, #12]
	}
#endif
#ifdef USE_USART2
	if (USARTx == USART2) {
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a14      	ldr	r2, [pc, #80]	; (8001128 <TM_USART_INT_GetUsart+0x68>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d101      	bne.n	80010e0 <TM_USART_INT_GetUsart+0x20>
		u = &TM_USART2;
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <TM_USART_INT_GetUsart+0x6c>)
 80010de:	60fb      	str	r3, [r7, #12]
	}
#endif
#ifdef USE_USART3
	if (USARTx == USART3) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a13      	ldr	r2, [pc, #76]	; (8001130 <TM_USART_INT_GetUsart+0x70>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d101      	bne.n	80010ec <TM_USART_INT_GetUsart+0x2c>
		u = &TM_USART3;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <TM_USART_INT_GetUsart+0x74>)
 80010ea:	60fb      	str	r3, [r7, #12]
	}
#endif
#ifdef USE_UART4
	if (USARTx == UART4) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a12      	ldr	r2, [pc, #72]	; (8001138 <TM_USART_INT_GetUsart+0x78>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d101      	bne.n	80010f8 <TM_USART_INT_GetUsart+0x38>
		u = &TM_UART4;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <TM_USART_INT_GetUsart+0x7c>)
 80010f6:	60fb      	str	r3, [r7, #12]
	}
#endif
#ifdef USE_UART5
	if (USARTx == UART5) {
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a11      	ldr	r2, [pc, #68]	; (8001140 <TM_USART_INT_GetUsart+0x80>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d101      	bne.n	8001104 <TM_USART_INT_GetUsart+0x44>
		u = &TM_UART5;
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <TM_USART_INT_GetUsart+0x84>)
 8001102:	60fb      	str	r3, [r7, #12]
	}
#endif
#ifdef USE_USART6
	if (USARTx == USART6) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a10      	ldr	r2, [pc, #64]	; (8001148 <TM_USART_INT_GetUsart+0x88>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d101      	bne.n	8001110 <TM_USART_INT_GetUsart+0x50>
		u = &TM_USART6;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <TM_USART_INT_GetUsart+0x8c>)
 800110e:	60fb      	str	r3, [r7, #12]
	if (USARTx == UART8) {
		u = &TM_UART8;
	}
#endif

	return u;
 8001110:	68fb      	ldr	r3, [r7, #12]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40011000 	.word	0x40011000
 8001124:	20000010 	.word	0x20000010
 8001128:	40004400 	.word	0x40004400
 800112c:	20000020 	.word	0x20000020
 8001130:	40004800 	.word	0x40004800
 8001134:	20000030 	.word	0x20000030
 8001138:	40004c00 	.word	0x40004c00
 800113c:	20000040 	.word	0x20000040
 8001140:	40005000 	.word	0x40005000
 8001144:	20000050 	.word	0x20000050
 8001148:	40011400 	.word	0x40011400
 800114c:	20000060 	.word	0x20000060

08001150 <TM_USART_INT_GetSubPriority>:

uint8_t TM_USART_INT_GetSubPriority(USART_TypeDef* USARTx) {
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	uint8_t u;
	
#ifdef USE_USART1
	if (USARTx == USART1) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <TM_USART_INT_GetSubPriority+0x60>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d101      	bne.n	8001164 <TM_USART_INT_GetSubPriority+0x14>
		u = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]
	}
#endif
#ifdef USE_USART2
	if (USARTx == USART2) {
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <TM_USART_INT_GetSubPriority+0x64>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d101      	bne.n	8001170 <TM_USART_INT_GetSubPriority+0x20>
		u = 1;
 800116c:	2301      	movs	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
	}
#endif
#ifdef USE_USART3
	if (USARTx == USART3) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <TM_USART_INT_GetSubPriority+0x68>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d101      	bne.n	800117c <TM_USART_INT_GetSubPriority+0x2c>
		u = 2;
 8001178:	2302      	movs	r3, #2
 800117a:	73fb      	strb	r3, [r7, #15]
	}
#endif
#ifdef USE_UART4
	if (USARTx == UART4) {
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <TM_USART_INT_GetSubPriority+0x6c>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d101      	bne.n	8001188 <TM_USART_INT_GetSubPriority+0x38>
		u = 4;
 8001184:	2304      	movs	r3, #4
 8001186:	73fb      	strb	r3, [r7, #15]
	}
#endif
#ifdef USE_UART5
	if (USARTx == UART5) {
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <TM_USART_INT_GetSubPriority+0x70>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d101      	bne.n	8001194 <TM_USART_INT_GetSubPriority+0x44>
		u = 5;
 8001190:	2305      	movs	r3, #5
 8001192:	73fb      	strb	r3, [r7, #15]
	}
#endif
#ifdef USE_USART6
	if (USARTx == USART6) {
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <TM_USART_INT_GetSubPriority+0x74>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d101      	bne.n	80011a0 <TM_USART_INT_GetSubPriority+0x50>
		u = 6;
 800119c:	2306      	movs	r3, #6
 800119e:	73fb      	strb	r3, [r7, #15]
	if (USARTx == UART8) {
		u = 8;
	}
#endif
	
	return u;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40011000 	.word	0x40011000
 80011b4:	40004400 	.word	0x40004400
 80011b8:	40004800 	.word	0x40004800
 80011bc:	40004c00 	.word	0x40004c00
 80011c0:	40005000 	.word	0x40005000
 80011c4:	40011400 	.word	0x40011400

080011c8 <TM_USART1_InitPins>:

#ifdef USE_USART1
void TM_USART1_InitPins(TM_USART_PinsPack_t pinspack) {	
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOA)
	if (pinspack == TM_USART_PinsPack_1) {
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d10a      	bne.n	80011ee <TM_USART1_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOA, GPIO_Pin_9 | GPIO_Pin_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_High, GPIO_AF_USART1);
 80011d8:	2307      	movs	r3, #7
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	2303      	movs	r3, #3
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	2200      	movs	r2, #0
 80011e4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80011e8:	480d      	ldr	r0, [pc, #52]	; (8001220 <TM_USART1_InitPins+0x58>)
 80011ea:	f7ff fda8 	bl	8000d3e <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_USART_PinsPack_2) {
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d109      	bne.n	8001208 <TM_USART1_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOB, GPIO_Pin_6 | GPIO_Pin_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_High, GPIO_AF_USART1);
 80011f4:	2307      	movs	r3, #7
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	2303      	movs	r3, #3
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2301      	movs	r3, #1
 80011fe:	2200      	movs	r2, #0
 8001200:	21c0      	movs	r1, #192	; 0xc0
 8001202:	4808      	ldr	r0, [pc, #32]	; (8001224 <TM_USART1_InitPins+0x5c>)
 8001204:	f7ff fd9b 	bl	8000d3e <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_USART_PinsPack_Custom) {
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d103      	bne.n	8001216 <TM_USART1_InitPins+0x4e>
		/* Init custom pins, callback used */
		TM_USART_InitCustomPinsCallback(USART1, GPIO_AF_USART1);
 800120e:	2107      	movs	r1, #7
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <TM_USART1_InitPins+0x60>)
 8001212:	f7ff ff49 	bl	80010a8 <TM_USART_InitCustomPinsCallback>
	}
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40020000 	.word	0x40020000
 8001224:	40020400 	.word	0x40020400
 8001228:	40011000 	.word	0x40011000

0800122c <TM_USART2_InitPins>:
#endif

#ifdef USE_USART2
void TM_USART2_InitPins(TM_USART_PinsPack_t pinspack) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af02      	add	r7, sp, #8
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOA)
	if (pinspack == TM_USART_PinsPack_1) {
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d109      	bne.n	8001250 <TM_USART2_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOA, GPIO_Pin_2 | GPIO_Pin_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_High, GPIO_AF_USART2);
 800123c:	2307      	movs	r3, #7
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	2303      	movs	r3, #3
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2301      	movs	r3, #1
 8001246:	2200      	movs	r2, #0
 8001248:	210c      	movs	r1, #12
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <TM_USART2_InitPins+0x54>)
 800124c:	f7ff fd77 	bl	8000d3e <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOD)
	if (pinspack == TM_USART_PinsPack_2) {
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d109      	bne.n	800126a <TM_USART2_InitPins+0x3e>
		TM_GPIO_InitAlternate(GPIOD, GPIO_Pin_5 | GPIO_Pin_6, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_High, GPIO_AF_USART2);
 8001256:	2307      	movs	r3, #7
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	2303      	movs	r3, #3
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2301      	movs	r3, #1
 8001260:	2200      	movs	r2, #0
 8001262:	2160      	movs	r1, #96	; 0x60
 8001264:	4807      	ldr	r0, [pc, #28]	; (8001284 <TM_USART2_InitPins+0x58>)
 8001266:	f7ff fd6a 	bl	8000d3e <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_USART_PinsPack_Custom) {
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	2b03      	cmp	r3, #3
 800126e:	d103      	bne.n	8001278 <TM_USART2_InitPins+0x4c>
		/* Init custom pins, callback used */
		TM_USART_InitCustomPinsCallback(USART2, GPIO_AF_USART2);
 8001270:	2107      	movs	r1, #7
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <TM_USART2_InitPins+0x5c>)
 8001274:	f7ff ff18 	bl	80010a8 <TM_USART_InitCustomPinsCallback>
	}
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40020000 	.word	0x40020000
 8001284:	40020c00 	.word	0x40020c00
 8001288:	40004400 	.word	0x40004400

0800128c <TM_USART3_InitPins>:
#endif

#ifdef USE_USART3
void TM_USART3_InitPins(TM_USART_PinsPack_t pinspack) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af02      	add	r7, sp, #8
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_USART_PinsPack_1) {
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d10a      	bne.n	80012b2 <TM_USART3_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOB, GPIO_Pin_10 | GPIO_Pin_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_High, GPIO_AF_USART3);
 800129c:	2307      	movs	r3, #7
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	2303      	movs	r3, #3
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2301      	movs	r3, #1
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80012ac:	4814      	ldr	r0, [pc, #80]	; (8001300 <TM_USART3_InitPins+0x74>)
 80012ae:	f7ff fd46 	bl	8000d3e <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOC)
	if (pinspack == TM_USART_PinsPack_2) {
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d10a      	bne.n	80012ce <TM_USART3_InitPins+0x42>
		TM_GPIO_InitAlternate(GPIOC, GPIO_Pin_10 | GPIO_Pin_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_High, GPIO_AF_USART3);
 80012b8:	2307      	movs	r3, #7
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	2303      	movs	r3, #3
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	2200      	movs	r2, #0
 80012c4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80012c8:	480e      	ldr	r0, [pc, #56]	; (8001304 <TM_USART3_InitPins+0x78>)
 80012ca:	f7ff fd38 	bl	8000d3e <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOD)
	if (pinspack == TM_USART_PinsPack_3) {
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d10a      	bne.n	80012ea <TM_USART3_InitPins+0x5e>
		TM_GPIO_InitAlternate(GPIOD, GPIO_Pin_8 | GPIO_Pin_9, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_High, GPIO_AF_USART3);
 80012d4:	2307      	movs	r3, #7
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	2303      	movs	r3, #3
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2301      	movs	r3, #1
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80012e4:	4808      	ldr	r0, [pc, #32]	; (8001308 <TM_USART3_InitPins+0x7c>)
 80012e6:	f7ff fd2a 	bl	8000d3e <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_USART_PinsPack_Custom) {
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d103      	bne.n	80012f8 <TM_USART3_InitPins+0x6c>
		/* Init custom pins, callback used */
		TM_USART_InitCustomPinsCallback(USART3, GPIO_AF_USART3);
 80012f0:	2107      	movs	r1, #7
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <TM_USART3_InitPins+0x80>)
 80012f4:	f7ff fed8 	bl	80010a8 <TM_USART_InitCustomPinsCallback>
	}
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40020400 	.word	0x40020400
 8001304:	40020800 	.word	0x40020800
 8001308:	40020c00 	.word	0x40020c00
 800130c:	40004800 	.word	0x40004800

08001310 <TM_UART4_InitPins>:
#endif

#ifdef USE_UART4
void TM_UART4_InitPins(TM_USART_PinsPack_t pinspack) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af02      	add	r7, sp, #8
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOA)
	if (pinspack == TM_USART_PinsPack_1) {
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d109      	bne.n	8001334 <TM_UART4_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOA, GPIO_Pin_0 | GPIO_Pin_1, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_High, GPIO_AF_UART4);
 8001320:	2308      	movs	r3, #8
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	2303      	movs	r3, #3
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2301      	movs	r3, #1
 800132a:	2200      	movs	r2, #0
 800132c:	2103      	movs	r1, #3
 800132e:	480e      	ldr	r0, [pc, #56]	; (8001368 <TM_UART4_InitPins+0x58>)
 8001330:	f7ff fd05 	bl	8000d3e <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOC)
	if (pinspack == TM_USART_PinsPack_2) {
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d10a      	bne.n	8001350 <TM_UART4_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOC, GPIO_Pin_10 | GPIO_Pin_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_High, GPIO_AF_UART4);
 800133a:	2308      	movs	r3, #8
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	2303      	movs	r3, #3
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2301      	movs	r3, #1
 8001344:	2200      	movs	r2, #0
 8001346:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800134a:	4808      	ldr	r0, [pc, #32]	; (800136c <TM_UART4_InitPins+0x5c>)
 800134c:	f7ff fcf7 	bl	8000d3e <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_USART_PinsPack_Custom) {
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	2b03      	cmp	r3, #3
 8001354:	d103      	bne.n	800135e <TM_UART4_InitPins+0x4e>
		/* Init custom pins, callback used */
		TM_USART_InitCustomPinsCallback(UART4, GPIO_AF_UART4);
 8001356:	2108      	movs	r1, #8
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <TM_UART4_InitPins+0x60>)
 800135a:	f7ff fea5 	bl	80010a8 <TM_USART_InitCustomPinsCallback>
	}
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40020000 	.word	0x40020000
 800136c:	40020800 	.word	0x40020800
 8001370:	40004c00 	.word	0x40004c00

08001374 <TM_UART5_InitPins>:
#endif

#ifdef USE_UART5
void TM_UART5_InitPins(TM_USART_PinsPack_t pinspack) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af02      	add	r7, sp, #8
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOC) && defined(GPIOD)
	if (pinspack == TM_USART_PinsPack_1) {
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d114      	bne.n	80013ae <TM_UART5_InitPins+0x3a>
		TM_GPIO_InitAlternate(GPIOC, GPIO_Pin_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_High, GPIO_AF_UART5);
 8001384:	2308      	movs	r3, #8
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	2303      	movs	r3, #3
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	2200      	movs	r2, #0
 8001390:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001394:	480b      	ldr	r0, [pc, #44]	; (80013c4 <TM_UART5_InitPins+0x50>)
 8001396:	f7ff fcd2 	bl	8000d3e <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOD, GPIO_Pin_2, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_High, GPIO_AF_UART5);
 800139a:	2308      	movs	r3, #8
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	2303      	movs	r3, #3
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2301      	movs	r3, #1
 80013a4:	2200      	movs	r2, #0
 80013a6:	2104      	movs	r1, #4
 80013a8:	4807      	ldr	r0, [pc, #28]	; (80013c8 <TM_UART5_InitPins+0x54>)
 80013aa:	f7ff fcc8 	bl	8000d3e <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_USART_PinsPack_Custom) {
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d103      	bne.n	80013bc <TM_UART5_InitPins+0x48>
		/* Init custom pins, callback used */
		TM_USART_InitCustomPinsCallback(UART5, GPIO_AF_UART5);
 80013b4:	2108      	movs	r1, #8
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <TM_UART5_InitPins+0x58>)
 80013b8:	f7ff fe76 	bl	80010a8 <TM_USART_InitCustomPinsCallback>
	}
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40020800 	.word	0x40020800
 80013c8:	40020c00 	.word	0x40020c00
 80013cc:	40005000 	.word	0x40005000

080013d0 <TM_USART6_InitPins>:
#endif

#ifdef USE_USART6
void TM_USART6_InitPins(TM_USART_PinsPack_t pinspack) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOC)
	if (pinspack == TM_USART_PinsPack_1) {
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d109      	bne.n	80013f4 <TM_USART6_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOC, GPIO_Pin_6 | GPIO_Pin_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_High, GPIO_AF_USART6);
 80013e0:	2308      	movs	r3, #8
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	2303      	movs	r3, #3
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2301      	movs	r3, #1
 80013ea:	2200      	movs	r2, #0
 80013ec:	21c0      	movs	r1, #192	; 0xc0
 80013ee:	480e      	ldr	r0, [pc, #56]	; (8001428 <TM_USART6_InitPins+0x58>)
 80013f0:	f7ff fca5 	bl	8000d3e <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOG)
	if (pinspack == TM_USART_PinsPack_2) {
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d10a      	bne.n	8001410 <TM_USART6_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOG, GPIO_Pin_14 | GPIO_Pin_9, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_High, GPIO_AF_USART6);
 80013fa:	2308      	movs	r3, #8
 80013fc:	9301      	str	r3, [sp, #4]
 80013fe:	2303      	movs	r3, #3
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	2301      	movs	r3, #1
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 800140a:	4808      	ldr	r0, [pc, #32]	; (800142c <TM_USART6_InitPins+0x5c>)
 800140c:	f7ff fc97 	bl	8000d3e <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_USART_PinsPack_Custom) {
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d103      	bne.n	800141e <TM_USART6_InitPins+0x4e>
		/* Init custom pins, callback used */
		TM_USART_InitCustomPinsCallback(USART6, GPIO_AF_USART6);
 8001416:	2108      	movs	r1, #8
 8001418:	4805      	ldr	r0, [pc, #20]	; (8001430 <TM_USART6_InitPins+0x60>)
 800141a:	f7ff fe45 	bl	80010a8 <TM_USART_InitCustomPinsCallback>
	}
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40020800 	.word	0x40020800
 800142c:	40021800 	.word	0x40021800
 8001430:	40011400 	.word	0x40011400

08001434 <USART1_IRQHandler>:
	}
}
#endif

#ifdef USE_USART1
void USART1_IRQHandler(void) {
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	/* Check if interrupt was because data is received */
	if (USART1->SR & USART_SR_RXNE) {
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <USART1_IRQHandler+0x28>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	b29b      	uxth	r3, r3
 800143e:	f003 0320 	and.w	r3, r3, #32
 8001442:	2b00      	cmp	r3, #0
 8001444:	d007      	beq.n	8001456 <USART1_IRQHandler+0x22>
		#ifdef TM_USART1_USE_CUSTOM_IRQ
			/* Call user function */
			TM_USART1_ReceiveHandler(USART1->DR);
		#else
			/* Put received data into internal buffer */
			TM_USART_INT_InsertToBuffer(&TM_USART1, USART1->DR);
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <USART1_IRQHandler+0x28>)
 8001448:	889b      	ldrh	r3, [r3, #4]
 800144a:	b29b      	uxth	r3, r3
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4619      	mov	r1, r3
 8001450:	4803      	ldr	r0, [pc, #12]	; (8001460 <USART1_IRQHandler+0x2c>)
 8001452:	f7ff fdfb 	bl	800104c <TM_USART_INT_InsertToBuffer>
		#endif
	}
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40011000 	.word	0x40011000
 8001460:	20000010 	.word	0x20000010

08001464 <USART2_IRQHandler>:
#endif

#ifdef USE_USART2
void USART2_IRQHandler(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	/* Check if interrupt was because data is received */
	if (USART2->SR & USART_SR_RXNE) {
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <USART2_IRQHandler+0x28>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	b29b      	uxth	r3, r3
 800146e:	f003 0320 	and.w	r3, r3, #32
 8001472:	2b00      	cmp	r3, #0
 8001474:	d007      	beq.n	8001486 <USART2_IRQHandler+0x22>
		#ifdef TM_USART2_USE_CUSTOM_IRQ
			/* Call user function */
			TM_USART2_ReceiveHandler(USART2->DR);
		#else 
			/* Put received data into internal buffer */
			TM_USART_INT_InsertToBuffer(&TM_USART2, USART2->DR);
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <USART2_IRQHandler+0x28>)
 8001478:	889b      	ldrh	r3, [r3, #4]
 800147a:	b29b      	uxth	r3, r3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	4619      	mov	r1, r3
 8001480:	4803      	ldr	r0, [pc, #12]	; (8001490 <USART2_IRQHandler+0x2c>)
 8001482:	f7ff fde3 	bl	800104c <TM_USART_INT_InsertToBuffer>
		#endif
	}
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40004400 	.word	0x40004400
 8001490:	20000020 	.word	0x20000020

08001494 <USART3_IRQHandler>:
#endif

#ifdef USE_USART3
void USART3_IRQHandler(void) {
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	/* Check if interrupt was because data is received */
	if (USART3->SR & USART_SR_RXNE) {
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <USART3_IRQHandler+0x28>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	b29b      	uxth	r3, r3
 800149e:	f003 0320 	and.w	r3, r3, #32
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d007      	beq.n	80014b6 <USART3_IRQHandler+0x22>
		#ifdef TM_USART3_USE_CUSTOM_IRQ
			/* Call user function */
			TM_USART3_ReceiveHandler(USART3->DR);
		#else
			/* Put received data into internal buffer */
			TM_USART_INT_InsertToBuffer(&TM_USART3, USART3->DR);
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <USART3_IRQHandler+0x28>)
 80014a8:	889b      	ldrh	r3, [r3, #4]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	4619      	mov	r1, r3
 80014b0:	4803      	ldr	r0, [pc, #12]	; (80014c0 <USART3_IRQHandler+0x2c>)
 80014b2:	f7ff fdcb 	bl	800104c <TM_USART_INT_InsertToBuffer>
		#endif
	}
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40004800 	.word	0x40004800
 80014c0:	20000030 	.word	0x20000030

080014c4 <UART4_IRQHandler>:
#endif

#ifdef USE_UART4
void UART4_IRQHandler(void) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	/* Check if interrupt was because data is received */
	if (UART4->SR & USART_SR_RXNE) {
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <UART4_IRQHandler+0x28>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	f003 0320 	and.w	r3, r3, #32
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d007      	beq.n	80014e6 <UART4_IRQHandler+0x22>
		#ifdef TM_UART4_USE_CUSTOM_IRQ
			/* Call user function */
			TM_UART4_ReceiveHandler(UART4->DR);
		#else
			/* Put received data into internal buffer */
			TM_USART_INT_InsertToBuffer(&TM_UART4, UART4->DR);
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <UART4_IRQHandler+0x28>)
 80014d8:	889b      	ldrh	r3, [r3, #4]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	4619      	mov	r1, r3
 80014e0:	4803      	ldr	r0, [pc, #12]	; (80014f0 <UART4_IRQHandler+0x2c>)
 80014e2:	f7ff fdb3 	bl	800104c <TM_USART_INT_InsertToBuffer>
		#endif
	}
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40004c00 	.word	0x40004c00
 80014f0:	20000040 	.word	0x20000040

080014f4 <UART5_IRQHandler>:
#endif

#ifdef USE_UART5
void UART5_IRQHandler(void) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	/* Check if interrupt was because data is received */
	if (UART5->SR & USART_SR_RXNE) {
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <UART5_IRQHandler+0x28>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	f003 0320 	and.w	r3, r3, #32
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <UART5_IRQHandler+0x22>
		#ifdef TM_UART5_USE_CUSTOM_IRQ
			/* Call user function */
			TM_UART5_ReceiveHandler(UART5->DR);
		#else
			/* Put received data into internal buffer */
			TM_USART_INT_InsertToBuffer(&TM_UART5, UART5->DR);
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <UART5_IRQHandler+0x28>)
 8001508:	889b      	ldrh	r3, [r3, #4]
 800150a:	b29b      	uxth	r3, r3
 800150c:	b2db      	uxtb	r3, r3
 800150e:	4619      	mov	r1, r3
 8001510:	4803      	ldr	r0, [pc, #12]	; (8001520 <UART5_IRQHandler+0x2c>)
 8001512:	f7ff fd9b 	bl	800104c <TM_USART_INT_InsertToBuffer>
		#endif
	}
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40005000 	.word	0x40005000
 8001520:	20000050 	.word	0x20000050

08001524 <USART6_IRQHandler>:
#endif

#ifdef USE_USART6
void USART6_IRQHandler(void) {
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	/* Check if interrupt was because data is received */
	if (USART6->SR & USART_SR_RXNE) {
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <USART6_IRQHandler+0x28>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	b29b      	uxth	r3, r3
 800152e:	f003 0320 	and.w	r3, r3, #32
 8001532:	2b00      	cmp	r3, #0
 8001534:	d007      	beq.n	8001546 <USART6_IRQHandler+0x22>
		#ifdef TM_USART6_USE_CUSTOM_IRQ
			/* Call user function */
			TM_USART6_ReceiveHandler(USART6->DR);
		#else
			/* Put received data into internal buffer */
			TM_USART_INT_InsertToBuffer(&TM_USART6, USART6->DR);
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <USART6_IRQHandler+0x28>)
 8001538:	889b      	ldrh	r3, [r3, #4]
 800153a:	b29b      	uxth	r3, r3
 800153c:	b2db      	uxtb	r3, r3
 800153e:	4619      	mov	r1, r3
 8001540:	4803      	ldr	r0, [pc, #12]	; (8001550 <USART6_IRQHandler+0x2c>)
 8001542:	f7ff fd83 	bl	800104c <TM_USART_INT_InsertToBuffer>
		#endif
	}
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40011400 	.word	0x40011400
 8001550:	20000060 	.word	0x20000060

08001554 <TM_USART_INT_Init>:
	TM_USART_HardwareFlowControl_t FlowControl,
	uint32_t Mode,
	uint32_t Parity,
	uint32_t StopBits,
	uint32_t WordLength
) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b08c      	sub	sp, #48	; 0x30
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	461a      	mov	r2, r3
 8001560:	460b      	mov	r3, r1
 8001562:	72fb      	strb	r3, [r7, #11]
 8001564:	4613      	mov	r3, r2
 8001566:	813b      	strh	r3, [r7, #8]
	USART_InitTypeDef USART_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct;
	TM_USART_t* u = TM_USART_INT_GetUsart(USARTx);
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff fda9 	bl	80010c0 <TM_USART_INT_GetUsart>
 800156e:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Set USART baudrate */
	USART_InitStruct.USART_BaudRate = baudrate;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	61fb      	str	r3, [r7, #28]
	/*
	 * Initialize USARTx pins
	 * Set channel for USARTx NVIC
	 */
#ifdef USE_USART1
	if (USARTx == USART1) {
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4a53      	ldr	r2, [pc, #332]	; (80016c4 <TM_USART_INT_Init+0x170>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d10b      	bne.n	8001594 <TM_USART_INT_Init+0x40>
		/* Enable USART clock */
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800157c:	4a52      	ldr	r2, [pc, #328]	; (80016c8 <TM_USART_INT_Init+0x174>)
 800157e:	4b52      	ldr	r3, [pc, #328]	; (80016c8 <TM_USART_INT_Init+0x174>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f043 0310 	orr.w	r3, r3, #16
 8001586:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_USART1_InitPins(pinspack);
 8001588:	7afb      	ldrb	r3, [r7, #11]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fe1c 	bl	80011c8 <TM_USART1_InitPins>
		
		/* Set IRQ channel */
		NVIC_InitStruct.NVIC_IRQChannel = USART1_IRQn;
 8001590:	2325      	movs	r3, #37	; 0x25
 8001592:	763b      	strb	r3, [r7, #24]
	}
#endif
#ifdef USE_USART2
	if (USARTx == USART2) {
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4a4d      	ldr	r2, [pc, #308]	; (80016cc <TM_USART_INT_Init+0x178>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d10b      	bne.n	80015b4 <TM_USART_INT_Init+0x60>
		/* Enable USART clock */
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800159c:	4a4a      	ldr	r2, [pc, #296]	; (80016c8 <TM_USART_INT_Init+0x174>)
 800159e:	4b4a      	ldr	r3, [pc, #296]	; (80016c8 <TM_USART_INT_Init+0x174>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a6:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_USART2_InitPins(pinspack);
 80015a8:	7afb      	ldrb	r3, [r7, #11]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fe3e 	bl	800122c <TM_USART2_InitPins>
		
		/* Set IRQ channel */
		NVIC_InitStruct.NVIC_IRQChannel = USART2_IRQn;
 80015b0:	2326      	movs	r3, #38	; 0x26
 80015b2:	763b      	strb	r3, [r7, #24]
	}
#endif
#ifdef USE_USART3
	if (USARTx == USART3) {
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4a46      	ldr	r2, [pc, #280]	; (80016d0 <TM_USART_INT_Init+0x17c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d10b      	bne.n	80015d4 <TM_USART_INT_Init+0x80>
		/* Enable USART clock */
		RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 80015bc:	4a42      	ldr	r2, [pc, #264]	; (80016c8 <TM_USART_INT_Init+0x174>)
 80015be:	4b42      	ldr	r3, [pc, #264]	; (80016c8 <TM_USART_INT_Init+0x174>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c6:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_USART3_InitPins(pinspack);
 80015c8:	7afb      	ldrb	r3, [r7, #11]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fe5e 	bl	800128c <TM_USART3_InitPins>
		
		/* Set IRQ channel */
		NVIC_InitStruct.NVIC_IRQChannel = USART3_IRQn;
 80015d0:	2327      	movs	r3, #39	; 0x27
 80015d2:	763b      	strb	r3, [r7, #24]
	}
#endif
#ifdef USE_UART4
	if (USARTx == UART4) {
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4a3f      	ldr	r2, [pc, #252]	; (80016d4 <TM_USART_INT_Init+0x180>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d10b      	bne.n	80015f4 <TM_USART_INT_Init+0xa0>
		/* Enable UART clock */
		RCC->APB1ENR |= RCC_APB1ENR_UART4EN;
 80015dc:	4a3a      	ldr	r2, [pc, #232]	; (80016c8 <TM_USART_INT_Init+0x174>)
 80015de:	4b3a      	ldr	r3, [pc, #232]	; (80016c8 <TM_USART_INT_Init+0x174>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015e6:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_UART4_InitPins(pinspack);
 80015e8:	7afb      	ldrb	r3, [r7, #11]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fe90 	bl	8001310 <TM_UART4_InitPins>
		
		/* Set IRQ channel */
		NVIC_InitStruct.NVIC_IRQChannel = UART4_IRQn;
 80015f0:	2334      	movs	r3, #52	; 0x34
 80015f2:	763b      	strb	r3, [r7, #24]
	}
#endif
#ifdef USE_UART5
	if (USARTx == UART5) {
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4a38      	ldr	r2, [pc, #224]	; (80016d8 <TM_USART_INT_Init+0x184>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d10b      	bne.n	8001614 <TM_USART_INT_Init+0xc0>
		/* Enable UART clock */
		RCC->APB1ENR |= RCC_APB1ENR_UART5EN;
 80015fc:	4a32      	ldr	r2, [pc, #200]	; (80016c8 <TM_USART_INT_Init+0x174>)
 80015fe:	4b32      	ldr	r3, [pc, #200]	; (80016c8 <TM_USART_INT_Init+0x174>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001606:	6413      	str	r3, [r2, #64]	; 0x40

		/* Init pins */
		TM_UART5_InitPins(pinspack);
 8001608:	7afb      	ldrb	r3, [r7, #11]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff feb2 	bl	8001374 <TM_UART5_InitPins>
		
		/* Set IRQ channel */
		NVIC_InitStruct.NVIC_IRQChannel = UART5_IRQn;
 8001610:	2335      	movs	r3, #53	; 0x35
 8001612:	763b      	strb	r3, [r7, #24]
	}
#endif
#ifdef USE_USART6
	if (USARTx == USART6) {
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4a31      	ldr	r2, [pc, #196]	; (80016dc <TM_USART_INT_Init+0x188>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d10b      	bne.n	8001634 <TM_USART_INT_Init+0xe0>
		/* Enable UART clock */
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 800161c:	4a2a      	ldr	r2, [pc, #168]	; (80016c8 <TM_USART_INT_Init+0x174>)
 800161e:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <TM_USART_INT_Init+0x174>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	f043 0320 	orr.w	r3, r3, #32
 8001626:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_USART6_InitPins(pinspack);
 8001628:	7afb      	ldrb	r3, [r7, #11]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fed0 	bl	80013d0 <TM_USART6_InitPins>
		
		/* Set IRQ channel */
		NVIC_InitStruct.NVIC_IRQChannel = USART6_IRQn;
 8001630:	2347      	movs	r3, #71	; 0x47
 8001632:	763b      	strb	r3, [r7, #24]
		NVIC_InitStruct.NVIC_IRQChannel = UART8_IRQn;
	}
#endif
	
	/* Deinit USART, force reset */
	USART_DeInit(USARTx);
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f7ff f915 	bl	8000864 <USART_DeInit>
	
	/* Fill NVIC settings */
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 800163a:	2301      	movs	r3, #1
 800163c:	76fb      	strb	r3, [r7, #27]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = USART_NVIC_PRIORITY;
 800163e:	2306      	movs	r3, #6
 8001640:	767b      	strb	r3, [r7, #25]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = TM_USART_INT_GetSubPriority(USARTx);
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f7ff fd84 	bl	8001150 <TM_USART_INT_GetSubPriority>
 8001648:	4603      	mov	r3, r0
 800164a:	76bb      	strb	r3, [r7, #26]
	NVIC_Init(&NVIC_InitStruct);
 800164c:	f107 0318 	add.w	r3, r7, #24
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe fe67 	bl	8000324 <NVIC_Init>
	
	/* Fill default settings */
	USART_InitStruct.USART_HardwareFlowControl = FlowControl;
 8001656:	893b      	ldrh	r3, [r7, #8]
 8001658:	853b      	strh	r3, [r7, #40]	; 0x28
	USART_InitStruct.USART_Mode = Mode;
 800165a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800165c:	b29b      	uxth	r3, r3
 800165e:	84fb      	strh	r3, [r7, #38]	; 0x26
	USART_InitStruct.USART_Parity = Parity;
 8001660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001662:	b29b      	uxth	r3, r3
 8001664:	84bb      	strh	r3, [r7, #36]	; 0x24
	USART_InitStruct.USART_StopBits = StopBits;
 8001666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001668:	b29b      	uxth	r3, r3
 800166a:	847b      	strh	r3, [r7, #34]	; 0x22
	USART_InitStruct.USART_WordLength = WordLength;
 800166c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800166e:	b29b      	uxth	r3, r3
 8001670:	843b      	strh	r3, [r7, #32]
	
	/* We are not initialized */
	u->Initialized = 0;
 8001672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001674:	2200      	movs	r2, #0
 8001676:	731a      	strb	r2, [r3, #12]
	
	do {
		volatile uint32_t x = 0xFFF;
 8001678:	f640 73ff 	movw	r3, #4095	; 0xfff
 800167c:	617b      	str	r3, [r7, #20]
		while (x--);
 800167e:	bf00      	nop
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	1e5a      	subs	r2, r3, #1
 8001684:	617a      	str	r2, [r7, #20]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1fa      	bne.n	8001680 <TM_USART_INT_Init+0x12c>
	} while (0);
	
	/* Init */
	USART_Init(USARTx, &USART_InitStruct);
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	4619      	mov	r1, r3
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f7ff f973 	bl	800097c <USART_Init>
	
	/* Enable RX interrupt */
	USARTx->CR1 |= USART_CR1_RXNEIE;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	899b      	ldrh	r3, [r3, #12]
 800169a:	b29b      	uxth	r3, r3
 800169c:	f043 0320 	orr.w	r3, r3, #32
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	819a      	strh	r2, [r3, #12]
	
	/* We are initialized now */
	u->Initialized = 1;
 80016a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a8:	2201      	movs	r2, #1
 80016aa:	731a      	strb	r2, [r3, #12]
	
	/* Enable USART peripheral */
	USARTx->CR1 |= USART_CR1_UE;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	899b      	ldrh	r3, [r3, #12]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	819a      	strh	r2, [r3, #12]
}
 80016bc:	bf00      	nop
 80016be:	3730      	adds	r7, #48	; 0x30
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40011000 	.word	0x40011000
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40004400 	.word	0x40004400
 80016d0:	40004800 	.word	0x40004800
 80016d4:	40004c00 	.word	0x40004c00
 80016d8:	40005000 	.word	0x40005000
 80016dc:	40011400 	.word	0x40011400

080016e0 <TM_USB_HIDHOST_Init>:
extern TM_USB_HIDHOST_Result_t 			TM_USB_HIDHOST_INT_Result;
extern TM_USB_HIDHOST_Keyboard_t 		TM_USB_HIDHOST_INT_Keyboard;
extern TM_USB_HIDHOST_Mouse_t 			TM_USB_HIDHOST_INT_Mouse;
uint8_t TM_USB_HIDHOST_Initialized = 	0;

void TM_USB_HIDHOST_Init(void) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af02      	add	r7, sp, #8
	/* Init Host Library */
	USBH_Init(&USB_OTG_Core, 
 80016e6:	4b07      	ldr	r3, [pc, #28]	; (8001704 <TM_USB_HIDHOST_Init+0x24>)
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	4b07      	ldr	r3, [pc, #28]	; (8001708 <TM_USB_HIDHOST_Init+0x28>)
 80016ec:	4a07      	ldr	r2, [pc, #28]	; (800170c <TM_USB_HIDHOST_Init+0x2c>)
 80016ee:	2101      	movs	r1, #1
 80016f0:	4807      	ldr	r0, [pc, #28]	; (8001710 <TM_USB_HIDHOST_Init+0x30>)
 80016f2:	f002 fbae 	bl	8003e52 <USBH_Init>
#endif
            &USB_Host,
            &HID_cb, 
            &USR_Callbacks);
	/* We are initialized */
	TM_USB_HIDHOST_Initialized = 1;
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <TM_USB_HIDHOST_Init+0x34>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200000a0 	.word	0x200000a0
 8001708:	20000080 	.word	0x20000080
 800170c:	200007e4 	.word	0x200007e4
 8001710:	20000238 	.word	0x20000238
 8001714:	20000146 	.word	0x20000146

08001718 <TM_USB_HIDHOST_Process>:

TM_USB_HIDHOST_Result_t TM_USB_HIDHOST_Process(void) {
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	/* Not initialized */
	if (!TM_USB_HIDHOST_Initialized) {
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <TM_USB_HIDHOST_Process+0x24>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <TM_USB_HIDHOST_Process+0x10>
		return TM_USB_HIDHOST_Result_LibraryNotInitialized;
 8001724:	2305      	movs	r3, #5
 8001726:	e006      	b.n	8001736 <TM_USB_HIDHOST_Process+0x1e>
	}
	
	/* Host Task handler */
	USBH_Process(&USB_OTG_Core, &USB_Host);
 8001728:	4905      	ldr	r1, [pc, #20]	; (8001740 <TM_USB_HIDHOST_Process+0x28>)
 800172a:	4806      	ldr	r0, [pc, #24]	; (8001744 <TM_USB_HIDHOST_Process+0x2c>)
 800172c:	f002 fbec 	bl	8003f08 <USBH_Process>
	
	/* Return device status */
	return TM_USB_HIDHOST_Device();
 8001730:	f000 f80a 	bl	8001748 <TM_USB_HIDHOST_Device>
 8001734:	4603      	mov	r3, r0
}
 8001736:	4618      	mov	r0, r3
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000146 	.word	0x20000146
 8001740:	200007e4 	.word	0x200007e4
 8001744:	20000238 	.word	0x20000238

08001748 <TM_USB_HIDHOST_Device>:

TM_USB_HIDHOST_Result_t TM_USB_HIDHOST_Device(void) {
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
	/* Not initialized */
	if (!TM_USB_HIDHOST_Initialized) {
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <TM_USB_HIDHOST_Device+0x20>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <TM_USB_HIDHOST_Device+0x10>
		return TM_USB_HIDHOST_Result_LibraryNotInitialized;
 8001754:	2305      	movs	r3, #5
 8001756:	e001      	b.n	800175c <TM_USB_HIDHOST_Device+0x14>
	}
	return TM_USB_HIDHOST_INT_Result;
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <TM_USB_HIDHOST_Device+0x24>)
 800175a:	781b      	ldrb	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000146 	.word	0x20000146
 800176c:	20000b1c 	.word	0x20000b1c

08001770 <TM_USB_HIDHOST_ReadMouse>:
	
	/* Return keyboard connected */
	return TM_USB_HIDHOST_Result_KeyboardConnected;
}

TM_USB_HIDHOST_Result_t TM_USB_HIDHOST_ReadMouse(TM_USB_HIDHOST_Mouse_t* Mouse) {
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	if (TM_USB_HIDHOST_INT_Result != TM_USB_HIDHOST_Result_MouseConnected) {
 8001778:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <TM_USB_HIDHOST_ReadMouse+0x70>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d001      	beq.n	8001784 <TM_USB_HIDHOST_ReadMouse+0x14>
		/* Mouse is not connected */
		return TM_USB_HIDHOST_Result_Error;
 8001780:	2300      	movs	r3, #0
 8001782:	e026      	b.n	80017d2 <TM_USB_HIDHOST_ReadMouse+0x62>
	}

	/* Fill data */
	Mouse->AbsoluteX =    TM_USB_HIDHOST_INT_Mouse.AbsoluteX;
 8001784:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <TM_USB_HIDHOST_ReadMouse+0x74>)
 8001786:	f9b3 2000 	ldrsh.w	r2, [r3]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	801a      	strh	r2, [r3, #0]
	Mouse->AbsoluteY =    TM_USB_HIDHOST_INT_Mouse.AbsoluteY;
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <TM_USB_HIDHOST_ReadMouse+0x74>)
 8001790:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	805a      	strh	r2, [r3, #2]
	Mouse->DiffX =        TM_USB_HIDHOST_INT_Mouse.DiffX;
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <TM_USB_HIDHOST_ReadMouse+0x74>)
 800179a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	809a      	strh	r2, [r3, #4]
	Mouse->DiffY =        TM_USB_HIDHOST_INT_Mouse.DiffY;
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <TM_USB_HIDHOST_ReadMouse+0x74>)
 80017a4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	80da      	strh	r2, [r3, #6]
	Mouse->LeftButton =   TM_USB_HIDHOST_INT_Mouse.LeftButton;
 80017ac:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <TM_USB_HIDHOST_ReadMouse+0x74>)
 80017ae:	7a1a      	ldrb	r2, [r3, #8]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	721a      	strb	r2, [r3, #8]
	Mouse->MiddleButton = TM_USB_HIDHOST_INT_Mouse.MiddleButton;
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <TM_USB_HIDHOST_ReadMouse+0x74>)
 80017b6:	7a9a      	ldrb	r2, [r3, #10]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	729a      	strb	r2, [r3, #10]
	Mouse->RightButton =  TM_USB_HIDHOST_INT_Mouse.RightButton;
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <TM_USB_HIDHOST_ReadMouse+0x74>)
 80017be:	7a5a      	ldrb	r2, [r3, #9]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	725a      	strb	r2, [r3, #9]
	
	/* Reset internal data */
	/* Difference from last call is 0 */
	TM_USB_HIDHOST_INT_Mouse.DiffX = 0;
 80017c4:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <TM_USB_HIDHOST_ReadMouse+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	809a      	strh	r2, [r3, #4]
	TM_USB_HIDHOST_INT_Mouse.DiffY = 0;
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <TM_USB_HIDHOST_ReadMouse+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	80da      	strh	r2, [r3, #6]
	TM_USB_HIDHOST_INT_Mouse.MiddleButton = TM_USB_HIDHOST_Button_Released;
	TM_USB_HIDHOST_INT_Mouse.RightButton = TM_USB_HIDHOST_Button_Released;
#endif
	
	/* Return mouse connected */
	return TM_USB_HIDHOST_Result_MouseConnected;
 80017d0:	2302      	movs	r3, #2
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000b1c 	.word	0x20000b1c
 80017e4:	20000b24 	.word	0x20000b24

080017e8 <USB_OTG_BSP_Init>:
  *         Initilizes BSP configurations
  * @param  None
  * @retval None
  */

void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	/* Note: On STM32F4-Discovery board only USB OTG FS core is supported. */

	GPIO_InitTypeDef GPIO_InitStructure;
#ifdef USE_USB_OTG_FS

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80017f0:	2101      	movs	r1, #1
 80017f2:	2001      	movs	r0, #1
 80017f4:	f7fe ff96 	bl	8000724 <RCC_AHB1PeriphClockCmd>

	/* Configure SOF VBUS ID DM DP Pins */
	GPIO_InitStructure.GPIO_Pin = 	GPIO_Pin_11 | 	// Data -
 80017f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017fc:	60bb      	str	r3, [r7, #8]
									GPIO_Pin_12;	// Data +

	#ifndef USB_HID_HOST_DISABLE_VBUS
	GPIO_InitStructure.GPIO_Pin |= GPIO_Pin_9;		// VBUS
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001804:	60bb      	str	r3, [r7, #8]
	#endif
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001806:	2303      	movs	r3, #3
 8001808:	737b      	strb	r3, [r7, #13]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800180a:	2302      	movs	r3, #2
 800180c:	733b      	strb	r3, [r7, #12]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800180e:	2300      	movs	r3, #0
 8001810:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8001812:	2300      	movs	r3, #0
 8001814:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001816:	f107 0308 	add.w	r3, r7, #8
 800181a:	4619      	mov	r1, r3
 800181c:	480f      	ldr	r0, [pc, #60]	; (800185c <USB_OTG_BSP_Init+0x74>)
 800181e:	f7fe fde3 	bl	80003e8 <GPIO_Init>

	#ifndef USB_HID_HOST_DISABLE_VBUS
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9, GPIO_AF_OTG1_FS);
 8001822:	220a      	movs	r2, #10
 8001824:	2109      	movs	r1, #9
 8001826:	480d      	ldr	r0, [pc, #52]	; (800185c <USB_OTG_BSP_Init+0x74>)
 8001828:	f7fe fe8a 	bl	8000540 <GPIO_PinAFConfig>
	#endif
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource11, GPIO_AF_OTG1_FS);
 800182c:	220a      	movs	r2, #10
 800182e:	210b      	movs	r1, #11
 8001830:	480a      	ldr	r0, [pc, #40]	; (800185c <USB_OTG_BSP_Init+0x74>)
 8001832:	f7fe fe85 	bl	8000540 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource12, GPIO_AF_OTG1_FS);
 8001836:	220a      	movs	r2, #10
 8001838:	210c      	movs	r1, #12
 800183a:	4808      	ldr	r0, [pc, #32]	; (800185c <USB_OTG_BSP_Init+0x74>)
 800183c:	f7fe fe80 	bl	8000540 <GPIO_PinAFConfig>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10, GPIO_AF_OTG1_FS) ;
	#endif

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001840:	2101      	movs	r1, #1
 8001842:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001846:	f7fe ffad 	bl	80007a4 <RCC_APB2PeriphClockCmd>
	RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_OTG_FS, ENABLE) ;
 800184a:	2101      	movs	r1, #1
 800184c:	2080      	movs	r0, #128	; 0x80
 800184e:	f7fe ff89 	bl	8000764 <RCC_AHB2PeriphClockCmd>
	#endif

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_OTG_HS, ENABLE);  

#endif //USB_OTG_HS
}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40020000 	.word	0x40020000

08001860 <USB_OTG_BSP_EnableInterrupt>:
  *         Configures USB Global interrupt
  * @param  None
  * @retval None
  */
void USB_OTG_BSP_EnableInterrupt(USB_OTG_CORE_HANDLE *pdev)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  NVIC_InitTypeDef NVIC_InitStructure; 
  
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8001868:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800186c:	f7fe fd46 	bl	80002fc <NVIC_PriorityGroupConfig>
#ifdef USE_USB_OTG_HS   
  NVIC_InitStructure.NVIC_IRQChannel = OTG_HS_IRQn;
#else
  NVIC_InitStructure.NVIC_IRQChannel = OTG_FS_IRQn;  
 8001870:	2343      	movs	r3, #67	; 0x43
 8001872:	733b      	strb	r3, [r7, #12]
#endif
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = USB_HID_HOST_NVIC_PRIORITY;
 8001874:	2301      	movs	r3, #1
 8001876:	737b      	strb	r3, [r7, #13]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = USB_HID_HOST_NVIC_SUBPRIORITY;
 8001878:	2303      	movs	r3, #3
 800187a:	73bb      	strb	r3, [r7, #14]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
  NVIC_Init(&NVIC_InitStructure);
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fd4d 	bl	8000324 <NVIC_Init>
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <USB_OTG_BSP_DriveVBUS>:
  *         Drives the Vbus signal through IO
  * @param  state : VBUS states
  * @retval None
  */

void USB_OTG_BSP_DriveVBUS(USB_OTG_CORE_HANDLE *pdev, uint8_t state) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	70fb      	strb	r3, [r7, #3]
#ifndef USB_HID_HOST_DISABLE_VBUS
	if (0 == state) { 
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d104      	bne.n	80018b0 <USB_OTG_BSP_DriveVBUS+0x1c>
		/* DISABLE is needed on output of the Power Switch */
		GPIO_SetBits(HOST_POWERSW_PORT, HOST_POWERSW_VBUS);
 80018a6:	2101      	movs	r1, #1
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <USB_OTG_BSP_DriveVBUS+0x2c>)
 80018aa:	f7fe fe2b 	bl	8000504 <GPIO_SetBits>
	} else {
		/* ENABLE the Power Switch by driving the Enable LOW */
		GPIO_ResetBits(HOST_POWERSW_PORT, HOST_POWERSW_VBUS);
	}
#endif
}
 80018ae:	e003      	b.n	80018b8 <USB_OTG_BSP_DriveVBUS+0x24>
		GPIO_ResetBits(HOST_POWERSW_PORT, HOST_POWERSW_VBUS);
 80018b0:	2101      	movs	r1, #1
 80018b2:	4803      	ldr	r0, [pc, #12]	; (80018c0 <USB_OTG_BSP_DriveVBUS+0x2c>)
 80018b4:	f7fe fe35 	bl	8000522 <GPIO_ResetBits>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40020800 	.word	0x40020800

080018c4 <USB_OTG_BSP_ConfigVBUS>:
  *         Configures the IO for the Vbus and OverCurrent
  * @param  None
  * @retval None
  */

void  USB_OTG_BSP_ConfigVBUS(USB_OTG_CORE_HANDLE *pdev) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
#ifndef USB_HID_HOST_DISABLE_VBUS
	GPIO_InitTypeDef GPIO_InitStructure; 

	RCC_AHB1PeriphClockCmd(HOST_POWERSW_PORT_RCC, ENABLE);  
 80018cc:	2101      	movs	r1, #1
 80018ce:	2004      	movs	r0, #4
 80018d0:	f7fe ff28 	bl	8000724 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = HOST_POWERSW_VBUS;
 80018d4:	2301      	movs	r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80018d8:	2303      	movs	r3, #3
 80018da:	737b      	strb	r3, [r7, #13]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80018dc:	2301      	movs	r3, #1
 80018de:	733b      	strb	r3, [r7, #12]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80018e0:	2300      	movs	r3, #0
 80018e2:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(HOST_POWERSW_PORT,&GPIO_InitStructure);
 80018e8:	f107 0308 	add.w	r3, r7, #8
 80018ec:	4619      	mov	r1, r3
 80018ee:	4807      	ldr	r0, [pc, #28]	; (800190c <USB_OTG_BSP_ConfigVBUS+0x48>)
 80018f0:	f7fe fd7a 	bl	80003e8 <GPIO_Init>

	/* By Default, DISABLE is needed on output of the Power Switch */
	GPIO_SetBits(HOST_POWERSW_PORT, HOST_POWERSW_VBUS);
 80018f4:	2101      	movs	r1, #1
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <USB_OTG_BSP_ConfigVBUS+0x48>)
 80018f8:	f7fe fe04 	bl	8000504 <GPIO_SetBits>

	USB_OTG_BSP_mDelay(200);   /* Delay is need for stabilising the Vbus Low 
 80018fc:	20c8      	movs	r0, #200	; 0xc8
 80018fe:	f000 f82b 	bl	8001958 <USB_OTG_BSP_mDelay>
	in Reset Condition, when Vbus=1 and Reset-button is pressed by user */
#endif
}
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40020800 	.word	0x40020800

08001910 <USB_OTG_BSP_uDelay>:
  * @brief  USB_OTG_BSP_uDelay
  *         This function provides delay time in micro sec
  * @param  usec : Value of delay required in micro sec
  * @retval None
  */
void USB_OTG_BSP_uDelay (const uint32_t usec) {
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
  const uint32_t utime = (120 * usec / 7);
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	1a9b      	subs	r3, r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	461a      	mov	r2, r3
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <USB_OTG_BSP_uDelay+0x44>)
 800192a:	fba3 1302 	umull	r1, r3, r3, r2
 800192e:	1ad2      	subs	r2, r2, r3
 8001930:	0852      	lsrs	r2, r2, #1
 8001932:	4413      	add	r3, r2
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	60fb      	str	r3, [r7, #12]
  do
  {
    if ( ++count > utime )
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	3301      	adds	r3, #1
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4293      	cmp	r3, r2
 8001942:	d800      	bhi.n	8001946 <USB_OTG_BSP_uDelay+0x36>
 8001944:	e7f8      	b.n	8001938 <USB_OTG_BSP_uDelay+0x28>
    {
      return ;
 8001946:	bf00      	nop
    }
  }
  while (1);  
}
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	24924925 	.word	0x24924925

08001958 <USB_OTG_BSP_mDelay>:
  * @brief  USB_OTG_BSP_mDelay
  *          This function provides delay time in milli sec
  * @param  msec : Value of delay required in milli sec
  * @retval None
  */
void USB_OTG_BSP_mDelay (const uint32_t msec) { 
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
    USB_OTG_BSP_uDelay(msec * 1000);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001966:	fb02 f303 	mul.w	r3, r2, r3
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff ffd0 	bl	8001910 <USB_OTG_BSP_uDelay>
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <OTG_FS_IRQHandler>:


#ifdef USE_USB_OTG_FS
void OTG_FS_IRQHandler(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
#else
void OTG_HS_IRQHandler(void) {	
#endif
	USBH_OTG_ISR_Handler(&USB_OTG_Core);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <OTG_FS_IRQHandler+0x10>)
 800197e:	f001 f897 	bl	8002ab0 <USBH_OTG_ISR_Handler>
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000238 	.word	0x20000238

0800198c <USB_OTG_EnableCommonInt>:
*         Initializes the commmon interrupts, used in both device and modes
* @param  pdev : Selected device
* @retval None
*/
static void USB_OTG_EnableCommonInt(USB_OTG_CORE_HANDLE *pdev)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  
  int_mask.d32 = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	605a      	str	r2, [r3, #4]
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80019aa:	615a      	str	r2, [r3, #20]
  /* Enable the interrupts in the INTMSK */
  int_mask.b.wkupintr = 1;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b2:	73fb      	strb	r3, [r7, #15]
  int_mask.b.usbsuspend = 1; 
 80019b4:	7b7b      	ldrb	r3, [r7, #13]
 80019b6:	f043 0308 	orr.w	r3, r3, #8
 80019ba:	737b      	strb	r3, [r7, #13]
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
#endif
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	619a      	str	r2, [r3, #24]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <USB_OTG_CoreReset>:
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
 80019e4:	2003      	movs	r0, #3
 80019e6:	f7ff ff93 	bl	8001910 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3301      	adds	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	4a18      	ldr	r2, [pc, #96]	; (8001a5c <USB_OTG_CoreReset+0x8c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d901      	bls.n	8001a04 <USB_OTG_CoreReset+0x34>
    {
      return USB_OTG_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e026      	b.n	8001a52 <USB_OTG_CoreReset+0x82>
    }
  }
  while (greset.b.ahbidle == 0);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0e9      	beq.n	80019e4 <USB_OTG_CoreReset+0x14>
  /* Core Soft Reset */
  count = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  greset.b.csftrst = 1;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <USB_OTG_CoreReset+0x8c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d806      	bhi.n	8001a48 <USB_OTG_CoreReset+0x78>
    {
      break;
    }
  }
  while (greset.b.csftrst == 1);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d0ee      	beq.n	8001a24 <USB_OTG_CoreReset+0x54>
 8001a46:	e000      	b.n	8001a4a <USB_OTG_CoreReset+0x7a>
      break;
 8001a48:	bf00      	nop
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8001a4a:	2003      	movs	r0, #3
 8001a4c:	f7ff ff60 	bl	8001910 <USB_OTG_BSP_uDelay>
  return status;
 8001a50:	7cfb      	ldrb	r3, [r7, #19]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	00030d40 	.word	0x00030d40

08001a60 <USB_OTG_WritePacket>:
*/
USB_OTG_STS USB_OTG_WritePacket(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	; 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	460b      	mov	r3, r1
 8001a70:	71fb      	strb	r3, [r7, #7]
 8001a72:	4613      	mov	r3, r2
 8001a74:	80bb      	strh	r3, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	76fb      	strb	r3, [r7, #27]
  if (pdev->cfg.dma_enable == 0)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	78db      	ldrb	r3, [r3, #3]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d122      	bne.n	8001ac8 <USB_OTG_WritePacket+0x68>
  {
    uint32_t count32b= 0 , i= 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 8001a8a:	88bb      	ldrh	r3, [r7, #4]
 8001a8c:	3303      	adds	r3, #3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	da00      	bge.n	8001a94 <USB_OTG_WritePacket+0x34>
 8001a92:	3303      	adds	r3, #3
 8001a94:	109b      	asrs	r3, r3, #2
 8001a96:	617b      	str	r3, [r7, #20]
    fifo = pdev->regs.DFIFO[ch_ep_num];
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	3332      	adds	r3, #50	; 0x32
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src+=4)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	e009      	b.n	8001ac0 <USB_OTG_WritePacket+0x60>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	601a      	str	r2, [r3, #0]
    for (i = 0; i < count32b; i++, src+=4)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	3304      	adds	r3, #4
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d3f1      	bcc.n	8001aac <USB_OTG_WritePacket+0x4c>
    }
  }
  return status;
 8001ac8:	7efb      	ldrb	r3, [r7, #27]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3724      	adds	r7, #36	; 0x24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <USB_OTG_ReadPacket>:
* @retval None
*/
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b089      	sub	sp, #36	; 0x24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b = (len + 3) / 4;
 8001ae8:	88fb      	ldrh	r3, [r7, #6]
 8001aea:	3303      	adds	r3, #3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	da00      	bge.n	8001af2 <USB_OTG_ReadPacket+0x1c>
 8001af0:	3303      	adds	r3, #3
 8001af2:	109b      	asrs	r3, r3, #2
 8001af4:	61bb      	str	r3, [r7, #24]
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001afc:	617b      	str	r3, [r7, #20]
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
 8001b02:	e009      	b.n	8001b18 <USB_OTG_ReadPacket+0x42>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	601a      	str	r2, [r3, #0]
  for ( i = 0; i < count32b; i++, dest += 4 )
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	3304      	adds	r3, #4
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d3f1      	bcc.n	8001b04 <USB_OTG_ReadPacket+0x2e>
    
  }
  return ((void *)dest);
 8001b20:	68bb      	ldr	r3, [r7, #8]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3724      	adds	r7, #36	; 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <USB_OTG_SelectCore>:
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	70fb      	strb	r3, [r7, #3]
  uint32_t i , baseAddress = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
  USB_OTG_STS status = USB_OTG_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	73fb      	strb	r3, [r7, #15]
  
  pdev->cfg.dma_enable       = 0;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	70da      	strb	r2, [r3, #3]
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	709a      	strb	r2, [r3, #2]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2240      	movs	r2, #64	; 0x40
 8001b54:	809a      	strh	r2, [r3, #4]
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d113      	bne.n	8001b84 <USB_OTG_SelectCore+0x54>
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
 8001b5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b60:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 8 ;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2208      	movs	r2, #8
 8001b6c:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 4 ;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2204      	movs	r2, #4
 8001b72:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b7a:	80da      	strh	r2, [r3, #6]
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	721a      	strb	r2, [r3, #8]
 8001b82:	e011      	b.n	8001ba8 <USB_OTG_SelectCore+0x78>
    
#ifdef USB_OTG_FS_LOW_PWR_MGMT_SUPPORT    
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10e      	bne.n	8001ba8 <USB_OTG_SelectCore+0x78>
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
 8001b8a:	4b45      	ldr	r3, [pc, #276]	; (8001ca0 <USB_OTG_SelectCore+0x170>)
 8001b8c:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 12 ;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	220c      	movs	r2, #12
 8001b98:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 6 ;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2206      	movs	r2, #6
 8001b9e:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001ba6:	80da      	strh	r2, [r3, #6]
    pdev->cfg.low_power        = 1;    
#endif 
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	60da      	str	r2, [r3, #12]
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	611a      	str	r2, [r3, #16]
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e01c      	b.n	8001bfa <USB_OTG_SelectCore+0xca>
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	015a      	lsls	r2, r3, #5
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8001bcc:	4619      	mov	r1, r3
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	6099      	str	r1, [r3, #8]
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	015a      	lsls	r2, r3, #5
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4413      	add	r3, r2
 8001be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 8001be6:	4619      	mov	r1, r3
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3314      	adds	r3, #20
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	6059      	str	r1, [r3, #4]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	785b      	ldrb	r3, [r3, #1]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d8dc      	bhi.n	8001bc0 <USB_OTG_SelectCore+0x90>
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	615a      	str	r2, [r3, #20]
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c18:	461a      	mov	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	e00f      	b.n	8001c46 <USB_OTG_SelectCore+0x116>
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	015a      	lsls	r2, r3, #5
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 8001c32:	4619      	mov	r1, r3
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3322      	adds	r3, #34	; 0x22
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	6099      	str	r1, [r3, #8]
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	3301      	adds	r3, #1
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d8e9      	bhi.n	8001c26 <USB_OTG_SelectCore+0xf6>
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	e00f      	b.n	8001c78 <USB_OTG_SelectCore+0x148>
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
      (i * USB_OTG_DATA_FIFO_SIZE));
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	031a      	lsls	r2, r3, #12
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4413      	add	r3, r2
 8001c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c64:	4619      	mov	r1, r3
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	3332      	adds	r3, #50	; 0x32
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	6099      	str	r1, [r3, #8]
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	3301      	adds	r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d8e9      	bhi.n	8001c58 <USB_OTG_SelectCore+0x128>
  }
  pdev->regs.PCGCCTL = (uint32_t *)(baseAddress + USB_OTG_PCGCCTL_OFFSET);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  
  return status;
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	371c      	adds	r7, #28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	40040000 	.word	0x40040000

08001ca4 <USB_OTG_CoreInit>:
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	75fb      	strb	r3, [r7, #23]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  USB_OTG_GCCFG_TypeDef    gccfg;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  usbcfg.d32 = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]
  gccfg.d32 = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
  ahbcfg.d32 = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7a1b      	ldrb	r3, [r3, #8]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d142      	bne.n	8001d4a <USB_OTG_CoreInit+0xa6>
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cca:	60fb      	str	r3, [r7, #12]
    gccfg.b.pwdn = 0;
 8001ccc:	7bbb      	ldrb	r3, [r7, #14]
 8001cce:	f36f 0300 	bfc	r3, #0, #1
 8001cd2:	73bb      	strb	r3, [r7, #14]
    
    if (pdev->cfg.Sof_output)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7a5b      	ldrb	r3, [r3, #9]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <USB_OTG_CoreInit+0x40>
    {
      gccfg.b.sofouten = 1;   
 8001cdc:	7bbb      	ldrb	r3, [r7, #14]
 8001cde:	f043 0310 	orr.w	r3, r3, #16
 8001ce2:	73bb      	strb	r3, [r7, #14]
    }
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Init The ULPI Interface */
    usbcfg.d32 = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	613b      	str	r3, [r7, #16]
    
    usbcfg.b.physel            = 0; /* HS Interface */
 8001cf8:	7c3b      	ldrb	r3, [r7, #16]
 8001cfa:	f36f 1386 	bfc	r3, #6, #1
 8001cfe:	743b      	strb	r3, [r7, #16]
#else
#ifdef USB_OTG_EXTERNAL_VBUS_ENABLED    
    usbcfg.b.ulpi_ext_vbus_drv = 1; /* Use external VBUS */
#endif
#endif 
    usbcfg.b.term_sel_dl_pulse = 0; /* Data line pulsing using utmi_txvalid */    
 8001d00:	7cbb      	ldrb	r3, [r7, #18]
 8001d02:	f36f 1386 	bfc	r3, #6, #1
 8001d06:	74bb      	strb	r3, [r7, #18]
    
    usbcfg.b.ulpi_fsls = 0;
 8001d08:	7cbb      	ldrb	r3, [r7, #18]
 8001d0a:	f36f 0341 	bfc	r3, #1, #1
 8001d0e:	74bb      	strb	r3, [r7, #18]
    usbcfg.b.ulpi_clk_sus_m = 0;
 8001d10:	7cbb      	ldrb	r3, [r7, #18]
 8001d12:	f36f 03c3 	bfc	r3, #3, #1
 8001d16:	74bb      	strb	r3, [r7, #18]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select  */
    USB_OTG_CoreReset(pdev);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff fe55 	bl	80019d0 <USB_OTG_CoreReset>
    
    if(pdev->cfg.dma_enable == 1)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	78db      	ldrb	r3, [r3, #3]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d13d      	bne.n	8001daa <USB_OTG_CoreInit+0x106>
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8001d2e:	7a3b      	ldrb	r3, [r7, #8]
 8001d30:	2205      	movs	r2, #5
 8001d32:	f362 0344 	bfi	r3, r2, #1, #4
 8001d36:	723b      	strb	r3, [r7, #8]
      ahbcfg.b.dmaenable = 1;
 8001d38:	7a3b      	ldrb	r3, [r7, #8]
 8001d3a:	f043 0320 	orr.w	r3, r3, #32
 8001d3e:	723b      	strb	r3, [r7, #8]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	e02f      	b.n	8001daa <USB_OTG_CoreInit+0x106>
    }    
  }
  else /* FS interface (embedded Phy) */
  {
    
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	613b      	str	r3, [r7, #16]
    usbcfg.b.physel  = 1; /* FS Interface */
 8001d52:	7c3b      	ldrb	r3, [r7, #16]
 8001d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d58:	743b      	strb	r3, [r7, #16]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	60da      	str	r2, [r3, #12]
    /* Reset after a PHY select and set Host mode */
    USB_OTG_CoreReset(pdev);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff fe34 	bl	80019d0 <USB_OTG_CoreReset>
    /* Deactivate the power down*/
    gccfg.d32 = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
    gccfg.b.pwdn = 1;
 8001d6c:	7bbb      	ldrb	r3, [r7, #14]
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	73bb      	strb	r3, [r7, #14]
    
    gccfg.b.vbussensingA = 1 ;
 8001d74:	7bbb      	ldrb	r3, [r7, #14]
 8001d76:	f043 0304 	orr.w	r3, r3, #4
 8001d7a:	73bb      	strb	r3, [r7, #14]
    gccfg.b.vbussensingB = 1 ;     
 8001d7c:	7bbb      	ldrb	r3, [r7, #14]
 8001d7e:	f043 0308 	orr.w	r3, r3, #8
 8001d82:	73bb      	strb	r3, [r7, #14]
#ifndef VBUS_SENSING_ENABLED
    gccfg.b.disablevbussensing = 1; 
 8001d84:	7bbb      	ldrb	r3, [r7, #14]
 8001d86:	f043 0320 	orr.w	r3, r3, #32
 8001d8a:	73bb      	strb	r3, [r7, #14]
#endif    
    
    if(pdev->cfg.Sof_output)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7a5b      	ldrb	r3, [r3, #9]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <USB_OTG_CoreInit+0xf8>
    {
      gccfg.b.sofouten = 1;  
 8001d94:	7bbb      	ldrb	r3, [r7, #14]
 8001d96:	f043 0310 	orr.w	r3, r3, #16
 8001d9a:	73bb      	strb	r3, [r7, #14]
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	639a      	str	r2, [r3, #56]	; 0x38
    USB_OTG_BSP_mDelay(20);
 8001da4:	2014      	movs	r0, #20
 8001da6:	f7ff fdd7 	bl	8001958 <USB_OTG_BSP_mDelay>
  }
  /* case the HS core is working in FS mode */
  if(pdev->cfg.dma_enable == 1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	78db      	ldrb	r3, [r3, #3]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d110      	bne.n	8001dd4 <USB_OTG_CoreInit+0x130>
  {
    
    ahbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GAHBCFG);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	60bb      	str	r3, [r7, #8]
    ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8001dba:	7a3b      	ldrb	r3, [r7, #8]
 8001dbc:	2205      	movs	r2, #5
 8001dbe:	f362 0344 	bfi	r3, r2, #1, #4
 8001dc2:	723b      	strb	r3, [r7, #8]
    ahbcfg.b.dmaenable = 1;
 8001dc4:	7a3b      	ldrb	r3, [r7, #8]
 8001dc6:	f043 0320 	orr.w	r3, r3, #32
 8001dca:	723b      	strb	r3, [r7, #8]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	609a      	str	r2, [r3, #8]
  usbcfg.b.hnpcap = 1;
  usbcfg.b.srpcap = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
  USB_OTG_EnableCommonInt(pdev);
#endif
  return status;
 8001dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <USB_OTG_EnableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b085      	sub	sp, #20
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  ahbcfg.d32 = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 8001dee:	7a3b      	ldrb	r3, [r7, #8]
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	723b      	strb	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68d2      	ldr	r2, [r2, #12]
 8001dfe:	6891      	ldr	r1, [r2, #8]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	609a      	str	r2, [r3, #8]
  return status;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <USB_OTG_DisableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_DisableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  ahbcfg.d32 = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 8001e24:	7a3b      	ldrb	r3, [r7, #8]
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	723b      	strb	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32, 0);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	68d2      	ldr	r2, [r2, #12]
 8001e34:	6891      	ldr	r1, [r2, #8]
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	43d2      	mvns	r2, r2
 8001e3a:	400a      	ands	r2, r1
 8001e3c:	609a      	str	r2, [r3, #8]
  return status;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <USB_OTG_FlushTxFifo>:
* @param  pdev : Selected device
* @param  num : FO num
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushTxFifo (USB_OTG_CORE_HANDLE *pdev , uint32_t num )
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  greset.d32 = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
  greset.b.txfflsh = 1;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f043 0320 	orr.w	r3, r3, #32
 8001e68:	60fb      	str	r3, [r7, #12]
  greset.b.txfnum  = num;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f003 031f 	and.w	r3, r3, #31
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f362 138a 	bfi	r3, r2, #6, #5
 8001e7a:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	4a09      	ldr	r2, [pc, #36]	; (8001ebc <USB_OTG_FlushTxFifo+0x70>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d806      	bhi.n	8001ea8 <USB_OTG_FlushTxFifo+0x5c>
    {
      break;
    }
  }
  while (greset.b.txfflsh == 1);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d0ee      	beq.n	8001e84 <USB_OTG_FlushTxFifo+0x38>
 8001ea6:	e000      	b.n	8001eaa <USB_OTG_FlushTxFifo+0x5e>
      break;
 8001ea8:	bf00      	nop
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8001eaa:	2003      	movs	r0, #3
 8001eac:	f7ff fd30 	bl	8001910 <USB_OTG_BSP_uDelay>
  return status;
 8001eb0:	7cfb      	ldrb	r3, [r7, #19]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	00030d40 	.word	0x00030d40

08001ec0 <USB_OTG_FlushRxFifo>:
* @brief  USB_OTG_FlushRxFifo : Flush a Rx FIFO
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushRxFifo( USB_OTG_CORE_HANDLE *pdev )
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  greset.b.rxfflsh = 1;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f043 0310 	orr.w	r3, r3, #16
 8001eda:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <USB_OTG_FlushRxFifo+0x5c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d806      	bhi.n	8001f08 <USB_OTG_FlushRxFifo+0x48>
    {
      break;
    }
  }
  while (greset.b.rxfflsh == 1);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d0ee      	beq.n	8001ee4 <USB_OTG_FlushRxFifo+0x24>
 8001f06:	e000      	b.n	8001f0a <USB_OTG_FlushRxFifo+0x4a>
      break;
 8001f08:	bf00      	nop
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8001f0a:	2003      	movs	r0, #3
 8001f0c:	f7ff fd00 	bl	8001910 <USB_OTG_BSP_uDelay>
  return status;
 8001f10:	7cfb      	ldrb	r3, [r7, #19]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	00030d40 	.word	0x00030d40

08001f20 <USB_OTG_SetCurrentMode>:
* @param  pdev : Selected device
* @param  mode :  (Host/device)
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	60bb      	str	r3, [r7, #8]
  
  usbcfg.b.force_host = 0;
 8001f38:	7afb      	ldrb	r3, [r7, #11]
 8001f3a:	f36f 1345 	bfc	r3, #5, #1
 8001f3e:	72fb      	strb	r3, [r7, #11]
  usbcfg.b.force_dev = 0;
 8001f40:	7afb      	ldrb	r3, [r7, #11]
 8001f42:	f36f 1386 	bfc	r3, #6, #1
 8001f46:	72fb      	strb	r3, [r7, #11]
  
  if ( mode == HOST_MODE)
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d104      	bne.n	8001f58 <USB_OTG_SetCurrentMode+0x38>
  {
    usbcfg.b.force_host = 1;
 8001f4e:	7afb      	ldrb	r3, [r7, #11]
 8001f50:	f043 0320 	orr.w	r3, r3, #32
 8001f54:	72fb      	strb	r3, [r7, #11]
 8001f56:	e006      	b.n	8001f66 <USB_OTG_SetCurrentMode+0x46>
  }
  else if ( mode == DEVICE_MODE)
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d103      	bne.n	8001f66 <USB_OTG_SetCurrentMode+0x46>
  {
    usbcfg.b.force_dev = 1;
 8001f5e:	7afb      	ldrb	r3, [r7, #11]
 8001f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f64:	72fb      	strb	r3, [r7, #11]
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
  USB_OTG_BSP_mDelay(50);
 8001f6e:	2032      	movs	r0, #50	; 0x32
 8001f70:	f7ff fcf2 	bl	8001958 <USB_OTG_BSP_mDelay>
  return status;
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <USB_OTG_GetMode>:
* @brief  USB_OTG_GetMode : Get current mode
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <USB_OTG_IsHostMode>:
* @brief  USB_OTG_IsHostMode : Check if it is host mode
* @param  pdev : Selected device
* @retval num_in_ep
*/
uint8_t USB_OTG_IsHostMode(USB_OTG_CORE_HANDLE *pdev)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  return (USB_OTG_GetMode(pdev) == HOST_MODE);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ffea 	bl	8001f7e <USB_OTG_GetMode>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	bf0c      	ite	eq
 8001fb0:	2301      	moveq	r3, #1
 8001fb2:	2300      	movne	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <USB_OTG_ReadCoreItr>:
* @brief  USB_OTG_ReadCoreItr : returns the Core Interrupt register
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadCoreItr(USB_OTG_CORE_HANDLE *pdev)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b085      	sub	sp, #20
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
  v = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
  return v;
 8001fde:	68fb      	ldr	r3, [r7, #12]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <USB_OTG_CoreInitHost>:
* @brief  USB_OTG_CoreInitHost : Initializes USB_OTG controller for host mode
* @param  pdev : Selected device
* @retval status
*/
USB_OTG_STS USB_OTG_CoreInitHost(USB_OTG_CORE_HANDLE *pdev)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  USB_OTG_STS                     status = USB_OTG_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	76fb      	strb	r3, [r7, #27]
  
#ifdef USE_OTG_MODE
  USB_OTG_OTGCTL_TypeDef          gotgctl;
#endif
  
  uint32_t                        i = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61fb      	str	r3, [r7, #28]
  
  nptxfifosize.d32 = 0;  
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
  ptxfifosize.d32 = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	613b      	str	r3, [r7, #16]
#ifdef USE_OTG_MODE
  gotgctl.d32 = 0;
#endif
  hcfg.d32 = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
  
  
  /* configure charge pump IO */
  USB_OTG_BSP_ConfigVBUS(pdev);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff fc5b 	bl	80018c4 <USB_OTG_BSP_ConfigVBUS>
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
  
  /* Initialize Host Configuration Register */
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	7a1b      	ldrb	r3, [r3, #8]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d104      	bne.n	800202a <USB_OTG_CoreInitHost+0x3e>
  {
    USB_OTG_InitFSLSPClkSel(pdev , HCFG_30_60_MHZ); 
 8002020:	2100      	movs	r1, #0
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f8ee 	bl	8002204 <USB_OTG_InitFSLSPClkSel>
 8002028:	e003      	b.n	8002032 <USB_OTG_CoreInitHost+0x46>
  }
  else
  {
    USB_OTG_InitFSLSPClkSel(pdev , HCFG_48_MHZ); 
 800202a:	2101      	movs	r1, #1
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f8e9 	bl	8002204 <USB_OTG_InitFSLSPClkSel>
  }
  USB_OTG_ResetPort(pdev);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f92f 	bl	8002296 <USB_OTG_ResetPort>
  
  hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	60fb      	str	r3, [r7, #12]
  hcfg.b.fslssupp = 0;
 8002040:	7b3b      	ldrb	r3, [r7, #12]
 8002042:	f36f 0382 	bfc	r3, #2, #1
 8002046:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	601a      	str	r2, [r3, #0]
  
  /* Configure data FIFO sizes */
  /* Rx FIFO */
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	7adb      	ldrb	r3, [r3, #11]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d114      	bne.n	8002082 <USB_OTG_CoreInitHost+0x96>
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	2280      	movs	r2, #128	; 0x80
 800205e:	625a      	str	r2, [r3, #36]	; 0x24
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	82bb      	strh	r3, [r7, #20]
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
 8002064:	2360      	movs	r3, #96	; 0x60
 8002066:	82fb      	strh	r3, [r7, #22]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	629a      	str	r2, [r3, #40]	; 0x28
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
 8002070:	23e0      	movs	r3, #224	; 0xe0
 8002072:	823b      	strh	r3, [r7, #16]
    ptxfifosize.b.depth     = TXH_P_FS_FIFOSIZ;
 8002074:	2360      	movs	r3, #96	; 0x60
 8002076:	827b      	strh	r3, [r7, #18]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->HPTXFSIZ, ptxfifosize.d32);      
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  gotgctl.b.hstsethnpen = 1;
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GOTGCTL, gotgctl.d32, 0);
#endif
  
  /* Make sure the FIFOs are flushed. */
  USB_OTG_FlushTxFifo(pdev, 0x10 );         /* all Tx FIFOs */
 8002082:	2110      	movs	r1, #16
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff fee1 	bl	8001e4c <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ff18 	bl	8001ec0 <USB_OTG_FlushRxFifo>
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
 8002094:	e013      	b.n	80020be <USB_OTG_CoreInitHost+0xd2>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINT, 0xFFFFFFFF );
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	3322      	adds	r3, #34	; 0x22
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f04f 32ff 	mov.w	r2, #4294967295
 80020a6:	609a      	str	r2, [r3, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINTMSK, 0 );
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3322      	adds	r3, #34	; 0x22
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2200      	movs	r2, #0
 80020b6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	3301      	adds	r3, #1
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d8e5      	bhi.n	8002096 <USB_OTG_CoreInitHost+0xaa>
  }
#ifndef USE_OTG_MODE
  USB_OTG_DriveVbus(pdev, 1);
 80020ca:	2101      	movs	r1, #1
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f81c 	bl	800210a <USB_OTG_DriveVbus>
#endif
  
  USB_OTG_EnableHostInt(pdev);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f856 	bl	8002184 <USB_OTG_EnableHostInt>
  return status;
 80020d8:	7efb      	ldrb	r3, [r7, #27]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3720      	adds	r7, #32
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <USB_OTG_IsEvenFrame>:
*         This function returns the frame number for sof packet
* @param  pdev : Selected device
* @retval Frame number
*/
uint8_t USB_OTG_IsEvenFrame (USB_OTG_CORE_HANDLE *pdev) 
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  return !(USB_OTG_READ_REG32(&pdev->regs.HREGS->HFNUM) & 0x1);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf0c      	ite	eq
 80020f8:	2301      	moveq	r3, #1
 80020fa:	2300      	movne	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <USB_OTG_DriveVbus>:
* @param  pdev : Selected device
* @param  state : VBUS state
* @retval None
*/
void USB_OTG_DriveVbus (USB_OTG_CORE_HANDLE *pdev, uint8_t state)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	460b      	mov	r3, r1
 8002114:	70fb      	strb	r3, [r7, #3]
  USB_OTG_HPRT0_TypeDef     hprt0;
  
  hprt0.d32 = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
  
  /* enable disable the external charge pump */
  USB_OTG_BSP_DriveVBUS(pdev, state);
 800211a:	78fb      	ldrb	r3, [r7, #3]
 800211c:	4619      	mov	r1, r3
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff fbb8 	bl	8001894 <USB_OTG_BSP_DriveVBUS>
  
  /* Turn on the Host port power. */
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f889 	bl	800223c <USB_OTG_ReadHPRT0>
 800212a:	4603      	mov	r3, r0
 800212c:	60fb      	str	r3, [r7, #12]
  if ((hprt0.b.prtpwr == 0 ) && (state == 1 ))
 800212e:	7b7b      	ldrb	r3, [r7, #13]
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10b      	bne.n	8002152 <USB_OTG_DriveVbus+0x48>
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d108      	bne.n	8002152 <USB_OTG_DriveVbus+0x48>
  {
    hprt0.b.prtpwr = 1;
 8002140:	7b7b      	ldrb	r3, [r7, #13]
 8002142:	f043 0310 	orr.w	r3, r3, #16
 8002146:	737b      	strb	r3, [r7, #13]
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	601a      	str	r2, [r3, #0]
  }
  if ((hprt0.b.prtpwr == 1 ) && (state == 0 ))
 8002152:	7b7b      	ldrb	r3, [r7, #13]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00b      	beq.n	8002176 <USB_OTG_DriveVbus+0x6c>
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d108      	bne.n	8002176 <USB_OTG_DriveVbus+0x6c>
  {
    hprt0.b.prtpwr = 0;
 8002164:	7b7b      	ldrb	r3, [r7, #13]
 8002166:	f36f 1304 	bfc	r3, #4, #1
 800216a:	737b      	strb	r3, [r7, #13]
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	601a      	str	r2, [r3, #0]
  }
  
  USB_OTG_BSP_mDelay(200);
 8002176:	20c8      	movs	r0, #200	; 0xc8
 8002178:	f7ff fbee 	bl	8001958 <USB_OTG_BSP_mDelay>
}
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <USB_OTG_EnableHostInt>:
* @brief  USB_OTG_EnableHostInt: Enables the Host mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableHostInt(USB_OTG_CORE_HANDLE *pdev)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  USB_OTG_STS       status = USB_OTG_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GINTMSK_TypeDef  intmsk;
  intmsk.d32 = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	60bb      	str	r3, [r7, #8]
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTMSK, 0);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295
 80021a4:	615a      	str	r2, [r3, #20]
  
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff fbf0 	bl	800198c <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	78db      	ldrb	r3, [r3, #3]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d103      	bne.n	80021bc <USB_OTG_EnableHostInt+0x38>
  {  
    intmsk.b.rxstsqlvl  = 1;
 80021b4:	7a3b      	ldrb	r3, [r7, #8]
 80021b6:	f043 0310 	orr.w	r3, r3, #16
 80021ba:	723b      	strb	r3, [r7, #8]
  }  
  intmsk.b.portintr   = 1;
 80021bc:	7afb      	ldrb	r3, [r7, #11]
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	72fb      	strb	r3, [r7, #11]
  intmsk.b.hcintr     = 1;
 80021c4:	7afb      	ldrb	r3, [r7, #11]
 80021c6:	f043 0302 	orr.w	r3, r3, #2
 80021ca:	72fb      	strb	r3, [r7, #11]
  intmsk.b.disconnect = 1;  
 80021cc:	7afb      	ldrb	r3, [r7, #11]
 80021ce:	f043 0320 	orr.w	r3, r3, #32
 80021d2:	72fb      	strb	r3, [r7, #11]
  intmsk.b.sofintr    = 1;  
 80021d4:	7a3b      	ldrb	r3, [r7, #8]
 80021d6:	f043 0308 	orr.w	r3, r3, #8
 80021da:	723b      	strb	r3, [r7, #8]
  intmsk.b.incomplisoout  = 1; 
 80021dc:	7abb      	ldrb	r3, [r7, #10]
 80021de:	f043 0320 	orr.w	r3, r3, #32
 80021e2:	72bb      	strb	r3, [r7, #10]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	68d2      	ldr	r2, [r2, #12]
 80021ec:	6991      	ldr	r1, [r2, #24]
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	43d2      	mvns	r2, r2
 80021f2:	4011      	ands	r1, r2
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	619a      	str	r2, [r3, #24]
  return status;
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <USB_OTG_InitFSLSPClkSel>:
* @param  pdev : Selected device
* @param  freq : clock frequency
* @retval None
*/
void USB_OTG_InitFSLSPClkSel(USB_OTG_CORE_HANDLE *pdev , uint8_t freq)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_HCFG_TypeDef   hcfg;
  
  hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	60fb      	str	r3, [r7, #12]
  hcfg.b.fslspclksel = freq;
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	b2da      	uxtb	r2, r3
 8002220:	7b3b      	ldrb	r3, [r7, #12]
 8002222:	f362 0301 	bfi	r3, r2, #0, #2
 8002226:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	601a      	str	r2, [r3, #0]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <USB_OTG_ReadHPRT0>:
* @brief  USB_OTG_ReadHPRT0 : Reads HPRT0 to modify later
* @param  pdev : Selected device
* @retval HPRT0 value
*/
uint32_t USB_OTG_ReadHPRT0(USB_OTG_CORE_HANDLE *pdev)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60fb      	str	r3, [r7, #12]
  hprt0.b.prtena = 0;
 800224e:	7b3b      	ldrb	r3, [r7, #12]
 8002250:	f36f 0382 	bfc	r3, #2, #1
 8002254:	733b      	strb	r3, [r7, #12]
  hprt0.b.prtconndet = 0;
 8002256:	7b3b      	ldrb	r3, [r7, #12]
 8002258:	f36f 0341 	bfc	r3, #1, #1
 800225c:	733b      	strb	r3, [r7, #12]
  hprt0.b.prtenchng = 0;
 800225e:	7b3b      	ldrb	r3, [r7, #12]
 8002260:	f36f 03c3 	bfc	r3, #3, #1
 8002264:	733b      	strb	r3, [r7, #12]
  hprt0.b.prtovrcurrchng = 0;
 8002266:	7b3b      	ldrb	r3, [r7, #12]
 8002268:	f36f 1345 	bfc	r3, #5, #1
 800226c:	733b      	strb	r3, [r7, #12]
  return hprt0.d32;
 800226e:	68fb      	ldr	r3, [r7, #12]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <USB_OTG_ReadHostAllChannels_intr>:
* @brief  USB_OTG_ReadHostAllChannels_intr : Register PCD Callbacks
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadHostAllChannels_intr (USB_OTG_CORE_HANDLE *pdev)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  return (USB_OTG_READ_REG32 (&pdev->regs.HREGS->HAINT));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	695b      	ldr	r3, [r3, #20]
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <USB_OTG_ResetPort>:
* @retval status
* @note : (1)The application must wait at least 10 ms (+ 10 ms security)
*   before clearing the reset bit.
*/
uint32_t USB_OTG_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ffcc 	bl	800223c <USB_OTG_ReadHPRT0>
 80022a4:	4603      	mov	r3, r0
 80022a6:	60fb      	str	r3, [r7, #12]
  hprt0.b.prtrst = 1;
 80022a8:	7b7b      	ldrb	r3, [r7, #13]
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	601a      	str	r2, [r3, #0]
  USB_OTG_BSP_mDelay (10);                                /* See Note #1 */
 80022ba:	200a      	movs	r0, #10
 80022bc:	f7ff fb4c 	bl	8001958 <USB_OTG_BSP_mDelay>
  hprt0.b.prtrst = 0;
 80022c0:	7b7b      	ldrb	r3, [r7, #13]
 80022c2:	f36f 0300 	bfc	r3, #0, #1
 80022c6:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	601a      	str	r2, [r3, #0]
  USB_OTG_BSP_mDelay (20);   
 80022d2:	2014      	movs	r0, #20
 80022d4:	f7ff fb40 	bl	8001958 <USB_OTG_BSP_mDelay>
  return 1;
 80022d8:	2301      	movs	r3, #1
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <USB_OTG_HC_Init>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_Init(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	; 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	77fb      	strb	r3, [r7, #31]
  uint32_t intr_enable = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61bb      	str	r3, [r7, #24]
  USB_OTG_GINTMSK_TypeDef    gintmsk;
  USB_OTG_HCCHAR_TypeDef     hcchar;
  USB_OTG_HCINTn_TypeDef     hcint;
  
  
  gintmsk.d32 = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	613b      	str	r3, [r7, #16]
  hcintmsk.d32 = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  hcchar.d32 = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
  
  /* Clear old interrupt conditions for this host channel. */
  hcint.d32 = 0xFFFFFFFF;
 8002304:	f04f 33ff 	mov.w	r3, #4294967295
 8002308:	60bb      	str	r3, [r7, #8]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINT, hcint.d32);
 800230a:	78fb      	ldrb	r3, [r7, #3]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	3322      	adds	r3, #34	; 0x22
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	609a      	str	r2, [r3, #8]
  
  /* Enable channel interrupts required for this transfer. */
  hcintmsk.d32 = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
  
  if (pdev->cfg.dma_enable == 1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	78db      	ldrb	r3, [r3, #3]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d103      	bne.n	800232e <USB_OTG_HC_Init+0x4a>
  {
    hcintmsk.b.ahberr = 1;
 8002326:	7d3b      	ldrb	r3, [r7, #20]
 8002328:	f043 0304 	orr.w	r3, r3, #4
 800232c:	753b      	strb	r3, [r7, #20]
  }
  
  switch (pdev->host.hc[hc_num].ep_type) 
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	015b      	lsls	r3, r3, #5
 8002334:	4413      	add	r3, r2
 8002336:	f203 33b1 	addw	r3, r3, #945	; 0x3b1
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b03      	cmp	r3, #3
 800233e:	f200 8088 	bhi.w	8002452 <USB_OTG_HC_Init+0x16e>
 8002342:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <USB_OTG_HC_Init+0x64>)
 8002344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002348:	08002359 	.word	0x08002359
 800234c:	0800240d 	.word	0x0800240d
 8002350:	08002359 	.word	0x08002359
 8002354:	080023c1 	.word	0x080023c1
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    hcintmsk.b.xfercompl = 1;
 8002358:	7d3b      	ldrb	r3, [r7, #20]
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.stall = 1;
 8002360:	7d3b      	ldrb	r3, [r7, #20]
 8002362:	f043 0308 	orr.w	r3, r3, #8
 8002366:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.xacterr = 1;
 8002368:	7d3b      	ldrb	r3, [r7, #20]
 800236a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800236e:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.datatglerr = 1;
 8002370:	7d7b      	ldrb	r3, [r7, #21]
 8002372:	f043 0304 	orr.w	r3, r3, #4
 8002376:	757b      	strb	r3, [r7, #21]
    hcintmsk.b.nak = 1;  
 8002378:	7d3b      	ldrb	r3, [r7, #20]
 800237a:	f043 0310 	orr.w	r3, r3, #16
 800237e:	753b      	strb	r3, [r7, #20]
    if (pdev->host.hc[hc_num].ep_is_in) 
 8002380:	78fb      	ldrb	r3, [r7, #3]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	015b      	lsls	r3, r3, #5
 8002386:	4413      	add	r3, r2
 8002388:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d004      	beq.n	800239c <USB_OTG_HC_Init+0xb8>
    {
      hcintmsk.b.bblerr = 1;
 8002392:	7d7b      	ldrb	r3, [r7, #21]
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	757b      	strb	r3, [r7, #21]
      if (pdev->host.hc[hc_num].do_ping) 
      {
        hcintmsk.b.ack = 1;
      }
    }
    break;
 800239a:	e055      	b.n	8002448 <USB_OTG_HC_Init+0x164>
      hcintmsk.b.nyet = 1;
 800239c:	7d3b      	ldrb	r3, [r7, #20]
 800239e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023a2:	753b      	strb	r3, [r7, #20]
      if (pdev->host.hc[hc_num].do_ping) 
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	015b      	lsls	r3, r3, #5
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d048      	beq.n	8002448 <USB_OTG_HC_Init+0x164>
        hcintmsk.b.ack = 1;
 80023b6:	7d3b      	ldrb	r3, [r7, #20]
 80023b8:	f043 0320 	orr.w	r3, r3, #32
 80023bc:	753b      	strb	r3, [r7, #20]
    break;
 80023be:	e043      	b.n	8002448 <USB_OTG_HC_Init+0x164>
  case EP_TYPE_INTR:
    hcintmsk.b.xfercompl = 1;
 80023c0:	7d3b      	ldrb	r3, [r7, #20]
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.nak = 1;
 80023c8:	7d3b      	ldrb	r3, [r7, #20]
 80023ca:	f043 0310 	orr.w	r3, r3, #16
 80023ce:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.stall = 1;
 80023d0:	7d3b      	ldrb	r3, [r7, #20]
 80023d2:	f043 0308 	orr.w	r3, r3, #8
 80023d6:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.xacterr = 1;
 80023d8:	7d3b      	ldrb	r3, [r7, #20]
 80023da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023de:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.datatglerr = 1;
 80023e0:	7d7b      	ldrb	r3, [r7, #21]
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	757b      	strb	r3, [r7, #21]
    hcintmsk.b.frmovrun = 1;
 80023e8:	7d7b      	ldrb	r3, [r7, #21]
 80023ea:	f043 0302 	orr.w	r3, r3, #2
 80023ee:	757b      	strb	r3, [r7, #21]
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	015b      	lsls	r3, r3, #5
 80023f6:	4413      	add	r3, r2
 80023f8:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d024      	beq.n	800244c <USB_OTG_HC_Init+0x168>
    {
      hcintmsk.b.bblerr = 1;
 8002402:	7d7b      	ldrb	r3, [r7, #21]
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	757b      	strb	r3, [r7, #21]
    }
    
    break;
 800240a:	e01f      	b.n	800244c <USB_OTG_HC_Init+0x168>
  case EP_TYPE_ISOC:
    hcintmsk.b.xfercompl = 1;
 800240c:	7d3b      	ldrb	r3, [r7, #20]
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	753b      	strb	r3, [r7, #20]
    hcintmsk.b.frmovrun = 1;
 8002414:	7d7b      	ldrb	r3, [r7, #21]
 8002416:	f043 0302 	orr.w	r3, r3, #2
 800241a:	757b      	strb	r3, [r7, #21]
    hcintmsk.b.ack = 1;
 800241c:	7d3b      	ldrb	r3, [r7, #20]
 800241e:	f043 0320 	orr.w	r3, r3, #32
 8002422:	753b      	strb	r3, [r7, #20]
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	015b      	lsls	r3, r3, #5
 800242a:	4413      	add	r3, r2
 800242c:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00c      	beq.n	8002450 <USB_OTG_HC_Init+0x16c>
    {
      hcintmsk.b.xacterr = 1;
 8002436:	7d3b      	ldrb	r3, [r7, #20]
 8002438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800243c:	753b      	strb	r3, [r7, #20]
      hcintmsk.b.bblerr = 1;
 800243e:	7d7b      	ldrb	r3, [r7, #21]
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	757b      	strb	r3, [r7, #21]
    }
    break;
 8002446:	e003      	b.n	8002450 <USB_OTG_HC_Init+0x16c>
    break;
 8002448:	bf00      	nop
 800244a:	e002      	b.n	8002452 <USB_OTG_HC_Init+0x16e>
    break;
 800244c:	bf00      	nop
 800244e:	e000      	b.n	8002452 <USB_OTG_HC_Init+0x16e>
    break;
 8002450:	bf00      	nop
  }
  
  
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINTMSK, hcintmsk.d32);
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	3322      	adds	r3, #34	; 0x22
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	60da      	str	r2, [r3, #12]
  
  
  /* Enable the top level host channel interrupt. */
  intr_enable = (1 << hc_num);
 8002462:	78fb      	ldrb	r3, [r7, #3]
 8002464:	2201      	movs	r2, #1
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	61bb      	str	r3, [r7, #24]
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6952      	ldr	r2, [r2, #20]
 8002474:	6991      	ldr	r1, [r2, #24]
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	430a      	orrs	r2, r1
 800247a:	619a      	str	r2, [r3, #24]
  
  /* Make sure host channel interrupts are enabled. */
  gintmsk.b.hcintr = 1;
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	f043 0302 	orr.w	r3, r3, #2
 8002482:	74fb      	strb	r3, [r7, #19]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68d2      	ldr	r2, [r2, #12]
 800248c:	6991      	ldr	r1, [r2, #24]
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	430a      	orrs	r2, r1
 8002492:	619a      	str	r2, [r3, #24]
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	015b      	lsls	r3, r3, #5
 800249e:	4413      	add	r3, r2
 80024a0:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	89fb      	ldrh	r3, [r7, #14]
 80024ae:	f362 138c 	bfi	r3, r2, #6, #7
 80024b2:	81fb      	strh	r3, [r7, #14]
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	015b      	lsls	r3, r3, #5
 80024ba:	4413      	add	r3, r2
 80024bc:	f203 33ad 	addw	r3, r3, #941	; 0x3ad
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	7b7b      	ldrb	r3, [r7, #13]
 80024ca:	f362 03c6 	bfi	r3, r2, #3, #4
 80024ce:	737b      	strb	r3, [r7, #13]
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	015b      	lsls	r3, r3, #5
 80024d6:	4413      	add	r3, r2
 80024d8:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	7b7b      	ldrb	r3, [r7, #13]
 80024e6:	f362 13c7 	bfi	r3, r2, #7, #1
 80024ea:	737b      	strb	r3, [r7, #13]
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	015b      	lsls	r3, r3, #5
 80024f2:	4413      	add	r3, r2
 80024f4:	f203 33af 	addw	r3, r3, #943	; 0x3af
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	bf0c      	ite	eq
 80024fe:	2301      	moveq	r3, #1
 8002500:	2300      	movne	r3, #0
 8002502:	b2da      	uxtb	r2, r3
 8002504:	7bbb      	ldrb	r3, [r7, #14]
 8002506:	f362 0341 	bfi	r3, r2, #1, #1
 800250a:	73bb      	strb	r3, [r7, #14]
  hcchar.b.eptype  = pdev->host.hc[hc_num].ep_type;
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	015b      	lsls	r3, r3, #5
 8002512:	4413      	add	r3, r2
 8002514:	f203 33b1 	addw	r3, r3, #945	; 0x3b1
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	b2da      	uxtb	r2, r3
 8002520:	7bbb      	ldrb	r3, [r7, #14]
 8002522:	f362 0383 	bfi	r3, r2, #2, #2
 8002526:	73bb      	strb	r3, [r7, #14]
  hcchar.b.mps     = pdev->host.hc[hc_num].max_packet;
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	015b      	lsls	r3, r3, #5
 800252e:	4413      	add	r3, r2
 8002530:	f203 33b2 	addw	r3, r3, #946	; 0x3b2
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800253a:	b29a      	uxth	r2, r3
 800253c:	89bb      	ldrh	r3, [r7, #12]
 800253e:	f362 030a 	bfi	r3, r2, #0, #11
 8002542:	81bb      	strh	r3, [r7, #12]
  if (pdev->host.hc[hc_num].ep_type == HCCHAR_INTR)
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	015b      	lsls	r3, r3, #5
 800254a:	4413      	add	r3, r2
 800254c:	f203 33b1 	addw	r3, r3, #945	; 0x3b1
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b03      	cmp	r3, #3
 8002554:	d103      	bne.n	800255e <USB_OTG_HC_Init+0x27a>
  {
    hcchar.b.oddfrm  = 1;
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	f043 0320 	orr.w	r3, r3, #32
 800255c:	73fb      	strb	r3, [r7, #15]
  }
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 800255e:	78fb      	ldrb	r3, [r7, #3]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	3322      	adds	r3, #34	; 0x22
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	601a      	str	r2, [r3, #0]
  return status;
 800256e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3724      	adds	r7, #36	; 0x24
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <USB_OTG_HC_StartXfer>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_StartXfer(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08c      	sub	sp, #48	; 0x30
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  USB_OTG_HCCHAR_TypeDef   hcchar;
  USB_OTG_HCTSIZn_TypeDef  hctsiz;
  USB_OTG_HNPTXSTS_TypeDef hnptxsts; 
  USB_OTG_HPTXSTS_TypeDef  hptxsts; 
  USB_OTG_GINTMSK_TypeDef  intmsk;
  uint16_t                 len_words = 0;   
 800258e:	2300      	movs	r3, #0
 8002590:	857b      	strh	r3, [r7, #42]	; 0x2a
  
  uint16_t num_packets;
  uint16_t max_hc_pkt_count;
  
  max_hc_pkt_count = 256;
 8002592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002596:	853b      	strh	r3, [r7, #40]	; 0x28
  hctsiz.d32 = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	623b      	str	r3, [r7, #32]
  hcchar.d32 = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
  intmsk.d32 = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60bb      	str	r3, [r7, #8]
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	015b      	lsls	r3, r3, #5
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d032      	beq.n	800261c <USB_OTG_HC_StartXfer+0xa0>
  {
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	015b      	lsls	r3, r3, #5
 80025bc:	4413      	add	r3, r2
 80025be:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80025c2:	681b      	ldr	r3, [r3, #0]
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	0152      	lsls	r2, r2, #5
 80025ca:	440a      	add	r2, r1
 80025cc:	f202 32b2 	addw	r2, r2, #946	; 0x3b2
 80025d0:	8812      	ldrh	r2, [r2, #0]
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 80025d2:	4413      	add	r3, r2
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
 80025d4:	3b01      	subs	r3, #1
 80025d6:	78fa      	ldrb	r2, [r7, #3]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	0152      	lsls	r2, r2, #5
 80025dc:	440a      	add	r2, r1
 80025de:	f202 32b2 	addw	r2, r2, #946	; 0x3b2
 80025e2:	8812      	ldrh	r2, [r2, #0]
 80025e4:	fbb3 f3f2 	udiv	r3, r3, r2
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 80025e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    
    if (num_packets > max_hc_pkt_count)
 80025ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80025ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d916      	bls.n	8002620 <USB_OTG_HC_StartXfer+0xa4>
    {
      num_packets = max_hc_pkt_count;
 80025f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80025f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      pdev->host.hc[hc_num].xfer_len = num_packets * \
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
        pdev->host.hc[hc_num].max_packet;
 80025fa:	78f9      	ldrb	r1, [r7, #3]
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	0149      	lsls	r1, r1, #5
 8002600:	4401      	add	r1, r0
 8002602:	f201 31b2 	addw	r1, r1, #946	; 0x3b2
 8002606:	8809      	ldrh	r1, [r1, #0]
      pdev->host.hc[hc_num].xfer_len = num_packets * \
 8002608:	fb01 f202 	mul.w	r2, r1, r2
 800260c:	4611      	mov	r1, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	015b      	lsls	r3, r3, #5
 8002612:	4413      	add	r3, r2
 8002614:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002618:	6019      	str	r1, [r3, #0]
 800261a:	e001      	b.n	8002620 <USB_OTG_HC_StartXfer+0xa4>
    }
  }
  else
  {
    num_packets = 1;
 800261c:	2301      	movs	r3, #1
 800261e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }
  if (pdev->host.hc[hc_num].ep_is_in)
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	015b      	lsls	r3, r3, #5
 8002626:	4413      	add	r3, r2
 8002628:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d011      	beq.n	8002656 <USB_OTG_HC_StartXfer+0xda>
  {
    pdev->host.hc[hc_num].xfer_len = num_packets * \
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
      pdev->host.hc[hc_num].max_packet;
 8002636:	78f9      	ldrb	r1, [r7, #3]
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	0149      	lsls	r1, r1, #5
 800263c:	4401      	add	r1, r0
 800263e:	f201 31b2 	addw	r1, r1, #946	; 0x3b2
 8002642:	8809      	ldrh	r1, [r1, #0]
    pdev->host.hc[hc_num].xfer_len = num_packets * \
 8002644:	fb01 f202 	mul.w	r2, r1, r2
 8002648:	4611      	mov	r1, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	015b      	lsls	r3, r3, #5
 800264e:	4413      	add	r3, r2
 8002650:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002654:	6019      	str	r1, [r3, #0]
  }
  /* Initialize the HCTSIZn register */
  hctsiz.b.xfersize = pdev->host.hc[hc_num].xfer_len;
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	015b      	lsls	r3, r3, #5
 800265c:	4413      	add	r3, r2
 800265e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	f362 0312 	bfi	r3, r2, #0, #19
 800266e:	623b      	str	r3, [r7, #32]
  hctsiz.b.pktcnt = num_packets;
 8002670:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002672:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002676:	b29a      	uxth	r2, r3
 8002678:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800267a:	f362 03cc 	bfi	r3, r2, #3, #10
 800267e:	847b      	strh	r3, [r7, #34]	; 0x22
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	3315      	adds	r3, #21
 8002686:	015b      	lsls	r3, r3, #5
 8002688:	4413      	add	r3, r2
 800268a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	b2da      	uxtb	r2, r3
 8002696:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800269a:	f362 1346 	bfi	r3, r2, #5, #2
 800269e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	3322      	adds	r3, #34	; 0x22
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	6a3a      	ldr	r2, [r7, #32]
 80026b0:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	78db      	ldrb	r3, [r3, #3]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d10e      	bne.n	80026d8 <USB_OTG_HC_StartXfer+0x15c>
  {
    USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCDMA, (unsigned int)pdev->host.hc[hc_num].xfer_buff);
 80026ba:	78fb      	ldrb	r3, [r7, #3]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	3322      	adds	r3, #34	; 0x22
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	3215      	adds	r2, #21
 80026cc:	0152      	lsls	r2, r2, #5
 80026ce:	440a      	add	r2, r1
 80026d0:	f502 728c 	add.w	r2, r2, #280	; 0x118
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	615a      	str	r2, [r3, #20]
  }
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	3322      	adds	r3, #34	; 0x22
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff fcfa 	bl	80020e2 <USB_OTG_IsEvenFrame>
 80026ee:	4603      	mov	r3, r0
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026fa:	f362 1345 	bfi	r3, r2, #5, #1
 80026fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Set host channel enable */
  hcchar.b.chen = 1;
 8002702:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800270a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  hcchar.b.chdis = 0;
 800270e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002712:	f36f 1386 	bfc	r3, #6, #1
 8002716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 800271a:	78fb      	ldrb	r3, [r7, #3]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	3322      	adds	r3, #34	; 0x22
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002728:	601a      	str	r2, [r3, #0]
  
  if (pdev->cfg.dma_enable == 0) /* Slave mode */
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	78db      	ldrb	r3, [r3, #3]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d17d      	bne.n	800282e <USB_OTG_HC_StartXfer+0x2b2>
  {  
    if((pdev->host.hc[hc_num].ep_is_in == 0) && 
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	015b      	lsls	r3, r3, #5
 8002738:	4413      	add	r3, r2
 800273a:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d174      	bne.n	800282e <USB_OTG_HC_StartXfer+0x2b2>
       (pdev->host.hc[hc_num].xfer_len > 0))
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	015b      	lsls	r3, r3, #5
 800274a:	4413      	add	r3, r2
 800274c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002750:	681b      	ldr	r3, [r3, #0]
    if((pdev->host.hc[hc_num].ep_is_in == 0) && 
 8002752:	2b00      	cmp	r3, #0
 8002754:	d06b      	beq.n	800282e <USB_OTG_HC_StartXfer+0x2b2>
    {
      switch(pdev->host.hc[hc_num].ep_type) 
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	015b      	lsls	r3, r3, #5
 800275c:	4413      	add	r3, r2
 800275e:	f203 33b1 	addw	r3, r3, #945	; 0x3b1
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b03      	cmp	r3, #3
 8002766:	d849      	bhi.n	80027fc <USB_OTG_HC_StartXfer+0x280>
 8002768:	a201      	add	r2, pc, #4	; (adr r2, 8002770 <USB_OTG_HC_StartXfer+0x1f4>)
 800276a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276e:	bf00      	nop
 8002770:	08002781 	.word	0x08002781
 8002774:	080027bf 	.word	0x080027bf
 8002778:	08002781 	.word	0x08002781
 800277c:	080027bf 	.word	0x080027bf
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002786:	617b      	str	r3, [r7, #20]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	015b      	lsls	r3, r3, #5
 800278e:	4413      	add	r3, r2
 8002790:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3303      	adds	r3, #3
 8002798:	089b      	lsrs	r3, r3, #2
 800279a:	857b      	strh	r3, [r7, #42]	; 0x2a
        
        /* check if there is enough space in FIFO space */
        if(len_words > hnptxsts.b.nptxfspcavail)
 800279c:	8abb      	ldrh	r3, [r7, #20]
 800279e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d92d      	bls.n	8002800 <USB_OTG_HC_StartXfer+0x284>
        {
          /* need to process data in nptxfempty interrupt */
          intmsk.b.nptxfempty = 1;
 80027a4:	7a3b      	ldrb	r3, [r7, #8]
 80027a6:	f043 0320 	orr.w	r3, r3, #32
 80027aa:	723b      	strb	r3, [r7, #8]
          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);  
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	68d2      	ldr	r2, [r2, #12]
 80027b4:	6991      	ldr	r1, [r2, #24]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	619a      	str	r2, [r3, #24]
        }
        
        break;
 80027bc:	e020      	b.n	8002800 <USB_OTG_HC_StartXfer+0x284>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	60fb      	str	r3, [r7, #12]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	015b      	lsls	r3, r3, #5
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3303      	adds	r3, #3
 80027d6:	089b      	lsrs	r3, r3, #2
 80027d8:	857b      	strh	r3, [r7, #42]	; 0x2a
        /* check if there is enough space in FIFO space */
        if(len_words > hptxsts.b.ptxfspcavail) /* split the transfer */
 80027da:	89bb      	ldrh	r3, [r7, #12]
 80027dc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80027de:	429a      	cmp	r2, r3
 80027e0:	d910      	bls.n	8002804 <USB_OTG_HC_StartXfer+0x288>
        {
          /* need to process data in ptxfempty interrupt */
          intmsk.b.ptxfempty = 1;
 80027e2:	7afb      	ldrb	r3, [r7, #11]
 80027e4:	f043 0304 	orr.w	r3, r3, #4
 80027e8:	72fb      	strb	r3, [r7, #11]
          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);  
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68d2      	ldr	r2, [r2, #12]
 80027f2:	6991      	ldr	r1, [r2, #24]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80027fa:	e003      	b.n	8002804 <USB_OTG_HC_StartXfer+0x288>
        
      default:
        break;
 80027fc:	bf00      	nop
 80027fe:	e002      	b.n	8002806 <USB_OTG_HC_StartXfer+0x28a>
        break;
 8002800:	bf00      	nop
 8002802:	e000      	b.n	8002806 <USB_OTG_HC_StartXfer+0x28a>
        break;
 8002804:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_OTG_WritePacket(pdev, 
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	3315      	adds	r3, #21
 800280c:	015b      	lsls	r3, r3, #5
 800280e:	4413      	add	r3, r2
 8002810:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002814:	6819      	ldr	r1, [r3, #0]
                          pdev->host.hc[hc_num].xfer_buff , 
                          hc_num, pdev->host.hc[hc_num].xfer_len);
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	015b      	lsls	r3, r3, #5
 800281c:	4413      	add	r3, r2
 800281e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002822:	681b      	ldr	r3, [r3, #0]
      USB_OTG_WritePacket(pdev, 
 8002824:	b29b      	uxth	r3, r3
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff f919 	bl	8001a60 <USB_OTG_WritePacket>
    }
  }
  return status;
 800282e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
}
 8002832:	4618      	mov	r0, r3
 8002834:	3730      	adds	r7, #48	; 0x30
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop

0800283c <USB_OTG_HC_Halt>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_Halt(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 800283c:	b480      	push	{r7}
 800283e:	b08b      	sub	sp, #44	; 0x2c
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 8002848:	2300      	movs	r3, #0
 800284a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  USB_OTG_HNPTXSTS_TypeDef            nptxsts;
  USB_OTG_HPTXSTS_TypeDef             hptxsts;
  USB_OTG_HCCHAR_TypeDef              hcchar;
  
  nptxsts.d32 = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
  hptxsts.d32 = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	3322      	adds	r3, #34	; 0x22
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]
  hcchar.b.chen = 1;
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800286c:	73fb      	strb	r3, [r7, #15]
  hcchar.b.chdis = 1;
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002874:	73fb      	strb	r3, [r7, #15]
  
  /* Check for space in the request queue to issue the halt. */
  if (hcchar.b.eptype == HCCHAR_CTRL || hcchar.b.eptype == HCCHAR_BULK)
 8002876:	7bbb      	ldrb	r3, [r7, #14]
 8002878:	f003 030c 	and.w	r3, r3, #12
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <USB_OTG_HC_Halt+0x52>
 8002882:	7bbb      	ldrb	r3, [r7, #14]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b08      	cmp	r3, #8
 800288c:	d10b      	bne.n	80028a6 <USB_OTG_HC_Halt+0x6a>
  {
    nptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	61bb      	str	r3, [r7, #24]
    if (nptxsts.b.nptxqspcavail == 0)
 8002896:	7ebb      	ldrb	r3, [r7, #26]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10f      	bne.n	80028bc <USB_OTG_HC_Halt+0x80>
    {
      hcchar.b.chen = 0;
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	f36f 13c7 	bfc	r3, #7, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
    if (nptxsts.b.nptxqspcavail == 0)
 80028a4:	e00a      	b.n	80028bc <USB_OTG_HC_Halt+0x80>
    }
  }
  else
  {
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	613b      	str	r3, [r7, #16]
    if (hptxsts.b.ptxqspcavail == 0)
 80028ae:	7cbb      	ldrb	r3, [r7, #18]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d103      	bne.n	80028bc <USB_OTG_HC_Halt+0x80>
    {
      hcchar.b.chen = 0;
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	f36f 13c7 	bfc	r3, #7, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	3322      	adds	r3, #34	; 0x22
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	601a      	str	r2, [r3, #0]
  return status;
 80028cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	372c      	adds	r7, #44	; 0x2c
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <USB_OTG_HC_DoPing>:
* @brief  Issue a ping token
* @param  None
* @retval : None
*/
USB_OTG_STS USB_OTG_HC_DoPing(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS               status = USB_OTG_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	75fb      	strb	r3, [r7, #23]
  USB_OTG_HCCHAR_TypeDef    hcchar;
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
  hctsiz.b.dopng = 1;
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f6:	73fb      	strb	r3, [r7, #15]
  hctsiz.b.pktcnt = 1;
 80028f8:	89fb      	ldrh	r3, [r7, #14]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f362 03cc 	bfi	r3, r2, #3, #10
 8002900:	81fb      	strh	r3, [r7, #14]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8002902:	78fb      	ldrb	r3, [r7, #3]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	3322      	adds	r3, #34	; 0x22
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	611a      	str	r2, [r3, #16]
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	3322      	adds	r3, #34	; 0x22
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	613b      	str	r3, [r7, #16]
  hcchar.b.chen = 1;
 8002922:	7cfb      	ldrb	r3, [r7, #19]
 8002924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002928:	74fb      	strb	r3, [r7, #19]
  hcchar.b.chdis = 0;
 800292a:	7cfb      	ldrb	r3, [r7, #19]
 800292c:	f36f 1386 	bfc	r3, #6, #1
 8002930:	74fb      	strb	r3, [r7, #19]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8002932:	78fb      	ldrb	r3, [r7, #3]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	3322      	adds	r3, #34	; 0x22
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	601a      	str	r2, [r3, #0]
  return status;  
 8002942:	7dfb      	ldrb	r3, [r7, #23]
}
 8002944:	4618      	mov	r0, r3
 8002946:	371c      	adds	r7, #28
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HCD_Init>:
  * @param  base_address: OTG base address
  * @retval Status
  */
uint32_t HCD_Init(USB_OTG_CORE_HANDLE *pdev , 
                  USB_OTG_CORE_ID_TypeDef coreID)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	70fb      	strb	r3, [r7, #3]
  uint8_t i = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]
  pdev->host.ConnSts = 0;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]
 800296c:	e015      	b.n	800299a <HCD_Init+0x4a>
  {
  pdev->host.ErrCnt[i]  = 0;
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	33c4      	adds	r3, #196	; 0xc4
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	2200      	movs	r2, #0
 800297a:	605a      	str	r2, [r3, #4]
  pdev->host.XferCnt[i]   = 0;
 800297c:	7bfa      	ldrb	r2, [r7, #15]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	32d4      	adds	r2, #212	; 0xd4
 8002982:	2100      	movs	r1, #0
 8002984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->host.HC_Status[i]   = HC_IDLE;
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	2200      	movs	r2, #0
 8002990:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	3301      	adds	r3, #1
 8002998:	73fb      	strb	r3, [r7, #15]
 800299a:	7bfb      	ldrb	r3, [r7, #15]
 800299c:	2b0e      	cmp	r3, #14
 800299e:	d9e6      	bls.n	800296e <HCD_Init+0x1e>
  }
  pdev->host.hc[0].max_packet  = 8; 
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2208      	movs	r2, #8
 80029a4:	f8a3 23b2 	strh.w	r2, [r3, #946]	; 0x3b2

  USB_OTG_SelectCore(pdev, coreID);
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	4619      	mov	r1, r3
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff f8bf 	bl	8001b30 <USB_OTG_SelectCore>
#ifndef DUAL_ROLE_MODE_ENABLED
  USB_OTG_DisableGlobalInt(pdev);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff fa2e 	bl	8001e14 <USB_OTG_DisableGlobalInt>
  USB_OTG_CoreInit(pdev);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff f973 	bl	8001ca4 <USB_OTG_CoreInit>

  /* Force Host Mode*/
  USB_OTG_SetCurrentMode(pdev , HOST_MODE);
 80029be:	2101      	movs	r1, #1
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff faad 	bl	8001f20 <USB_OTG_SetCurrentMode>
  USB_OTG_CoreInitHost(pdev);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff fb10 	bl	8001fec <USB_OTG_CoreInitHost>
  USB_OTG_EnableGlobalInt(pdev);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff fa06 	bl	8001dde <USB_OTG_EnableGlobalInt>
#endif
   
  return 0;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HCD_GetCurrentSpeed>:
  * @param  pdev : Selected device
  * @retval Status
  */

uint32_t HCD_GetCurrentSpeed (USB_OTG_CORE_HANDLE *pdev)
{    
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
    USB_OTG_HPRT0_TypeDef  HPRT0;
    HPRT0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60fb      	str	r3, [r7, #12]
    
    return HPRT0.b.prtspd;
 80029ee:	7bbb      	ldrb	r3, [r7, #14]
 80029f0:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80029f4:	b2db      	uxtb	r3, r3
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HCD_ResetPort>:
  *         Issues the reset command to device
  * @param  pdev : Selected device
  * @retval Status
  */
uint32_t HCD_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  interrupt triggered by the debounce done bit (DBCDNE bit in OTG_FS_GOTGINT), 
  which indicates that the bus is stable again after the electrical debounce 
  caused by the attachment of a pull-up resistor on DP (FS) or DM (LS).
  */
  
  USB_OTG_ResetPort(pdev); 
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff fc43 	bl	8002296 <USB_OTG_ResetPort>
  return 0;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HCD_IsDeviceConnected>:
  * @param  pdev : Selected device
  * @retval Device connection status. 1 -> connected and 0 -> disconnected
  * 
  */
uint32_t HCD_IsDeviceConnected(USB_OTG_CORE_HANDLE *pdev)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  return (pdev->host.ConnSts);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HCD_GetCurrentFrame>:
  * @param  pdev : Selected device
  * @retval Frame number
  * 
  */
uint32_t HCD_GetCurrentFrame (USB_OTG_CORE_HANDLE *pdev) 
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 return (USB_OTG_READ_REG32(&pdev->regs.HREGS->HFNUM) & 0xFFFF) ;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	b29b      	uxth	r3, r3
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HCD_GetURB_State>:
  * @param  pdev: Selected device
  * @retval URB_STATE
  * 
  */
URB_STATE HCD_GetURB_State (USB_OTG_CORE_HANDLE *pdev , uint8_t ch_num) 
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	70fb      	strb	r3, [r7, #3]
  return pdev->host.URB_State[ch_num] ;
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	4413      	add	r3, r2
 8002a62:	f893 339b 	ldrb.w	r3, [r3, #923]	; 0x39b
 8002a66:	b2db      	uxtb	r3, r3
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HCD_SubmitRequest>:
  * @param  pdev: Selected device
  * @param  hc_num: Channel number 
  * @retval status
  */
uint32_t HCD_SubmitRequest (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	70fb      	strb	r3, [r7, #3]
  
  pdev->host.URB_State[hc_num] =   URB_IDLE;  
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 239b 	strb.w	r2, [r3, #923]	; 0x39b
  pdev->host.hc[hc_num].xfer_count = 0 ;
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	015b      	lsls	r3, r3, #5
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
  return USB_OTG_HC_StartXfer(pdev, hc_num);
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff fd6b 	bl	800257c <USB_OTG_HC_StartXfer>
 8002aa6:	4603      	mov	r3, r0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <USBH_OTG_ISR_Handler>:
* @param  pdev: Selected device
* @retval status 
*/

uint32_t USBH_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t retval = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
  
  gintsts.d32 = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60bb      	str	r3, [r7, #8]
  
  /* Check if HOST Mode */
  if (USB_OTG_IsHostMode(pdev))
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff fa6b 	bl	8001f9c <USB_OTG_IsHostMode>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d071      	beq.n	8002bb0 <USBH_OTG_ISR_Handler+0x100>
  {
    gintsts.d32 = USB_OTG_ReadCoreItr(pdev);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff fa76 	bl	8001fbe <USB_OTG_ReadCoreItr>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	60bb      	str	r3, [r7, #8]
    if (!gintsts.d32)
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <USBH_OTG_ISR_Handler+0x30>
    {
      return 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	e068      	b.n	8002bb2 <USBH_OTG_ISR_Handler+0x102>
    }
    
    if (gintsts.b.sofintr)
 8002ae0:	7a3b      	ldrb	r3, [r7, #8]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d006      	beq.n	8002afa <USBH_OTG_ISR_Handler+0x4a>
    {
      retval |= USB_OTG_USBH_handle_sof_ISR (pdev);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f8ab 	bl	8002c48 <USB_OTG_USBH_handle_sof_ISR>
 8002af2:	4602      	mov	r2, r0
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.rxstsqlvl)
 8002afa:	7a3b      	ldrb	r3, [r7, #8]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d006      	beq.n	8002b14 <USBH_OTG_ISR_Handler+0x64>
    {
      retval |= USB_OTG_USBH_handle_rx_qlvl_ISR (pdev);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f001 f888 	bl	8003c1c <USB_OTG_USBH_handle_rx_qlvl_ISR>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.nptxfempty)
 8002b14:	7a3b      	ldrb	r3, [r7, #8]
 8002b16:	f003 0320 	and.w	r3, r3, #32
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d006      	beq.n	8002b2e <USBH_OTG_ISR_Handler+0x7e>
    {
      retval |= USB_OTG_USBH_handle_nptxfempty_ISR (pdev);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f8c5 	bl	8002cb0 <USB_OTG_USBH_handle_nptxfempty_ISR>
 8002b26:	4602      	mov	r2, r0
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.ptxfempty)
 8002b2e:	7afb      	ldrb	r3, [r7, #11]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d006      	beq.n	8002b48 <USBH_OTG_ISR_Handler+0x98>
    {
      retval |= USB_OTG_USBH_handle_ptxfempty_ISR (pdev);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f97b 	bl	8002e36 <USB_OTG_USBH_handle_ptxfempty_ISR>
 8002b40:	4602      	mov	r2, r0
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
    }    
    
    if (gintsts.b.hcintr)
 8002b48:	7afb      	ldrb	r3, [r7, #11]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d006      	beq.n	8002b62 <USBH_OTG_ISR_Handler+0xb2>
    {
      retval |= USB_OTG_USBH_handle_hc_ISR (pdev);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f830 	bl	8002bba <USB_OTG_USBH_handle_hc_ISR>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.portintr)
 8002b62:	7afb      	ldrb	r3, [r7, #11]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d006      	beq.n	8002b7c <USBH_OTG_ISR_Handler+0xcc>
    {
      retval |= USB_OTG_USBH_handle_port_ISR (pdev);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fa24 	bl	8002fbc <USB_OTG_USBH_handle_port_ISR>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.disconnect)
 8002b7c:	7afb      	ldrb	r3, [r7, #11]
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d006      	beq.n	8002b96 <USBH_OTG_ISR_Handler+0xe6>
    {
      retval |= USB_OTG_USBH_handle_Disconnect_ISR (pdev);  
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f877 	bl	8002c7c <USB_OTG_USBH_handle_Disconnect_ISR>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
      
    }
    
    if (gintsts.b.incomplisoout)
 8002b96:	7abb      	ldrb	r3, [r7, #10]
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d006      	beq.n	8002bb0 <USBH_OTG_ISR_Handler+0x100>
    {
      retval |= USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (pdev);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f001 f905 	bl	8003db2 <USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
    }
    
    
  }
  return retval;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <USB_OTG_USBH_handle_hc_ISR>:
*         This function indicates that one or more host channels has a pending
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_hc_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  USB_OTG_HAINT_TypeDef        haint;
  USB_OTG_HCCHAR_TypeDef       hcchar;
  uint32_t i = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
  uint32_t retval = 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	613b      	str	r3, [r7, #16]
  
  /* Clear appropriate bits in HCINTn to clear the interrupt bit in
  * GINTSTS */
  
  haint.d32 = USB_OTG_ReadHostAllChannels_intr(pdev);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff fb56 	bl	800227c <USB_OTG_ReadHostAllChannels_intr>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	60fb      	str	r3, [r7, #12]
  
  for (i = 0; i < pdev->cfg.host_channels ; i++)
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	e02a      	b.n	8002c30 <USB_OTG_USBH_handle_hc_ISR+0x76>
  {
    if (haint.b.chint & (1 << i))
 8002bda:	89bb      	ldrh	r3, [r7, #12]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	fa42 f303 	asr.w	r3, r2, r3
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d01e      	beq.n	8002c2a <USB_OTG_USBH_handle_hc_ISR+0x70>
    {
      hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[i]->HCCHAR);
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	3322      	adds	r3, #34	; 0x22
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60bb      	str	r3, [r7, #8]
      
      if (hcchar.b.epdir)
 8002bfc:	7a7b      	ldrb	r3, [r7, #9]
 8002bfe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <USB_OTG_USBH_handle_hc_ISR+0x60>
      {
        retval |= USB_OTG_USBH_handle_hc_n_In_ISR (pdev, i);
 8002c08:	6979      	ldr	r1, [r7, #20]
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fd2f 	bl	800366e <USB_OTG_USBH_handle_hc_n_In_ISR>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	e007      	b.n	8002c2a <USB_OTG_USBH_handle_hc_ISR+0x70>
      }
      else
      {
        retval |=  USB_OTG_USBH_handle_hc_n_Out_ISR (pdev, i);
 8002c1a:	6979      	ldr	r1, [r7, #20]
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fa7f 	bl	8003120 <USB_OTG_USBH_handle_hc_n_Out_ISR>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
  for (i = 0; i < pdev->cfg.host_channels ; i++)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d8ce      	bhi.n	8002bda <USB_OTG_USBH_handle_hc_ISR+0x20>
      }
    }
  }
  
  return retval;
 8002c3c:	693b      	ldr	r3, [r7, #16]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <USB_OTG_USBH_handle_sof_ISR>:
*         Handles the start-of-frame interrupt in host mode.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_sof_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef      gintsts;
  gintsts.d32 = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
  
  USBH_HCD_INT_fops->SOF(pdev);
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <USB_OTG_USBH_handle_sof_ISR+0x30>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.sofintr = 1;
 8002c5e:	7b3b      	ldrb	r3, [r7, #12]
 8002c60:	f043 0308 	orr.w	r3, r3, #8
 8002c64:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	615a      	str	r2, [r3, #20]
  
  return 1;
 8002c6e:	2301      	movs	r3, #1
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	2000007c 	.word	0x2000007c

08002c7c <USB_OTG_USBH_handle_Disconnect_ISR>:
*         Handles disconnect event.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_Disconnect_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef      gintsts;
  
  gintsts.d32 = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
  
  USBH_HCD_INT_fops->DevDisconnected(pdev);
 8002c88:	4b08      	ldr	r3, [pc, #32]	; (8002cac <USB_OTG_USBH_handle_Disconnect_ISR+0x30>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.disconnect = 1;
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	f043 0320 	orr.w	r3, r3, #32
 8002c98:	73fb      	strb	r3, [r7, #15]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	615a      	str	r2, [r3, #20]
  
  return 1;
 8002ca2:	2301      	movs	r3, #1
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	2000007c 	.word	0x2000007c

08002cb0 <USB_OTG_USBH_handle_nptxfempty_ISR>:
*         Handles non periodic tx fifo empty.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_nptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef      intmsk;
  USB_OTG_HNPTXSTS_TypeDef     hnptxsts; 
  uint16_t                     len_words , len; 
  
  hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	60fb      	str	r3, [r7, #12]
  
  len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
 8002cc0:	7c3b      	ldrb	r3, [r7, #16]
 8002cc2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	015b      	lsls	r3, r3, #5
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3303      	adds	r3, #3
 8002cd6:	089b      	lsrs	r3, r3, #2
 8002cd8:	83fb      	strh	r3, [r7, #30]
  
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 8002cda:	e096      	b.n	8002e0a <USB_OTG_USBH_handle_nptxfempty_ISR+0x15a>
         (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len != 0))
  {
    
    len = hnptxsts.b.nptxfspcavail * 4;
 8002cdc:	89bb      	ldrh	r3, [r7, #12]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	83bb      	strh	r3, [r7, #28]
    
    if (len > pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len)
 8002ce2:	8bba      	ldrh	r2, [r7, #28]
 8002ce4:	7c3b      	ldrb	r3, [r7, #16]
 8002ce6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	015b      	lsls	r3, r3, #5
 8002cf0:	440b      	add	r3, r1
 8002cf2:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d919      	bls.n	8002d30 <USB_OTG_USBH_handle_nptxfempty_ISR+0x80>
    {
      /* Last packet */
      len = pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len;
 8002cfc:	7c3b      	ldrb	r3, [r7, #16]
 8002cfe:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	015b      	lsls	r3, r3, #5
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	83bb      	strh	r3, [r7, #28]
      
      intmsk.d32 = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61bb      	str	r3, [r7, #24]
      intmsk.b.nptxfempty = 1;
 8002d16:	7e3b      	ldrb	r3, [r7, #24]
 8002d18:	f043 0320 	orr.w	r3, r3, #32
 8002d1c:	763b      	strb	r3, [r7, #24]
      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);       
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	68d2      	ldr	r2, [r2, #12]
 8002d26:	6991      	ldr	r1, [r2, #24]
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	43d2      	mvns	r2, r2
 8002d2c:	400a      	ands	r2, r1
 8002d2e:	619a      	str	r2, [r3, #24]
    }
    
    len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
 8002d30:	7c3b      	ldrb	r3, [r7, #16]
 8002d32:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	015b      	lsls	r3, r3, #5
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	3303      	adds	r3, #3
 8002d46:	089b      	lsrs	r3, r3, #2
 8002d48:	83fb      	strh	r3, [r7, #30]
    
    USB_OTG_WritePacket (pdev , pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_buff, hnptxsts.b.nptxqtop.chnum, len);
 8002d4a:	7c3b      	ldrb	r3, [r7, #16]
 8002d4c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	3315      	adds	r3, #21
 8002d56:	015b      	lsls	r3, r3, #5
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002d5e:	6819      	ldr	r1, [r3, #0]
 8002d60:	7c3b      	ldrb	r3, [r7, #16]
 8002d62:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	8bbb      	ldrh	r3, [r7, #28]
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7fe fe77 	bl	8001a60 <USB_OTG_WritePacket>
    
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_buff  += len;
 8002d72:	7c3b      	ldrb	r3, [r7, #16]
 8002d74:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	7c3b      	ldrb	r3, [r7, #16]
 8002d7e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	3315      	adds	r3, #21
 8002d88:	015b      	lsls	r3, r3, #5
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	8bbb      	ldrh	r3, [r7, #28]
 8002d94:	441a      	add	r2, r3
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	f100 0315 	add.w	r3, r0, #21
 8002d9c:	015b      	lsls	r3, r3, #5
 8002d9e:	440b      	add	r3, r1
 8002da0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002da4:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len   -= len;
 8002da6:	7c3b      	ldrb	r3, [r7, #16]
 8002da8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	4618      	mov	r0, r3
 8002db0:	7c3b      	ldrb	r3, [r7, #16]
 8002db2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	015b      	lsls	r3, r3, #5
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	8bbb      	ldrh	r3, [r7, #28]
 8002dc6:	1ad2      	subs	r2, r2, r3
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	0143      	lsls	r3, r0, #5
 8002dcc:	440b      	add	r3, r1
 8002dce:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002dd2:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_count  += len; 
 8002dd4:	7c3b      	ldrb	r3, [r7, #16]
 8002dd6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	4618      	mov	r0, r3
 8002dde:	7c3b      	ldrb	r3, [r7, #16]
 8002de0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	015b      	lsls	r3, r3, #5
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	8bbb      	ldrh	r3, [r7, #28]
 8002df4:	441a      	add	r2, r3
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	0143      	lsls	r3, r0, #5
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8002e00:	601a      	str	r2, [r3, #0]
    
    hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	60fb      	str	r3, [r7, #12]
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 8002e0a:	89bb      	ldrh	r3, [r7, #12]
 8002e0c:	8bfa      	ldrh	r2, [r7, #30]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d20c      	bcs.n	8002e2c <USB_OTG_USBH_handle_nptxfempty_ISR+0x17c>
         (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len != 0))
 8002e12:	7c3b      	ldrb	r3, [r7, #16]
 8002e14:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	015b      	lsls	r3, r3, #5
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002e24:	681b      	ldr	r3, [r3, #0]
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f47f af58 	bne.w	8002cdc <USB_OTG_USBH_handle_nptxfempty_ISR+0x2c>
  }  
  
  return 1;
 8002e2c:	2301      	movs	r3, #1
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3720      	adds	r7, #32
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <USB_OTG_USBH_handle_ptxfempty_ISR>:
*         Handles periodic tx fifo empty
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_ptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b086      	sub	sp, #24
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef      intmsk;
  USB_OTG_HPTXSTS_TypeDef      hptxsts; 
  uint16_t                     len_words , len; 
  
  hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	60bb      	str	r3, [r7, #8]
  
  len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
 8002e46:	7b3b      	ldrb	r3, [r7, #12]
 8002e48:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	015b      	lsls	r3, r3, #5
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3303      	adds	r3, #3
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	82fb      	strh	r3, [r7, #22]
  
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 8002e60:	e096      	b.n	8002f90 <USB_OTG_USBH_handle_ptxfempty_ISR+0x15a>
         (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len != 0))    
  {
    
    len = hptxsts.b.ptxfspcavail * 4;
 8002e62:	893b      	ldrh	r3, [r7, #8]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	82bb      	strh	r3, [r7, #20]
    
    if (len > pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len)
 8002e68:	8aba      	ldrh	r2, [r7, #20]
 8002e6a:	7b3b      	ldrb	r3, [r7, #12]
 8002e6c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	015b      	lsls	r3, r3, #5
 8002e76:	440b      	add	r3, r1
 8002e78:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d919      	bls.n	8002eb6 <USB_OTG_USBH_handle_ptxfempty_ISR+0x80>
    {
      len = pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len;
 8002e82:	7b3b      	ldrb	r3, [r7, #12]
 8002e84:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	015b      	lsls	r3, r3, #5
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	82bb      	strh	r3, [r7, #20]
      /* Last packet */
      intmsk.d32 = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	613b      	str	r3, [r7, #16]
      intmsk.b.ptxfempty = 1;
 8002e9c:	7cfb      	ldrb	r3, [r7, #19]
 8002e9e:	f043 0304 	orr.w	r3, r3, #4
 8002ea2:	74fb      	strb	r3, [r7, #19]
      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0); 
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	68d2      	ldr	r2, [r2, #12]
 8002eac:	6991      	ldr	r1, [r2, #24]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	43d2      	mvns	r2, r2
 8002eb2:	400a      	ands	r2, r1
 8002eb4:	619a      	str	r2, [r3, #24]
    }
    
    len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
 8002eb6:	7b3b      	ldrb	r3, [r7, #12]
 8002eb8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	015b      	lsls	r3, r3, #5
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	3303      	adds	r3, #3
 8002ecc:	089b      	lsrs	r3, r3, #2
 8002ece:	82fb      	strh	r3, [r7, #22]
    
    USB_OTG_WritePacket (pdev , pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_buff, hptxsts.b.ptxqtop.chnum, len);
 8002ed0:	7b3b      	ldrb	r3, [r7, #12]
 8002ed2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	3315      	adds	r3, #21
 8002edc:	015b      	lsls	r3, r3, #5
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002ee4:	6819      	ldr	r1, [r3, #0]
 8002ee6:	7b3b      	ldrb	r3, [r7, #12]
 8002ee8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	8abb      	ldrh	r3, [r7, #20]
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fe fdb4 	bl	8001a60 <USB_OTG_WritePacket>
    
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_buff  += len;
 8002ef8:	7b3b      	ldrb	r3, [r7, #12]
 8002efa:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	4618      	mov	r0, r3
 8002f02:	7b3b      	ldrb	r3, [r7, #12]
 8002f04:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	3315      	adds	r3, #21
 8002f0e:	015b      	lsls	r3, r3, #5
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	8abb      	ldrh	r3, [r7, #20]
 8002f1a:	441a      	add	r2, r3
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	f100 0315 	add.w	r3, r0, #21
 8002f22:	015b      	lsls	r3, r3, #5
 8002f24:	440b      	add	r3, r1
 8002f26:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002f2a:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len   -= len;
 8002f2c:	7b3b      	ldrb	r3, [r7, #12]
 8002f2e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	4618      	mov	r0, r3
 8002f36:	7b3b      	ldrb	r3, [r7, #12]
 8002f38:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	015b      	lsls	r3, r3, #5
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	8abb      	ldrh	r3, [r7, #20]
 8002f4c:	1ad2      	subs	r2, r2, r3
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	0143      	lsls	r3, r0, #5
 8002f52:	440b      	add	r3, r1
 8002f54:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002f58:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_count  += len; 
 8002f5a:	7b3b      	ldrb	r3, [r7, #12]
 8002f5c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	4618      	mov	r0, r3
 8002f64:	7b3b      	ldrb	r3, [r7, #12]
 8002f66:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	015b      	lsls	r3, r3, #5
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	8abb      	ldrh	r3, [r7, #20]
 8002f7a:	441a      	add	r2, r3
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	0143      	lsls	r3, r0, #5
 8002f80:	440b      	add	r3, r1
 8002f82:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8002f86:	601a      	str	r2, [r3, #0]
    
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	60bb      	str	r3, [r7, #8]
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 8002f90:	893b      	ldrh	r3, [r7, #8]
 8002f92:	8afa      	ldrh	r2, [r7, #22]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d20c      	bcs.n	8002fb2 <USB_OTG_USBH_handle_ptxfempty_ISR+0x17c>
         (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len != 0))    
 8002f98:	7b3b      	ldrb	r3, [r7, #12]
 8002f9a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	015b      	lsls	r3, r3, #5
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002faa:	681b      	ldr	r3, [r3, #0]
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f47f af58 	bne.w	8002e62 <USB_OTG_USBH_handle_ptxfempty_ISR+0x2c>
  }  
  
  return 1;
 8002fb2:	2301      	movs	r3, #1
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <USB_OTG_USBH_handle_port_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_port_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  USB_OTG_HPRT0_TypeDef  hprt0;
  USB_OTG_HPRT0_TypeDef  hprt0_dup;
  USB_OTG_HCFG_TypeDef   hcfg;    
  uint32_t do_reset = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61fb      	str	r3, [r7, #28]
  uint32_t retval = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61bb      	str	r3, [r7, #24]
  
  hcfg.d32 = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]
  hprt0.d32 = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
  hprt0_dup.d32 = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	613b      	str	r3, [r7, #16]
  
  hprt0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	617b      	str	r3, [r7, #20]
  hprt0_dup.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	613b      	str	r3, [r7, #16]
  
  /* Clear the interrupt bits in GINTSTS */
  
  hprt0_dup.b.prtena = 0;
 8002fec:	7c3b      	ldrb	r3, [r7, #16]
 8002fee:	f36f 0382 	bfc	r3, #2, #1
 8002ff2:	743b      	strb	r3, [r7, #16]
  hprt0_dup.b.prtconndet = 0;
 8002ff4:	7c3b      	ldrb	r3, [r7, #16]
 8002ff6:	f36f 0341 	bfc	r3, #1, #1
 8002ffa:	743b      	strb	r3, [r7, #16]
  hprt0_dup.b.prtenchng = 0;
 8002ffc:	7c3b      	ldrb	r3, [r7, #16]
 8002ffe:	f36f 03c3 	bfc	r3, #3, #1
 8003002:	743b      	strb	r3, [r7, #16]
  hprt0_dup.b.prtovrcurrchng = 0;
 8003004:	7c3b      	ldrb	r3, [r7, #16]
 8003006:	f36f 1345 	bfc	r3, #5, #1
 800300a:	743b      	strb	r3, [r7, #16]
  
  /* Port Connect Detected */
  if (hprt0.b.prtconndet)
 800300c:	7d3b      	ldrb	r3, [r7, #20]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00c      	beq.n	8003032 <USB_OTG_USBH_handle_port_ISR+0x76>
  {

    hprt0_dup.b.prtconndet = 1;
 8003018:	7c3b      	ldrb	r3, [r7, #16]
 800301a:	f043 0302 	orr.w	r3, r3, #2
 800301e:	743b      	strb	r3, [r7, #16]
    USBH_HCD_INT_fops->DevConnected(pdev);
 8003020:	4b3e      	ldr	r3, [pc, #248]	; (800311c <USB_OTG_USBH_handle_port_ISR+0x160>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	4798      	blx	r3
    retval |= 1;
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	61bb      	str	r3, [r7, #24]
  }
  
  /* Port Enable Changed */
  if (hprt0.b.prtenchng)
 8003032:	7d3b      	ldrb	r3, [r7, #20]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d050      	beq.n	80030e0 <USB_OTG_USBH_handle_port_ISR+0x124>
  {
    hprt0_dup.b.prtenchng = 1;
 800303e:	7c3b      	ldrb	r3, [r7, #16]
 8003040:	f043 0308 	orr.w	r3, r3, #8
 8003044:	743b      	strb	r3, [r7, #16]
    
    if (hprt0.b.prtena == 1)
 8003046:	7d3b      	ldrb	r3, [r7, #20]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d046      	beq.n	80030e0 <USB_OTG_USBH_handle_port_ISR+0x124>
    {
      
      USBH_HCD_INT_fops->DevConnected(pdev);
 8003052:	4b32      	ldr	r3, [pc, #200]	; (800311c <USB_OTG_USBH_handle_port_ISR+0x160>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	4798      	blx	r3
      
      if ((hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED) ||
 800305c:	7dbb      	ldrb	r3, [r7, #22]
 800305e:	f003 0306 	and.w	r3, r3, #6
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b04      	cmp	r3, #4
 8003066:	d005      	beq.n	8003074 <USB_OTG_USBH_handle_port_ISR+0xb8>
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
 8003068:	7dbb      	ldrb	r3, [r7, #22]
 800306a:	f003 0306 	and.w	r3, r3, #6
 800306e:	b2db      	uxtb	r3, r3
      if ((hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED) ||
 8003070:	2b02      	cmp	r3, #2
 8003072:	d131      	bne.n	80030d8 <USB_OTG_USBH_handle_port_ISR+0x11c>
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60fb      	str	r3, [r7, #12]
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 800307c:	7dbb      	ldrb	r3, [r7, #22]
 800307e:	f003 0306 	and.w	r3, r3, #6
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b04      	cmp	r3, #4
 8003086:	d115      	bne.n	80030b4 <USB_OTG_USBH_handle_port_ISR+0xf8>
        {
          USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 6000 );
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	f241 7270 	movw	r2, #6000	; 0x1770
 8003090:	605a      	str	r2, [r3, #4]
          if (hcfg.b.fslspclksel != HCFG_6_MHZ)
 8003092:	7b3b      	ldrb	r3, [r7, #12]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d01f      	beq.n	80030de <USB_OTG_USBH_handle_port_ISR+0x122>
          {
            if(pdev->cfg.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	7a1b      	ldrb	r3, [r3, #8]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d103      	bne.n	80030ae <USB_OTG_USBH_handle_port_ISR+0xf2>
            {
              USB_OTG_InitFSLSPClkSel(pdev ,HCFG_6_MHZ );
 80030a6:	2102      	movs	r1, #2
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff f8ab 	bl	8002204 <USB_OTG_InitFSLSPClkSel>
            }
            do_reset = 1;
 80030ae:	2301      	movs	r3, #1
 80030b0:	61fb      	str	r3, [r7, #28]
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 80030b2:	e014      	b.n	80030de <USB_OTG_USBH_handle_port_ISR+0x122>
          }
        }
        else
        {
          
          USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 48000 );            
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80030bc:	605a      	str	r2, [r3, #4]
          if (hcfg.b.fslspclksel != HCFG_48_MHZ)
 80030be:	7b3b      	ldrb	r3, [r7, #12]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d009      	beq.n	80030de <USB_OTG_USBH_handle_port_ISR+0x122>
          {
            USB_OTG_InitFSLSPClkSel(pdev ,HCFG_48_MHZ );
 80030ca:	2101      	movs	r1, #1
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff f899 	bl	8002204 <USB_OTG_InitFSLSPClkSel>
            do_reset = 1;
 80030d2:	2301      	movs	r3, #1
 80030d4:	61fb      	str	r3, [r7, #28]
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 80030d6:	e002      	b.n	80030de <USB_OTG_USBH_handle_port_ISR+0x122>
          }
        }
      }
      else
      {
        do_reset = 1;
 80030d8:	2301      	movs	r3, #1
 80030da:	61fb      	str	r3, [r7, #28]
 80030dc:	e000      	b.n	80030e0 <USB_OTG_USBH_handle_port_ISR+0x124>
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 80030de:	bf00      	nop
      }
    }
  }
  /* Overcurrent Change Interrupt */
  if (hprt0.b.prtovrcurrchng)
 80030e0:	7d3b      	ldrb	r3, [r7, #20]
 80030e2:	f003 0320 	and.w	r3, r3, #32
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d007      	beq.n	80030fc <USB_OTG_USBH_handle_port_ISR+0x140>
  {
    hprt0_dup.b.prtovrcurrchng = 1;
 80030ec:	7c3b      	ldrb	r3, [r7, #16]
 80030ee:	f043 0320 	orr.w	r3, r3, #32
 80030f2:	743b      	strb	r3, [r7, #16]
    retval |= 1;
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	61bb      	str	r3, [r7, #24]
  }
  if (do_reset)
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <USB_OTG_USBH_handle_port_ISR+0x14c>
  {
    USB_OTG_ResetPort(pdev);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff f8c7 	bl	8002296 <USB_OTG_ResetPort>
  }
  /* Clear Port Interrupts */
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0_dup.d32);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	601a      	str	r2, [r3, #0]
  
  return retval;
 8003112:	69bb      	ldr	r3, [r7, #24]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3720      	adds	r7, #32
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	2000007c 	.word	0x2000007c

08003120 <USB_OTG_USBH_handle_hc_n_Out_ISR>:
* @param  pdev: Selected device
* @param  hc_num: Channel number
* @retval status 
*/
uint32_t USB_OTG_USBH_handle_hc_n_Out_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b09a      	sub	sp, #104	; 0x68
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  USB_OTG_HCINTn_TypeDef     hcint;
  USB_OTG_HCINTMSK_TypeDef  hcintmsk;
  USB_OTG_HC_REGS *hcreg;
  USB_OTG_HCCHAR_TypeDef     hcchar; 
  
  hcreg = pdev->regs.HC_REGS[num];
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	3322      	adds	r3, #34	; 0x22
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	667b      	str	r3, [r7, #100]	; 0x64
  hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
 8003138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	663b      	str	r3, [r7, #96]	; 0x60
  hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCINTMSK);
 800313e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	65fb      	str	r3, [r7, #92]	; 0x5c
  hcint.d32 = hcint.d32 & hcintmsk.d32;
 8003144:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003148:	4013      	ands	r3, r2
 800314a:	663b      	str	r3, [r7, #96]	; 0x60
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	3322      	adds	r3, #34	; 0x22
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	65bb      	str	r3, [r7, #88]	; 0x58
  
  if (hcint.b.ahberr)
 800315c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d021      	beq.n	80031ae <USB_OTG_USBH_handle_hc_n_Out_ISR+0x8e>
  {
    CLEAR_HC_INT(hcreg ,ahberr);
 800316a:	2300      	movs	r3, #0
 800316c:	657b      	str	r3, [r7, #84]	; 0x54
 800316e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8003172:	f043 0304 	orr.w	r3, r3, #4
 8003176:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800317a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800317c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800317e:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	3322      	adds	r3, #34	; 0x22
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	653b      	str	r3, [r7, #80]	; 0x50
 8003190:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003194:	f043 0302 	orr.w	r3, r3, #2
 8003198:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	3322      	adds	r3, #34	; 0x22
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80031aa:	60da      	str	r2, [r3, #12]
 80031ac:	e25a      	b.n	8003664 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  } 
  else if (hcint.b.ack)
 80031ae:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00b      	beq.n	80031d4 <USB_OTG_USBH_handle_hc_n_Out_ISR+0xb4>
  {
    CLEAR_HC_INT(hcreg , ack);
 80031bc:	2300      	movs	r3, #0
 80031be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031c0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80031c4:	f043 0320 	orr.w	r3, r3, #32
 80031c8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80031cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031d0:	609a      	str	r2, [r3, #8]
 80031d2:	e247      	b.n	8003664 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }
  else if (hcint.b.frmovrun)
 80031d4:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d027      	beq.n	8003232 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x112>
  {
    UNMASK_HOST_INT_CHH (num);
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	3322      	adds	r3, #34	; 0x22
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80031f2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80031f6:	f043 0302 	orr.w	r3, r3, #2
 80031fa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	3322      	adds	r3, #34	; 0x22
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800320c:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	4619      	mov	r1, r3
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fb11 	bl	800283c <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg ,frmovrun);
 800321a:	2300      	movs	r3, #0
 800321c:	647b      	str	r3, [r7, #68]	; 0x44
 800321e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003222:	f043 0302 	orr.w	r3, r3, #2
 8003226:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800322a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800322c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	e218      	b.n	8003664 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }
  else if (hcint.b.xfercompl)
 8003232:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d035      	beq.n	80032ac <USB_OTG_USBH_handle_hc_n_Out_ISR+0x18c>
  {
    pdev->host.ErrCnt[num] = 0;
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	33c4      	adds	r3, #196	; 0xc4
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	2200      	movs	r2, #0
 800324c:	605a      	str	r2, [r3, #4]
    UNMASK_HOST_INT_CHH (num);
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	3322      	adds	r3, #34	; 0x22
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	643b      	str	r3, [r7, #64]	; 0x40
 800325e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003262:	f043 0302 	orr.w	r3, r3, #2
 8003266:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	3322      	adds	r3, #34	; 0x22
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003278:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	4619      	mov	r1, r3
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff fadb 	bl	800283c <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , xfercompl);
 8003286:	2300      	movs	r3, #0
 8003288:	63fb      	str	r3, [r7, #60]	; 0x3c
 800328a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8003296:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800329a:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_XFRC;            
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	e1db      	b.n	8003664 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }
  
  else if (hcint.b.stall)
 80032ac:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d02e      	beq.n	8003318 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x1f8>
  {
    CLEAR_HC_INT(hcreg , stall);
 80032ba:	2300      	movs	r3, #0
 80032bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80032be:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80032c2:	f043 0308 	orr.w	r3, r3, #8
 80032c6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80032ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032ce:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	3322      	adds	r3, #34	; 0x22
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	637b      	str	r3, [r7, #52]	; 0x34
 80032e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80032e4:	f043 0302 	orr.w	r3, r3, #2
 80032e8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	3322      	adds	r3, #34	; 0x22
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032fa:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	4619      	mov	r1, r3
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff fa9a 	bl	800283c <USB_OTG_HC_Halt>
    pdev->host.HC_Status[num] = HC_STALL;      
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	4413      	add	r3, r2
 800330e:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8003312:	2205      	movs	r2, #5
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	e1a5      	b.n	8003664 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }
  
  else if (hcint.b.nak)
 8003318:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d035      	beq.n	8003392 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x272>
  {
    pdev->host.ErrCnt[num] = 0;
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	33c4      	adds	r3, #196	; 0xc4
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	2200      	movs	r2, #0
 8003332:	605a      	str	r2, [r3, #4]
    UNMASK_HOST_INT_CHH (num);
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	3322      	adds	r3, #34	; 0x22
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	633b      	str	r3, [r7, #48]	; 0x30
 8003344:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003348:	f043 0302 	orr.w	r3, r3, #2
 800334c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	3322      	adds	r3, #34	; 0x22
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800335e:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	4619      	mov	r1, r3
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff fa68 	bl	800283c <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);
 800336c:	2300      	movs	r3, #0
 800336e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003370:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003374:	f043 0310 	orr.w	r3, r3, #16
 8003378:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800337c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800337e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003380:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_NAK;      
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	4413      	add	r3, r2
 8003388:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 800338c:	2203      	movs	r2, #3
 800338e:	701a      	strb	r2, [r3, #0]
 8003390:	e168      	b.n	8003664 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }
  
  else if (hcint.b.xacterr)
 8003392:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8003396:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d03b      	beq.n	8003418 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x2f8>
  {
    UNMASK_HOST_INT_CHH (num);
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	3322      	adds	r3, #34	; 0x22
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80033b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80033b4:	f043 0302 	orr.w	r3, r3, #2
 80033b8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	3322      	adds	r3, #34	; 0x22
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033ca:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	4619      	mov	r1, r3
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff fa32 	bl	800283c <USB_OTG_HC_Halt>
    pdev->host.ErrCnt[num] ++;
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	33c4      	adds	r3, #196	; 0xc4
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	33c4      	adds	r3, #196	; 0xc4
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	605a      	str	r2, [r3, #4]
    pdev->host.HC_Status[num] = HC_XACTERR;
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 80033fc:	2206      	movs	r2, #6
 80033fe:	701a      	strb	r2, [r3, #0]
    CLEAR_HC_INT(hcreg , xacterr);
 8003400:	2300      	movs	r3, #0
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
 8003404:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800340c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8003410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003412:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003414:	609a      	str	r2, [r3, #8]
 8003416:	e125      	b.n	8003664 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }
  else if (hcint.b.nyet)
 8003418:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800341c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d033      	beq.n	800348e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x36e>
  {
    pdev->host.ErrCnt[num] = 0;
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	33c4      	adds	r3, #196	; 0xc4
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	2200      	movs	r2, #0
 8003432:	605a      	str	r2, [r3, #4]
    UNMASK_HOST_INT_CHH (num);
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	3322      	adds	r3, #34	; 0x22
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	623b      	str	r3, [r7, #32]
 8003444:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003448:	f043 0302 	orr.w	r3, r3, #2
 800344c:	f887 3020 	strb.w	r3, [r7, #32]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	3322      	adds	r3, #34	; 0x22
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	6a3a      	ldr	r2, [r7, #32]
 800345e:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	4619      	mov	r1, r3
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff f9e8 	bl	800283c <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nyet);
 800346c:	2300      	movs	r3, #0
 800346e:	61fb      	str	r3, [r7, #28]
 8003470:	7f3b      	ldrb	r3, [r7, #28]
 8003472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003476:	773b      	strb	r3, [r7, #28]
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800347c:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_NYET;    
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	4413      	add	r3, r2
 8003484:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8003488:	2204      	movs	r2, #4
 800348a:	701a      	strb	r2, [r3, #0]
 800348c:	e0ea      	b.n	8003664 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }
  else if (hcint.b.datatglerr)
 800348e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d033      	beq.n	8003504 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x3e4>
  {
    
    UNMASK_HOST_INT_CHH (num);
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	3322      	adds	r3, #34	; 0x22
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	61bb      	str	r3, [r7, #24]
 80034ac:	7e3b      	ldrb	r3, [r7, #24]
 80034ae:	f043 0302 	orr.w	r3, r3, #2
 80034b2:	763b      	strb	r3, [r7, #24]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	3322      	adds	r3, #34	; 0x22
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff f9b6 	bl	800283c <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);   
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	7d3b      	ldrb	r3, [r7, #20]
 80034d6:	f043 0310 	orr.w	r3, r3, #16
 80034da:	753b      	strb	r3, [r7, #20]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034e0:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_DATATGLERR;
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 80034ec:	2208      	movs	r2, #8
 80034ee:	701a      	strb	r2, [r3, #0]
    
    CLEAR_HC_INT(hcreg , datatglerr);
 80034f0:	2300      	movs	r3, #0
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	7c7b      	ldrb	r3, [r7, #17]
 80034f6:	f043 0304 	orr.w	r3, r3, #4
 80034fa:	747b      	strb	r3, [r7, #17]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003500:	609a      	str	r2, [r3, #8]
 8003502:	e0af      	b.n	8003664 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  }  
  else if (hcint.b.chhltd)
 8003504:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 80a8 	beq.w	8003664 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x544>
  {
    MASK_HOST_INT_CHH (num);
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	3322      	adds	r3, #34	; 0x22
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	7b3b      	ldrb	r3, [r7, #12]
 8003526:	f36f 0341 	bfc	r3, #1, #1
 800352a:	733b      	strb	r3, [r7, #12]
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	3322      	adds	r3, #34	; 0x22
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	60da      	str	r2, [r3, #12]
    
    if(pdev->host.HC_Status[num] == HC_XFRC)
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	4413      	add	r3, r2
 8003542:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b01      	cmp	r3, #1
 800354c:	d120      	bne.n	8003590 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x470>
    {
      pdev->host.URB_State[num] = URB_DONE;  
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	4413      	add	r3, r2
 8003554:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8003558:	2201      	movs	r2, #1
 800355a:	701a      	strb	r2, [r3, #0]
      
      if (hcchar.b.eptype == EP_TYPE_BULK)
 800355c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8003560:	f003 030c 	and.w	r3, r3, #12
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b08      	cmp	r3, #8
 8003568:	d173      	bne.n	8003652 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x532>
      {
        pdev->host.hc[num].toggle_out ^= 1; 
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	331e      	adds	r3, #30
 8003570:	015b      	lsls	r3, r3, #5
 8003572:	4413      	add	r3, r2
 8003574:	3305      	adds	r3, #5
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	f083 0301 	eor.w	r3, r3, #1
 800357c:	b2d9      	uxtb	r1, r3
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	331e      	adds	r3, #30
 8003584:	015b      	lsls	r3, r3, #5
 8003586:	4413      	add	r3, r2
 8003588:	3305      	adds	r3, #5
 800358a:	460a      	mov	r2, r1
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	e060      	b.n	8003652 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x532>
      }
    }
    else if(pdev->host.HC_Status[num] == HC_NAK)
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	4413      	add	r3, r2
 8003596:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d107      	bne.n	80035b2 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x492>
    {
      pdev->host.URB_State[num] = URB_NOTREADY;      
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	4413      	add	r3, r2
 80035a8:	f203 339b 	addw	r3, r3, #923	; 0x39b
 80035ac:	2202      	movs	r2, #2
 80035ae:	701a      	strb	r2, [r3, #0]
 80035b0:	e04f      	b.n	8003652 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x532>
    }    
    else if(pdev->host.HC_Status[num] == HC_NYET)
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d116      	bne.n	80035f2 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4d2>
    {
      if(pdev->host.hc[num].do_ping == 1)
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	015b      	lsls	r3, r3, #5
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d105      	bne.n	80035e2 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4c2>
      {
        USB_OTG_HC_DoPing(pdev, num);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	4619      	mov	r1, r3
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff f97d 	bl	80028dc <USB_OTG_HC_DoPing>
      }
      pdev->host.URB_State[num] = URB_NOTREADY;      
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	4413      	add	r3, r2
 80035e8:	f203 339b 	addw	r3, r3, #923	; 0x39b
 80035ec:	2202      	movs	r2, #2
 80035ee:	701a      	strb	r2, [r3, #0]
 80035f0:	e02f      	b.n	8003652 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x532>
    }      
    else if(pdev->host.HC_Status[num] == HC_STALL)
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b05      	cmp	r3, #5
 8003602:	d107      	bne.n	8003614 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4f4>
    {
      pdev->host.URB_State[num] = URB_STALL;      
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	4413      	add	r3, r2
 800360a:	f203 339b 	addw	r3, r3, #923	; 0x39b
 800360e:	2204      	movs	r2, #4
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	e01e      	b.n	8003652 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x532>
    }  
    else if(pdev->host.HC_Status[num] == HC_XACTERR)
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	4413      	add	r3, r2
 800361a:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b06      	cmp	r3, #6
 8003624:	d115      	bne.n	8003652 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x532>
    {
      if (pdev->host.ErrCnt[num] == 3)
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	33c4      	adds	r3, #196	; 0xc4
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b03      	cmp	r3, #3
 8003634:	d10d      	bne.n	8003652 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x532>
      {
        pdev->host.URB_State[num] = URB_ERROR;  
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	4413      	add	r3, r2
 800363c:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8003640:	2203      	movs	r2, #3
 8003642:	701a      	strb	r2, [r3, #0]
        pdev->host.ErrCnt[num] = 0;
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	33c4      	adds	r3, #196	; 0xc4
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	2200      	movs	r2, #0
 8003650:	605a      	str	r2, [r3, #4]
      }
    }
    CLEAR_HC_INT(hcreg , chhltd);    
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	7a3b      	ldrb	r3, [r7, #8]
 8003658:	f043 0302 	orr.w	r3, r3, #2
 800365c:	723b      	strb	r3, [r7, #8]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003662:	609a      	str	r2, [r3, #8]
  }
  
  
  return 1;
 8003664:	2301      	movs	r3, #1
}
 8003666:	4618      	mov	r0, r3
 8003668:	3768      	adds	r7, #104	; 0x68
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <USB_OTG_USBH_handle_hc_n_In_ISR>:
* @param  pdev: Selected device
* @param  hc_num: Channel number
* @retval status 
*/
uint32_t USB_OTG_USBH_handle_hc_n_In_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b09c      	sub	sp, #112	; 0x70
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
  USB_OTG_HCCHAR_TypeDef     hcchar; 
  USB_OTG_HCTSIZn_TypeDef  hctsiz;
  USB_OTG_HC_REGS *hcreg;
  
  
  hcreg = pdev->regs.HC_REGS[num];
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	3322      	adds	r3, #34	; 0x22
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	66fb      	str	r3, [r7, #108]	; 0x6c
  hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
 8003686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	66bb      	str	r3, [r7, #104]	; 0x68
  hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCINTMSK);
 800368c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	667b      	str	r3, [r7, #100]	; 0x64
  hcint.d32 = hcint.d32 & hcintmsk.d32;
 8003692:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003696:	4013      	ands	r3, r2
 8003698:	66bb      	str	r3, [r7, #104]	; 0x68
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	3322      	adds	r3, #34	; 0x22
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	663b      	str	r3, [r7, #96]	; 0x60
  hcintmsk.d32 = 0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	667b      	str	r3, [r7, #100]	; 0x64
  
  
  if (hcint.b.ahberr)
 80036ae:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d021      	beq.n	8003700 <USB_OTG_USBH_handle_hc_n_In_ISR+0x92>
  {
    CLEAR_HC_INT(hcreg ,ahberr);
 80036bc:	2300      	movs	r3, #0
 80036be:	65bb      	str	r3, [r7, #88]	; 0x58
 80036c0:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80036c4:	f043 0304 	orr.w	r3, r3, #4
 80036c8:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 80036cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d0:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	3322      	adds	r3, #34	; 0x22
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	657b      	str	r3, [r7, #84]	; 0x54
 80036e2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80036e6:	f043 0302 	orr.w	r3, r3, #2
 80036ea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	3322      	adds	r3, #34	; 0x22
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036fc:	60da      	str	r2, [r3, #12]
 80036fe:	e099      	b.n	8003834 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1c6>
  }  
  else if (hcint.b.ack)
 8003700:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00b      	beq.n	8003726 <USB_OTG_USBH_handle_hc_n_In_ISR+0xb8>
  {
    CLEAR_HC_INT(hcreg ,ack);
 800370e:	2300      	movs	r3, #0
 8003710:	653b      	str	r3, [r7, #80]	; 0x50
 8003712:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003716:	f043 0320 	orr.w	r3, r3, #32
 800371a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800371e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	e086      	b.n	8003834 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1c6>
  }
  
  else if (hcint.b.stall)  
 8003726:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d03f      	beq.n	80037b4 <USB_OTG_USBH_handle_hc_n_In_ISR+0x146>
  {
    UNMASK_HOST_INT_CHH (num);
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	3322      	adds	r3, #34	; 0x22
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003744:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003748:	f043 0302 	orr.w	r3, r3, #2
 800374c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	3322      	adds	r3, #34	; 0x22
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800375e:	60da      	str	r2, [r3, #12]
    pdev->host.HC_Status[num] = HC_STALL; 
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	4413      	add	r3, r2
 8003766:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 800376a:	2205      	movs	r2, #5
 800376c:	701a      	strb	r2, [r3, #0]
    CLEAR_HC_INT(hcreg , nak);   /* Clear the NAK Condition */
 800376e:	2300      	movs	r3, #0
 8003770:	64bb      	str	r3, [r7, #72]	; 0x48
 8003772:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003776:	f043 0310 	orr.w	r3, r3, #16
 800377a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 800377e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003782:	609a      	str	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , stall); /* Clear the STALL Condition */
 8003784:	2300      	movs	r3, #0
 8003786:	647b      	str	r3, [r7, #68]	; 0x44
 8003788:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800378c:	f043 0308 	orr.w	r3, r3, #8
 8003790:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8003794:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003798:	609a      	str	r2, [r3, #8]
    hcint.b.nak = 0;           /* NOTE: When there is a 'stall', reset also nak, 
 800379a:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800379e:	f36f 1304 	bfc	r3, #4, #1
 80037a2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                                  else, the pdev->host.HC_Status = HC_STALL
    will be overwritten by 'nak' in code below */
    USB_OTG_HC_Halt(pdev, num);    
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	4619      	mov	r1, r3
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff f845 	bl	800283c <USB_OTG_HC_Halt>
 80037b2:	e03f      	b.n	8003834 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1c6>
  }
  else if (hcint.b.datatglerr)
 80037b4:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d038      	beq.n	8003834 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1c6>
  {
    
    UNMASK_HOST_INT_CHH (num);
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	3322      	adds	r3, #34	; 0x22
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	643b      	str	r3, [r7, #64]	; 0x40
 80037d2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80037d6:	f043 0302 	orr.w	r3, r3, #2
 80037da:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	3322      	adds	r3, #34	; 0x22
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037ec:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	4619      	mov	r1, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff f821 	bl	800283c <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);   
 80037fa:	2300      	movs	r3, #0
 80037fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037fe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003802:	f043 0310 	orr.w	r3, r3, #16
 8003806:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800380a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800380c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380e:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_DATATGLERR; 
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	4413      	add	r3, r2
 8003816:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 800381a:	2208      	movs	r2, #8
 800381c:	701a      	strb	r2, [r3, #0]
    CLEAR_HC_INT(hcreg , datatglerr);
 800381e:	2300      	movs	r3, #0
 8003820:	63bb      	str	r3, [r7, #56]	; 0x38
 8003822:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800382e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003832:	609a      	str	r2, [r3, #8]
  }    
  
  if (hcint.b.frmovrun)
 8003834:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d027      	beq.n	8003892 <USB_OTG_USBH_handle_hc_n_In_ISR+0x224>
  {
    UNMASK_HOST_INT_CHH (num);
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	3322      	adds	r3, #34	; 0x22
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	637b      	str	r3, [r7, #52]	; 0x34
 8003852:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003856:	f043 0302 	orr.w	r3, r3, #2
 800385a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	3322      	adds	r3, #34	; 0x22
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800386c:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	b2db      	uxtb	r3, r3
 8003872:	4619      	mov	r1, r3
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7fe ffe1 	bl	800283c <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg ,frmovrun);
 800387a:	2300      	movs	r3, #0
 800387c:	633b      	str	r3, [r7, #48]	; 0x30
 800387e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003882:	f043 0302 	orr.w	r3, r3, #2
 8003886:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800388a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800388c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	e1bf      	b.n	8003c12 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a4>
  }
  
  else if (hcint.b.xfercompl)
 8003892:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 809b 	beq.w	80039d8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x36a>
  {
    
    if (pdev->cfg.dma_enable == 1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	78db      	ldrb	r3, [r3, #3]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d117      	bne.n	80038da <USB_OTG_USBH_handle_hc_n_In_ISR+0x26c>
    {
      hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCTSIZ);
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	3322      	adds	r3, #34	; 0x22
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	65fb      	str	r3, [r7, #92]	; 0x5c
      pdev->host.XferCnt[num] =  pdev->host.hc[num].xfer_len - hctsiz.b.xfersize;
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	015b      	lsls	r3, r3, #5
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038ca:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80038ce:	1a99      	subs	r1, r3, r2
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	32d4      	adds	r2, #212	; 0xd4
 80038d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    
    pdev->host.HC_Status[num] = HC_XFRC;     
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 80038e4:	2201      	movs	r2, #1
 80038e6:	701a      	strb	r2, [r3, #0]
    pdev->host.ErrCnt [num]= 0;
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	33c4      	adds	r3, #196	; 0xc4
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	2200      	movs	r2, #0
 80038f4:	605a      	str	r2, [r3, #4]
    CLEAR_HC_INT(hcreg , xfercompl);
 80038f6:	2300      	movs	r3, #0
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8003906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390a:	609a      	str	r2, [r3, #8]
    
    if ((hcchar.b.eptype == EP_TYPE_CTRL)||
 800390c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8003910:	f003 030c 	and.w	r3, r3, #12
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d006      	beq.n	8003928 <USB_OTG_USBH_handle_hc_n_In_ISR+0x2ba>
        (hcchar.b.eptype == EP_TYPE_BULK))
 800391a:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	b2db      	uxtb	r3, r3
    if ((hcchar.b.eptype == EP_TYPE_CTRL)||
 8003924:	2b08      	cmp	r3, #8
 8003926:	d139      	bne.n	800399c <USB_OTG_USBH_handle_hc_n_In_ISR+0x32e>
    {
      UNMASK_HOST_INT_CHH (num);
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	3322      	adds	r3, #34	; 0x22
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28
 8003938:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800393c:	f043 0302 	orr.w	r3, r3, #2
 8003940:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	3322      	adds	r3, #34	; 0x22
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003952:	60da      	str	r2, [r3, #12]
      USB_OTG_HC_Halt(pdev, num);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	4619      	mov	r1, r3
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fe ff6e 	bl	800283c <USB_OTG_HC_Halt>
      CLEAR_HC_INT(hcreg , nak); 
 8003960:	2300      	movs	r3, #0
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
 8003964:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003968:	f043 0310 	orr.w	r3, r3, #16
 800396c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8003970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003974:	609a      	str	r2, [r3, #8]
      pdev->host.hc[num].toggle_in ^= 1;
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	331e      	adds	r3, #30
 800397c:	015b      	lsls	r3, r3, #5
 800397e:	4413      	add	r3, r2
 8003980:	3304      	adds	r3, #4
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	f083 0301 	eor.w	r3, r3, #1
 8003988:	b2d9      	uxtb	r1, r3
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	331e      	adds	r3, #30
 8003990:	015b      	lsls	r3, r3, #5
 8003992:	4413      	add	r3, r2
 8003994:	3304      	adds	r3, #4
 8003996:	460a      	mov	r2, r1
 8003998:	701a      	strb	r2, [r3, #0]
 800399a:	e13a      	b.n	8003c12 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a4>
      
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
 800399c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80039a0:	f003 030c 	and.w	r3, r3, #12
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b0c      	cmp	r3, #12
 80039a8:	f040 8133 	bne.w	8003c12 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a4>
    {
      hcchar.b.oddfrm  = 1;
 80039ac:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80039b0:	f043 0320 	orr.w	r3, r3, #32
 80039b4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	3322      	adds	r3, #34	; 0x22
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039c6:	601a      	str	r2, [r3, #0]
      pdev->host.URB_State[num] = URB_DONE;  
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	4413      	add	r3, r2
 80039ce:	f203 339b 	addw	r3, r3, #923	; 0x39b
 80039d2:	2201      	movs	r2, #1
 80039d4:	701a      	strb	r2, [r3, #0]
 80039d6:	e11c      	b.n	8003c12 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a4>
    }
    
  }
  else if (hcint.b.chhltd)
 80039d8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d07b      	beq.n	8003ade <USB_OTG_USBH_handle_hc_n_In_ISR+0x470>
  {
    MASK_HOST_INT_CHH (num);
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	3322      	adds	r3, #34	; 0x22
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	623b      	str	r3, [r7, #32]
 80039f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80039fa:	f36f 0341 	bfc	r3, #1, #1
 80039fe:	f887 3020 	strb.w	r3, [r7, #32]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	3322      	adds	r3, #34	; 0x22
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	6a3a      	ldr	r2, [r7, #32]
 8003a10:	60da      	str	r2, [r3, #12]
    
    if(pdev->host.HC_Status[num] == HC_XFRC)
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d107      	bne.n	8003a34 <USB_OTG_USBH_handle_hc_n_In_ISR+0x3c6>
    {
      pdev->host.URB_State[num] = URB_DONE;      
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8003a2e:	2201      	movs	r2, #1
 8003a30:	701a      	strb	r2, [r3, #0]
 8003a32:	e04a      	b.n	8003aca <USB_OTG_USBH_handle_hc_n_In_ISR+0x45c>
    }
    
    else if (pdev->host.HC_Status[num] == HC_STALL) 
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b05      	cmp	r3, #5
 8003a44:	d107      	bne.n	8003a56 <USB_OTG_USBH_handle_hc_n_In_ISR+0x3e8>
    {
      pdev->host.URB_State[num] = URB_STALL;
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8003a50:	2204      	movs	r2, #4
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	e039      	b.n	8003aca <USB_OTG_USBH_handle_hc_n_In_ISR+0x45c>
    }   
    
    else if((pdev->host.HC_Status[num] == HC_XACTERR) ||
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b06      	cmp	r3, #6
 8003a66:	d008      	beq.n	8003a7a <USB_OTG_USBH_handle_hc_n_In_ISR+0x40c>
            (pdev->host.HC_Status[num] == HC_DATATGLERR))
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	b2db      	uxtb	r3, r3
    else if((pdev->host.HC_Status[num] == HC_XACTERR) ||
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d10e      	bne.n	8003a98 <USB_OTG_USBH_handle_hc_n_In_ISR+0x42a>
    {
      pdev->host.ErrCnt[num] = 0;
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	33c4      	adds	r3, #196	; 0xc4
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	2200      	movs	r2, #0
 8003a86:	605a      	str	r2, [r3, #4]
      pdev->host.URB_State[num] = URB_ERROR;  
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f203 339b 	addw	r3, r3, #923	; 0x39b
 8003a92:	2203      	movs	r2, #3
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	e018      	b.n	8003aca <USB_OTG_USBH_handle_hc_n_In_ISR+0x45c>
      
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
 8003a98:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8003a9c:	f003 030c 	and.w	r3, r3, #12
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b0c      	cmp	r3, #12
 8003aa4:	d111      	bne.n	8003aca <USB_OTG_USBH_handle_hc_n_In_ISR+0x45c>
    {
      pdev->host.hc[num].toggle_in ^= 1;
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	331e      	adds	r3, #30
 8003aac:	015b      	lsls	r3, r3, #5
 8003aae:	4413      	add	r3, r2
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	f083 0301 	eor.w	r3, r3, #1
 8003ab8:	b2d9      	uxtb	r1, r3
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	331e      	adds	r3, #30
 8003ac0:	015b      	lsls	r3, r3, #5
 8003ac2:	4413      	add	r3, r2
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	460a      	mov	r2, r1
 8003ac8:	701a      	strb	r2, [r3, #0]
    }
    
    CLEAR_HC_INT(hcreg , chhltd);    
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	7f3b      	ldrb	r3, [r7, #28]
 8003ad0:	f043 0302 	orr.w	r3, r3, #2
 8003ad4:	773b      	strb	r3, [r7, #28]
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ada:	609a      	str	r2, [r3, #8]
 8003adc:	e099      	b.n	8003c12 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a4>
    
  }    
  else if (hcint.b.xacterr)
 8003ade:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8003ae2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d037      	beq.n	8003b5c <USB_OTG_USBH_handle_hc_n_In_ISR+0x4ee>
  {
    UNMASK_HOST_INT_CHH (num);
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	3322      	adds	r3, #34	; 0x22
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	7e3b      	ldrb	r3, [r7, #24]
 8003afe:	f043 0302 	orr.w	r3, r3, #2
 8003b02:	763b      	strb	r3, [r7, #24]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	3322      	adds	r3, #34	; 0x22
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	60da      	str	r2, [r3, #12]
    pdev->host.ErrCnt[num] ++;
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	33c4      	adds	r3, #196	; 0xc4
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	33c4      	adds	r3, #196	; 0xc4
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	605a      	str	r2, [r3, #4]
    pdev->host.HC_Status[num] = HC_XACTERR;
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8003b38:	2206      	movs	r2, #6
 8003b3a:	701a      	strb	r2, [r3, #0]
    USB_OTG_HC_Halt(pdev, num);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	4619      	mov	r1, r3
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fe fe7a 	bl	800283c <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , xacterr);    
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	7d3b      	ldrb	r3, [r7, #20]
 8003b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b52:	753b      	strb	r3, [r7, #20]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b58:	609a      	str	r2, [r3, #8]
 8003b5a:	e05a      	b.n	8003c12 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a4>
    
  }
  else if (hcint.b.nak)  
 8003b5c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8003b60:	f003 0310 	and.w	r3, r3, #16
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d053      	beq.n	8003c12 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a4>
  {  
    if(hcchar.b.eptype == EP_TYPE_INTR)
 8003b6a:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8003b6e:	f003 030c 	and.w	r3, r3, #12
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b0c      	cmp	r3, #12
 8003b76:	d11a      	bne.n	8003bae <USB_OTG_USBH_handle_hc_n_In_ISR+0x540>
    {
      UNMASK_HOST_INT_CHH (num);
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	3322      	adds	r3, #34	; 0x22
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	7c3b      	ldrb	r3, [r7, #16]
 8003b8a:	f043 0302 	orr.w	r3, r3, #2
 8003b8e:	743b      	strb	r3, [r7, #16]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	3322      	adds	r3, #34	; 0x22
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	60da      	str	r2, [r3, #12]
      USB_OTG_HC_Halt(pdev, num);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fe fe48 	bl	800283c <USB_OTG_HC_Halt>
 8003bac:	e021      	b.n	8003bf2 <USB_OTG_USBH_handle_hc_n_In_ISR+0x584>
    }
    else if  ((hcchar.b.eptype == EP_TYPE_CTRL)||
 8003bae:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8003bb2:	f003 030c 	and.w	r3, r3, #12
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d006      	beq.n	8003bca <USB_OTG_USBH_handle_hc_n_In_ISR+0x55c>
              (hcchar.b.eptype == EP_TYPE_BULK))
 8003bbc:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	b2db      	uxtb	r3, r3
    else if  ((hcchar.b.eptype == EP_TYPE_CTRL)||
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d113      	bne.n	8003bf2 <USB_OTG_USBH_handle_hc_n_In_ISR+0x584>
    {
      /* re-activate the channel  */
      hcchar.b.chen = 1;
 8003bca:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8003bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
      hcchar.b.chdis = 0;
 8003bd6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8003bda:	f36f 1386 	bfc	r3, #6, #1
 8003bde:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	3322      	adds	r3, #34	; 0x22
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bf0:	601a      	str	r2, [r3, #0]
    }
    pdev->host.HC_Status[num] = HC_NAK;
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	701a      	strb	r2, [r3, #0]
    CLEAR_HC_INT(hcreg , nak);   
 8003c00:	2300      	movs	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	7b3b      	ldrb	r3, [r7, #12]
 8003c06:	f043 0310 	orr.w	r3, r3, #16
 8003c0a:	733b      	strb	r3, [r7, #12]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c10:	609a      	str	r2, [r3, #8]
  }
  
  
  return 1;
 8003c12:	2301      	movs	r3, #1
  
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3770      	adds	r7, #112	; 0x70
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <USB_OTG_USBH_handle_rx_qlvl_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_rx_qlvl_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  USB_OTG_GRXFSTS_TypeDef       grxsts;
  USB_OTG_GINTMSK_TypeDef       intmsk;
  USB_OTG_HCTSIZn_TypeDef       hctsiz; 
  USB_OTG_HCCHAR_TypeDef        hcchar;
  __IO uint8_t                  channelnum =0;  
 8003c24:	2300      	movs	r3, #0
 8003c26:	72fb      	strb	r3, [r7, #11]
  uint32_t                      count;    
  
  /* Disable the Rx Status Queue Level interrupt */
  intmsk.d32 = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]
  intmsk.b.rxstsqlvl = 1;
 8003c2c:	7d3b      	ldrb	r3, [r7, #20]
 8003c2e:	f043 0310 	orr.w	r3, r3, #16
 8003c32:	753b      	strb	r3, [r7, #20]
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	68d2      	ldr	r2, [r2, #12]
 8003c3c:	6991      	ldr	r1, [r2, #24]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	43d2      	mvns	r2, r2
 8003c42:	400a      	ands	r2, r1
 8003c44:	619a      	str	r2, [r3, #24]
  
  grxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRXSTSP);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	61bb      	str	r3, [r7, #24]
  channelnum = grxsts.b.chnum;  
 8003c4e:	7e3b      	ldrb	r3, [r7, #24]
 8003c50:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	72fb      	strb	r3, [r7, #11]
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR);
 8003c58:	7afb      	ldrb	r3, [r7, #11]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	3322      	adds	r3, #34	; 0x22
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	60fb      	str	r3, [r7, #12]
  
  switch (grxsts.b.pktsts)
 8003c6a:	7ebb      	ldrb	r3, [r7, #26]
 8003c6c:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d000      	beq.n	8003c78 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x5c>
  case GRXSTS_PKTSTS_IN_XFER_COMP:
    
  case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
 8003c76:	e08b      	b.n	8003d90 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x174>
    if ((grxsts.b.bcnt > 0) && (pdev->host.hc[channelnum].xfer_buff != (void  *)0))
 8003c78:	8b3b      	ldrh	r3, [r7, #24]
 8003c7a:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f340 8084 	ble.w	8003d8e <USB_OTG_USBH_handle_rx_qlvl_ISR+0x172>
 8003c86:	7afb      	ldrb	r3, [r7, #11]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	3315      	adds	r3, #21
 8003c8e:	015b      	lsls	r3, r3, #5
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d078      	beq.n	8003d8e <USB_OTG_USBH_handle_rx_qlvl_ISR+0x172>
      USB_OTG_ReadPacket(pdev, pdev->host.hc[channelnum].xfer_buff, grxsts.b.bcnt);
 8003c9c:	7afb      	ldrb	r3, [r7, #11]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	3315      	adds	r3, #21
 8003ca4:	015b      	lsls	r3, r3, #5
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003cac:	6819      	ldr	r1, [r3, #0]
 8003cae:	8b3b      	ldrh	r3, [r7, #24]
 8003cb0:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7fd ff0c 	bl	8001ad6 <USB_OTG_ReadPacket>
      pdev->host.hc[grxsts.b.chnum].xfer_buff += grxsts.b.bcnt;           
 8003cbe:	7e3b      	ldrb	r3, [r7, #24]
 8003cc0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	7e3b      	ldrb	r3, [r7, #24]
 8003cca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	3315      	adds	r3, #21
 8003cd4:	015b      	lsls	r3, r3, #5
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	8b3a      	ldrh	r2, [r7, #24]
 8003ce0:	f3c2 120a 	ubfx	r2, r2, #4, #11
 8003ce4:	b292      	uxth	r2, r2
 8003ce6:	441a      	add	r2, r3
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	f100 0315 	add.w	r3, r0, #21
 8003cee:	015b      	lsls	r3, r3, #5
 8003cf0:	440b      	add	r3, r1
 8003cf2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003cf6:	601a      	str	r2, [r3, #0]
      pdev->host.hc[grxsts.b.chnum].xfer_count  += grxsts.b.bcnt;
 8003cf8:	7e3b      	ldrb	r3, [r7, #24]
 8003cfa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	4618      	mov	r0, r3
 8003d02:	7e3b      	ldrb	r3, [r7, #24]
 8003d04:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	015b      	lsls	r3, r3, #5
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	8b3a      	ldrh	r2, [r7, #24]
 8003d18:	f3c2 120a 	ubfx	r2, r2, #4, #11
 8003d1c:	b292      	uxth	r2, r2
 8003d1e:	441a      	add	r2, r3
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	0143      	lsls	r3, r0, #5
 8003d24:	440b      	add	r3, r1
 8003d26:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8003d2a:	601a      	str	r2, [r3, #0]
      count = pdev->host.hc[channelnum].xfer_count;
 8003d2c:	7afb      	ldrb	r3, [r7, #11]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	015b      	lsls	r3, r3, #5
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	61fb      	str	r3, [r7, #28]
      pdev->host.XferCnt[channelnum]  = count;
 8003d3e:	7afb      	ldrb	r3, [r7, #11]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	32d4      	adds	r2, #212	; 0xd4
 8003d48:	69f9      	ldr	r1, [r7, #28]
 8003d4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCTSIZ);
 8003d4e:	7afb      	ldrb	r3, [r7, #11]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	3322      	adds	r3, #34	; 0x22
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	613b      	str	r3, [r7, #16]
      if(hctsiz.b.pktcnt > 0)
 8003d60:	8a7b      	ldrh	r3, [r7, #18]
 8003d62:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	dd10      	ble.n	8003d8e <USB_OTG_USBH_handle_rx_qlvl_ISR+0x172>
        hcchar.b.chen = 1;
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d72:	73fb      	strb	r3, [r7, #15]
        hcchar.b.chdis = 0;
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	f36f 1386 	bfc	r3, #6, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
        USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR, hcchar.d32);
 8003d7c:	7afb      	ldrb	r3, [r7, #11]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	3322      	adds	r3, #34	; 0x22
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	601a      	str	r2, [r3, #0]
    break;
 8003d8e:	bf00      	nop
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  intmsk.b.rxstsqlvl = 1;
 8003d90:	7d3b      	ldrb	r3, [r7, #20]
 8003d92:	f043 0310 	orr.w	r3, r3, #16
 8003d96:	753b      	strb	r3, [r7, #20]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	68d2      	ldr	r2, [r2, #12]
 8003da0:	6991      	ldr	r1, [r2, #24]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	619a      	str	r2, [r3, #24]
  return 1;
 8003da8:	2301      	movs	r3, #1
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3720      	adds	r7, #32
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b085      	sub	sp, #20
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  USB_OTG_HCCHAR_TypeDef        hcchar; 
  
  
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[0]->HCCHAR);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	60bb      	str	r3, [r7, #8]
  hcchar.b.chen = 1;
 8003dc4:	7afb      	ldrb	r3, [r7, #11]
 8003dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dca:	72fb      	strb	r3, [r7, #11]
  hcchar.b.chdis = 1;
 8003dcc:	7afb      	ldrb	r3, [r7, #11]
 8003dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dd2:	72fb      	strb	r3, [r7, #11]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[0]->HCCHAR, hcchar.d32);  
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	601a      	str	r2, [r3, #0]
  
  gintsts.d32 = 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
 8003de2:	7bbb      	ldrb	r3, [r7, #14]
 8003de4:	f043 0320 	orr.w	r3, r3, #32
 8003de8:	73bb      	strb	r3, [r7, #14]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	615a      	str	r2, [r3, #20]
  
  return 1;
 8003df2:	2301      	movs	r3, #1
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <USBH_Connected>:
  *         USB Connect callback function from the Interrupt. 
  * @param  selected device
  * @retval Status
*/
uint8_t USBH_Connected (USB_OTG_CORE_HANDLE *pdev)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  pdev->host.ConnSts = 1;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
  return 0;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <USBH_Disconnected>:
* @param  selected device
* @retval Status
*/

uint8_t USBH_Disconnected (USB_OTG_CORE_HANDLE *pdev)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  pdev->host.ConnSts = 0;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
  return 0;  
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <USBH_SOF>:
  * @param  selected device
  * @retval Status
  */

uint8_t USBH_SOF (USB_OTG_CORE_HANDLE *pdev)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* This callback could be used to implement a scheduler process */
  return 0;  
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <USBH_Init>:
void USBH_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBH_HOST *phost,               
               USBH_Class_cb_TypeDef *class_cb, 
               USBH_Usr_cb_TypeDef *usr_cb)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	603b      	str	r3, [r7, #0]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	72fb      	strb	r3, [r7, #11]
     
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f7fd fcc0 	bl	80017e8 <USB_OTG_BSP_Init>
  
  /* configure GPIO pin used for switching VBUS power */
  USB_OTG_BSP_ConfigVBUS(0);  
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f7fd fd2b 	bl	80018c4 <USB_OTG_BSP_ConfigVBUS>
  
  
  /* Host de-initializations */
  USBH_DeInit(pdev, phost);
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 f818 	bl	8003ea6 <USBH_DeInit>
  
  /*Register class and user callbacks */
  phost->class_cb = class_cb;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	67da      	str	r2, [r3, #124]	; 0x7c
  phost->usr_cb = usr_cb;  
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    
  /* Start the USB OTG core */     
   HCD_Init(pdev , coreID);
 8003e84:	7afb      	ldrb	r3, [r7, #11]
 8003e86:	4619      	mov	r1, r3
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7fe fd61 	bl	8002950 <HCD_Init>
   
  /* Upon Init call usr call back */
  phost->usr_cb->Init();
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4798      	blx	r3
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f7fd fce1 	bl	8001860 <USB_OTG_BSP_EnableInterrupt>
}
 8003e9e:	bf00      	nop
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <USBH_DeInit>:
  *         Re-Initialize Host
  * @param  None 
  * @retval status: USBH_Status
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	6039      	str	r1, [r7, #0]
  /* Software Init */
  
  phost->gState = HOST_IDLE;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	701a      	strb	r2, [r3, #0]
  phost->gStateBkp = HOST_IDLE; 
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	705a      	strb	r2, [r3, #1]
  phost->EnumState = ENUM_IDLE;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	709a      	strb	r2, [r3, #2]
  phost->RequestState = CMD_SEND;  
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	70da      	strb	r2, [r3, #3]
  
  phost->Control.state = CTRL_SETUP;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	771a      	strb	r2, [r3, #28]
  phost->Control.ep0size = USB_OTG_MAX_EP0_SIZE;  
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2240      	movs	r2, #64	; 0x40
 8003ed2:	719a      	strb	r2, [r3, #6]
  
  phost->device_prop.address = USBH_DEVICE_ADDRESS_DEFAULT;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2020 	strb.w	r2, [r3, #32]
  phost->device_prop.speed = HPRT0_PRTSPD_FULL_SPEED;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  USBH_Free_Channel  (pdev, phost->Control.hc_num_in);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	791b      	ldrb	r3, [r3, #4]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fd5b 	bl	80049a6 <USBH_Free_Channel>
  USBH_Free_Channel  (pdev, phost->Control.hc_num_out);  
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	795b      	ldrb	r3, [r3, #5]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fd55 	bl	80049a6 <USBH_Free_Channel>
  return USBH_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <USBH_Process>:
*         USB Host core main state machine process
* @param  None 
* @retval None
*/
void USBH_Process(USB_OTG_CORE_HANDLE *pdev , USBH_HOST *phost)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  volatile USBH_Status status = USBH_FAIL;
 8003f12:	2302      	movs	r3, #2
 8003f14:	73fb      	strb	r3, [r7, #15]
  
  
  /* check for Host port events */
  if ((HCD_IsDeviceConnected(pdev) == 0)&& (phost->gState != HOST_IDLE)) 
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fe fd7f 	bl	8002a1a <HCD_IsDeviceConnected>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10a      	bne.n	8003f38 <USBH_Process+0x30>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d006      	beq.n	8003f38 <USBH_Process+0x30>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED) 
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d002      	beq.n	8003f38 <USBH_Process+0x30>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2202      	movs	r2, #2
 8003f36:	701a      	strb	r2, [r3, #0]
    }
  }
    
  switch (phost->gState)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b0a      	cmp	r3, #10
 8003f3e:	f200 8100 	bhi.w	8004142 <USBH_Process+0x23a>
 8003f42:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <USBH_Process+0x40>)
 8003f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f48:	08003f75 	.word	0x08003f75
 8003f4c:	08003f91 	.word	0x08003f91
 8003f50:	08004109 	.word	0x08004109
 8003f54:	08004143 	.word	0x08004143
 8003f58:	08004045 	.word	0x08004045
 8003f5c:	0800408f 	.word	0x0800408f
 8003f60:	080040bd 	.word	0x080040bd
 8003f64:	080040db 	.word	0x080040db
 8003f68:	08004065 	.word	0x08004065
 8003f6c:	08004143 	.word	0x08004143
 8003f70:	080040e5 	.word	0x080040e5
  {
  
  case HOST_IDLE :
    
    if (HCD_IsDeviceConnected(pdev))  
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7fe fd50 	bl	8002a1a <HCD_IsDeviceConnected>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80e2 	beq.w	8004146 <USBH_Process+0x23e>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2201      	movs	r2, #1
 8003f86:	701a      	strb	r2, [r3, #0]
      USB_OTG_BSP_mDelay(100);
 8003f88:	2064      	movs	r0, #100	; 0x64
 8003f8a:	f7fd fce5 	bl	8001958 <USB_OTG_BSP_mDelay>
    }
    break;
 8003f8e:	e0da      	b.n	8004146 <USBH_Process+0x23e>
   
  case HOST_DEV_ATTACHED :
    
    phost->usr_cb->DeviceAttached();
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	4798      	blx	r3
    phost->Control.hc_num_out = USBH_Alloc_Channel(pdev, 0x00);
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fcdd 	bl	800495c <USBH_Alloc_Channel>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	715a      	strb	r2, [r3, #5]
    phost->Control.hc_num_in = USBH_Alloc_Channel(pdev, 0x80);  
 8003faa:	2180      	movs	r1, #128	; 0x80
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fcd5 	bl	800495c <USBH_Alloc_Channel>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	711a      	strb	r2, [r3, #4]
  
    /* Reset USB Device */
    if ( HCD_ResetPort(pdev) == 0)
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fe fd21 	bl	8002a02 <HCD_ResetPort>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f040 80c1 	bne.w	800414a <USBH_Process+0x242>
    {
      phost->usr_cb->ResetDevice();
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4798      	blx	r3
      /*  Wait for USB USBH_ISR_PrtEnDisableChange()  
      Host is Now ready to start the Enumeration 
      */
      
      phost->device_prop.speed = HCD_GetCurrentSpeed(pdev);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fe fd02 	bl	80029dc <HCD_GetCurrentSpeed>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      
      phost->gState = HOST_ENUMERATION;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	701a      	strb	r2, [r3, #0]
      phost->usr_cb->DeviceSpeedDetected(phost->device_prop.speed);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4798      	blx	r3
        
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	7919      	ldrb	r1, [r3, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
                           phost->Control.hc_num_in,
                           phost->device_prop.address,
                           phost->device_prop.speed,
                           EP_TYPE_CTRL,
                           phost->Control.ep0size); 
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	799b      	ldrb	r3, [r3, #6]
      USBH_Open_Channel (pdev,
 800400e:	b29b      	uxth	r3, r3
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	2300      	movs	r3, #0
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	4603      	mov	r3, r0
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fbd7 	bl	80047cc <USBH_Open_Channel>
      
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	7959      	ldrb	r1, [r3, #5]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
                           phost->Control.hc_num_out,
                           phost->device_prop.address,
                           phost->device_prop.speed,
                           EP_TYPE_CTRL,
                           phost->Control.ep0size);          
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	799b      	ldrb	r3, [r3, #6]
      USBH_Open_Channel (pdev,
 8004032:	b29b      	uxth	r3, r3
 8004034:	9301      	str	r3, [sp, #4]
 8004036:	2300      	movs	r3, #0
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	4603      	mov	r3, r0
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fbc5 	bl	80047cc <USBH_Open_Channel>
   }
    break;
 8004042:	e082      	b.n	800414a <USBH_Process+0x242>
    
  case HOST_ENUMERATION:     
    /* Check for enumeration status */  
    if ( USBH_HandleEnum(pdev , phost) == USBH_OK)
 8004044:	6839      	ldr	r1, [r7, #0]
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f8ac 	bl	80041a4 <USBH_HandleEnum>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d17d      	bne.n	800414e <USBH_Process+0x246>
    { 
      /* The function shall return USBH_OK when full enumeration is complete */
      
      /* user callback for end of device basic enumeration */
      phost->usr_cb->EnumerationDone();
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405a:	4798      	blx	r3
      
      phost->gState  = HOST_USR_INPUT;    
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2208      	movs	r2, #8
 8004060:	701a      	strb	r2, [r3, #0]
    }
    break;
 8004062:	e074      	b.n	800414e <USBH_Process+0x246>
    
  case HOST_USR_INPUT:    
    /*The function should return user response true to move to class state */
    if ( phost->usr_cb->UserInput() == USBH_USR_RESP_OK)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	4798      	blx	r3
 800406e:	4603      	mov	r3, r0
 8004070:	2b01      	cmp	r3, #1
 8004072:	d16e      	bne.n	8004152 <USBH_Process+0x24a>
    {
      if((phost->class_cb->Init(pdev, phost))\
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6839      	ldr	r1, [r7, #0]
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	4798      	blx	r3
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d165      	bne.n	8004152 <USBH_Process+0x24a>
        == USBH_OK)
      {
        phost->gState  = HOST_CLASS_REQUEST;     
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2205      	movs	r2, #5
 800408a:	701a      	strb	r2, [r3, #0]
      }     
    }   
    break;
 800408c:	e061      	b.n	8004152 <USBH_Process+0x24a>
    
  case HOST_CLASS_REQUEST:  
    /* process class standard contol requests state machine */ 
    status = phost->class_cb->Requests(pdev, phost);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	6839      	ldr	r1, [r7, #0]
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	4798      	blx	r3
 800409a:	4603      	mov	r3, r0
 800409c:	73fb      	strb	r3, [r7, #15]
    
     if(status == USBH_OK)
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d103      	bne.n	80040ae <USBH_Process+0x1a6>
     {
       phost->gState  = HOST_CLASS;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2206      	movs	r2, #6
 80040aa:	701a      	strb	r2, [r3, #0]
     {
       USBH_ErrorHandle(phost, status);
     }
 
    
    break;    
 80040ac:	e052      	b.n	8004154 <USBH_Process+0x24c>
       USBH_ErrorHandle(phost, status);
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	4619      	mov	r1, r3
 80040b4:	6838      	ldr	r0, [r7, #0]
 80040b6:	f000 f851 	bl	800415c <USBH_ErrorHandle>
    break;    
 80040ba:	e04b      	b.n	8004154 <USBH_Process+0x24c>
  case HOST_CLASS:   
    /* process class state machine */
    status = phost->class_cb->Machine(pdev, phost);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	6839      	ldr	r1, [r7, #0]
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	4798      	blx	r3
 80040c8:	4603      	mov	r3, r0
 80040ca:	73fb      	strb	r3, [r7, #15]
    USBH_ErrorHandle(phost, status);
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	4619      	mov	r1, r3
 80040d2:	6838      	ldr	r0, [r7, #0]
 80040d4:	f000 f842 	bl	800415c <USBH_ErrorHandle>
    break;       
 80040d8:	e03c      	b.n	8004154 <USBH_Process+0x24c>
    
  case HOST_CTRL_XFER:
    /* process control transfer state machine */
    USBH_HandleControl(pdev, phost);    
 80040da:	6839      	ldr	r1, [r7, #0]
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f9d3 	bl	8004488 <USBH_HandleControl>
    break;
 80040e2:	e037      	b.n	8004154 <USBH_Process+0x24c>
  case HOST_SUSPENDED:
    break;
  
  case HOST_ERROR_STATE:
    /* Re-Initilaize Host for new Enumeration */
    USBH_DeInit(pdev, phost);
 80040e4:	6839      	ldr	r1, [r7, #0]
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff fedd 	bl	8003ea6 <USBH_DeInit>
    phost->usr_cb->DeInit();
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	4798      	blx	r3
    phost->class_cb->DeInit(pdev, &phost->device_prop);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	3220      	adds	r2, #32
 8004100:	4611      	mov	r1, r2
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	4798      	blx	r3
    break;
 8004106:	e025      	b.n	8004154 <USBH_Process+0x24c>
    
  case HOST_DEV_DISCONNECTED :
    
    /* Manage User disconnect operations*/
    phost->usr_cb->DeviceDisconnected();
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	4798      	blx	r3
    
    /* Re-Initilaize Host for new Enumeration */
    USBH_DeInit(pdev, phost);
 8004112:	6839      	ldr	r1, [r7, #0]
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff fec6 	bl	8003ea6 <USBH_DeInit>
    phost->usr_cb->DeInit();
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	4798      	blx	r3
    phost->class_cb->DeInit(pdev, &phost->device_prop); 
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	3220      	adds	r2, #32
 800412e:	4611      	mov	r1, r2
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	4798      	blx	r3
    USBH_DeAllocate_AllChannel(pdev);  
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fc58 	bl	80049ea <USBH_DeAllocate_AllChannel>
    phost->gState = HOST_IDLE;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2200      	movs	r2, #0
 800413e:	701a      	strb	r2, [r3, #0]
    
    break;
 8004140:	e008      	b.n	8004154 <USBH_Process+0x24c>
    
  default :
    break;
 8004142:	bf00      	nop
 8004144:	e006      	b.n	8004154 <USBH_Process+0x24c>
    break;
 8004146:	bf00      	nop
 8004148:	e004      	b.n	8004154 <USBH_Process+0x24c>
    break;
 800414a:	bf00      	nop
 800414c:	e002      	b.n	8004154 <USBH_Process+0x24c>
    break;
 800414e:	bf00      	nop
 8004150:	e000      	b.n	8004154 <USBH_Process+0x24c>
    break;
 8004152:	bf00      	nop
  }

}
 8004154:	bf00      	nop
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <USBH_ErrorHandle>:
  *         This function handles the Error on Host side.
  * @param  errType : Type of Error or Busy/OK state
  * @retval None
  */
void USBH_ErrorHandle(USBH_HOST *phost, USBH_Status errType)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	70fb      	strb	r3, [r7, #3]
  /* Error unrecovered or not supported device speed */
  if ( (errType == USBH_ERROR_SPEED_UNKNOWN) ||
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	2b05      	cmp	r3, #5
 800416c:	d002      	beq.n	8004174 <USBH_ErrorHandle+0x18>
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	2b04      	cmp	r3, #4
 8004172:	d108      	bne.n	8004186 <USBH_ErrorHandle+0x2a>
       (errType == USBH_UNRECOVERED_ERROR) )
  {
    phost->usr_cb->UnrecoveredError(); 
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800417a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417c:	4798      	blx	r3
    phost->gState = HOST_ERROR_STATE;   
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	220a      	movs	r2, #10
 8004182:	701a      	strb	r2, [r3, #0]
  {
    phost->gState = HOST_ERROR_STATE;  
    /* user callback for initalization */
    phost->usr_cb->Init();
  } 
}
 8004184:	e00a      	b.n	800419c <USBH_ErrorHandle+0x40>
  else if(errType == USBH_APPLY_DEINIT)
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	2b06      	cmp	r3, #6
 800418a:	d107      	bne.n	800419c <USBH_ErrorHandle+0x40>
    phost->gState = HOST_ERROR_STATE;  
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	220a      	movs	r2, #10
 8004190:	701a      	strb	r2, [r3, #0]
    phost->usr_cb->Init();
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4798      	blx	r3
}
 800419c:	bf00      	nop
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  pdev: Selected device
  * @retval USBH_Status
  */
static USBH_Status USBH_HandleEnum(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b096      	sub	sp, #88	; 0x58
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  USBH_Status Status = USBH_BUSY;  
 80041ae:	2301      	movs	r3, #1
 80041b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t Local_Buffer[64];
  
  switch (phost->EnumState)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	789b      	ldrb	r3, [r3, #2]
 80041b8:	2b09      	cmp	r3, #9
 80041ba:	f200 814a 	bhi.w	8004452 <USBH_HandleEnum+0x2ae>
 80041be:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <USBH_HandleEnum+0x20>)
 80041c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c4:	080041ed 	.word	0x080041ed
 80041c8:	0800424b 	.word	0x0800424b
 80041cc:	08004275 	.word	0x08004275
 80041d0:	080042db 	.word	0x080042db
 80041d4:	080042f5 	.word	0x080042f5
 80041d8:	0800432d 	.word	0x0800432d
 80041dc:	08004383 	.word	0x08004383
 80041e0:	080043d7 	.word	0x080043d7
 80041e4:	0800442b 	.word	0x0800442b
 80041e8:	0800444b 	.word	0x0800444b
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(pdev , phost, 8) == USBH_OK)
 80041ec:	2208      	movs	r2, #8
 80041ee:	6839      	ldr	r1, [r7, #0]
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f001 f9bd 	bl	8005570 <USBH_Get_DevDesc>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f040 812c 	bne.w	8004456 <USBH_HandleEnum+0x2b2>
    {
      phost->Control.ep0size = phost->device_prop.Dev_Desc.bMaxPacketSize;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	719a      	strb	r2, [r3, #6]
      
      /* Issue Reset  */
      HCD_ResetPort(pdev);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fe fbfa 	bl	8002a02 <HCD_ResetPort>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2201      	movs	r2, #1
 8004212:	709a      	strb	r2, [r3, #2]
      
      /* modify control channels configuration for MaxPacket size */
      USBH_Modify_Channel (pdev,
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	7959      	ldrb	r1, [r3, #5]
                           phost->Control.hc_num_out,
                           0,
                           0,
                           0,
                           phost->Control.ep0size);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	799b      	ldrb	r3, [r3, #6]
      USBH_Modify_Channel (pdev,
 800421c:	b29b      	uxth	r3, r3
 800421e:	9301      	str	r3, [sp, #4]
 8004220:	2300      	movs	r3, #0
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	2300      	movs	r3, #0
 8004226:	2200      	movs	r2, #0
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fb4b 	bl	80048c4 <USBH_Modify_Channel>
      
      USBH_Modify_Channel (pdev,
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	7919      	ldrb	r1, [r3, #4]
                           phost->Control.hc_num_in,
                           0,
                           0,
                           0,
                           phost->Control.ep0size);      
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	799b      	ldrb	r3, [r3, #6]
      USBH_Modify_Channel (pdev,
 8004236:	b29b      	uxth	r3, r3
 8004238:	9301      	str	r3, [sp, #4]
 800423a:	2300      	movs	r3, #0
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	2300      	movs	r3, #0
 8004240:	2200      	movs	r2, #0
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fb3e 	bl	80048c4 <USBH_Modify_Channel>
    }
    break;
 8004248:	e105      	b.n	8004456 <USBH_HandleEnum+0x2b2>
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(pdev, phost, USB_DEVICE_DESC_SIZE)\
 800424a:	2212      	movs	r2, #18
 800424c:	6839      	ldr	r1, [r7, #0]
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f001 f98e 	bl	8005570 <USBH_Get_DevDesc>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	f040 80ff 	bne.w	800445a <USBH_HandleEnum+0x2b6>
      == USBH_OK)
    {
      /* user callback for device descriptor available */
      phost->usr_cb->DeviceDescAvailable(&phost->device_prop.Dev_Desc);      
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	3222      	adds	r2, #34	; 0x22
 8004268:	4610      	mov	r0, r2
 800426a:	4798      	blx	r3
      phost->EnumState = ENUM_SET_ADDR;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2202      	movs	r2, #2
 8004270:	709a      	strb	r2, [r3, #2]
    }
    break;
 8004272:	e0f2      	b.n	800445a <USBH_HandleEnum+0x2b6>
   
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(pdev, phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8004274:	2201      	movs	r2, #1
 8004276:	6839      	ldr	r1, [r7, #0]
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f001 fa45 	bl	8005708 <USBH_SetAddress>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	f040 80ec 	bne.w	800445e <USBH_HandleEnum+0x2ba>
    {
      USB_OTG_BSP_mDelay(2);
 8004286:	2002      	movs	r0, #2
 8004288:	f7fd fb66 	bl	8001958 <USB_OTG_BSP_mDelay>
      phost->device_prop.address = USBH_DEVICE_ADDRESS;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2020 	strb.w	r2, [r3, #32]
      
      /* user callback for device address assigned */
      phost->usr_cb->DeviceAddressAssigned();
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	4798      	blx	r3
      phost->EnumState = ENUM_GET_CFG_DESC;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2203      	movs	r2, #3
 80042a2:	709a      	strb	r2, [r3, #2]
      
      /* modify control channels to update device address */
      USBH_Modify_Channel (pdev,
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	7919      	ldrb	r1, [r3, #4]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	f893 2020 	ldrb.w	r2, [r3, #32]
 80042ae:	2300      	movs	r3, #0
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	2300      	movs	r3, #0
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	2300      	movs	r3, #0
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 fb03 	bl	80048c4 <USBH_Modify_Channel>
                           phost->device_prop.address,
                           0,
                           0,
                           0);
      
      USBH_Modify_Channel (pdev,
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	7959      	ldrb	r1, [r3, #5]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	f893 2020 	ldrb.w	r2, [r3, #32]
 80042c8:	2300      	movs	r3, #0
 80042ca:	9301      	str	r3, [sp, #4]
 80042cc:	2300      	movs	r3, #0
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	2300      	movs	r3, #0
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 faf6 	bl	80048c4 <USBH_Modify_Channel>
                           phost->device_prop.address,
                           0,
                           0,
                           0);         
    }
    break;
 80042d8:	e0c1      	b.n	800445e <USBH_HandleEnum+0x2ba>
    
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(pdev, 
 80042da:	2209      	movs	r2, #9
 80042dc:	6839      	ldr	r1, [r7, #0]
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f001 f970 	bl	80055c4 <USBH_Get_CfgDesc>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f040 80bb 	bne.w	8004462 <USBH_HandleEnum+0x2be>
                          phost,
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2204      	movs	r2, #4
 80042f0:	709a      	strb	r2, [r3, #2]
    }
    break;
 80042f2:	e0b6      	b.n	8004462 <USBH_HandleEnum+0x2be>
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(pdev, 
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f8:	461a      	mov	r2, r3
 80042fa:	6839      	ldr	r1, [r7, #0]
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f001 f961 	bl	80055c4 <USBH_Get_CfgDesc>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	f040 80ae 	bne.w	8004466 <USBH_HandleEnum+0x2c2>
                         phost,
                         phost->device_prop.Cfg_Desc.wTotalLength) == USBH_OK)
    {
      /* User callback for configuration descriptors available */
      phost->usr_cb->ConfigurationDescAvailable(&phost->device_prop.Cfg_Desc,
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	f102 0034 	add.w	r0, r2, #52	; 0x34
                                                      phost->device_prop.Itf_Desc,
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	f102 013e 	add.w	r1, r2, #62	; 0x3e
                                                      phost->device_prop.Ep_Desc[0]);
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	3250      	adds	r2, #80	; 0x50
      phost->usr_cb->ConfigurationDescAvailable(&phost->device_prop.Cfg_Desc,
 8004322:	4798      	blx	r3
      
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2205      	movs	r2, #5
 8004328:	709a      	strb	r2, [r3, #2]
    }
    break;
 800432a:	e09c      	b.n	8004466 <USBH_HandleEnum+0x2c2>
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device_prop.Dev_Desc.iManufacturer != 0)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004332:	2b00      	cmp	r3, #0
 8004334:	d01b      	beq.n	800436e <USBH_HandleEnum+0x1ca>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(pdev,
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800433c:	f107 010c 	add.w	r1, r7, #12
 8004340:	23ff      	movs	r3, #255	; 0xff
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	460b      	mov	r3, r1
 8004346:	6839      	ldr	r1, [r7, #0]
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f001 f97f 	bl	800564c <USBH_Get_StringDesc>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	f040 808a 	bne.w	800446a <USBH_HandleEnum+0x2c6>
                               phost->device_prop.Dev_Desc.iManufacturer, 
                               Local_Buffer , 
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        phost->usr_cb->ManufacturerString(Local_Buffer);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435e:	f107 020c 	add.w	r2, r7, #12
 8004362:	4610      	mov	r0, r2
 8004364:	4798      	blx	r3
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2206      	movs	r2, #6
 800436a:	709a      	strb	r2, [r3, #2]
    else
    {
      phost->usr_cb->ManufacturerString("N/A");      
      phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
    }
    break;
 800436c:	e07d      	b.n	800446a <USBH_HandleEnum+0x2c6>
      phost->usr_cb->ManufacturerString("N/A");      
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004376:	4843      	ldr	r0, [pc, #268]	; (8004484 <USBH_HandleEnum+0x2e0>)
 8004378:	4798      	blx	r3
      phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2206      	movs	r2, #6
 800437e:	709a      	strb	r2, [r3, #2]
    break;
 8004380:	e073      	b.n	800446a <USBH_HandleEnum+0x2c6>
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device_prop.Dev_Desc.iProduct != 0)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01a      	beq.n	80043c2 <USBH_HandleEnum+0x21e>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(pdev,
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8004392:	f107 010c 	add.w	r1, r7, #12
 8004396:	23ff      	movs	r3, #255	; 0xff
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	460b      	mov	r3, r1
 800439c:	6839      	ldr	r1, [r7, #0]
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f001 f954 	bl	800564c <USBH_Get_StringDesc>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d161      	bne.n	800446e <USBH_HandleEnum+0x2ca>
                               phost->device_prop.Dev_Desc.iProduct, 
                               Local_Buffer, 
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        phost->usr_cb->ProductString(Local_Buffer);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	f107 020c 	add.w	r2, r7, #12
 80043b6:	4610      	mov	r0, r2
 80043b8:	4798      	blx	r3
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2207      	movs	r2, #7
 80043be:	709a      	strb	r2, [r3, #2]
    else
    {
      phost->usr_cb->ProductString("N/A");
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
    } 
    break;
 80043c0:	e055      	b.n	800446e <USBH_HandleEnum+0x2ca>
      phost->usr_cb->ProductString("N/A");
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	482e      	ldr	r0, [pc, #184]	; (8004484 <USBH_HandleEnum+0x2e0>)
 80043cc:	4798      	blx	r3
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2207      	movs	r2, #7
 80043d2:	709a      	strb	r2, [r3, #2]
    break;
 80043d4:	e04b      	b.n	800446e <USBH_HandleEnum+0x2ca>
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device_prop.Dev_Desc.iSerialNumber != 0)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01a      	beq.n	8004416 <USBH_HandleEnum+0x272>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(pdev, 
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80043e6:	f107 010c 	add.w	r1, r7, #12
 80043ea:	23ff      	movs	r3, #255	; 0xff
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	460b      	mov	r3, r1
 80043f0:	6839      	ldr	r1, [r7, #0]
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f001 f92a 	bl	800564c <USBH_Get_StringDesc>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d139      	bne.n	8004472 <USBH_HandleEnum+0x2ce>
                               phost->device_prop.Dev_Desc.iSerialNumber, 
                               Local_Buffer, 
                               0xff) == USBH_OK)
      {
        /* User callback for Serial number string */
        phost->usr_cb->SerialNumString(Local_Buffer);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	f107 020c 	add.w	r2, r7, #12
 800440a:	4610      	mov	r0, r2
 800440c:	4798      	blx	r3
        phost->EnumState = ENUM_SET_CONFIGURATION;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2208      	movs	r2, #8
 8004412:	709a      	strb	r2, [r3, #2]
    else
    {
      phost->usr_cb->SerialNumString("N/A");      
      phost->EnumState = ENUM_SET_CONFIGURATION;
    }  
    break;
 8004414:	e02d      	b.n	8004472 <USBH_HandleEnum+0x2ce>
      phost->usr_cb->SerialNumString("N/A");      
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	4819      	ldr	r0, [pc, #100]	; (8004484 <USBH_HandleEnum+0x2e0>)
 8004420:	4798      	blx	r3
      phost->EnumState = ENUM_SET_CONFIGURATION;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2208      	movs	r2, #8
 8004426:	709a      	strb	r2, [r3, #2]
    break;
 8004428:	e023      	b.n	8004472 <USBH_HandleEnum+0x2ce>
      
  case ENUM_SET_CONFIGURATION:
    /* set configuration  (default config) */
    if (USBH_SetCfg(pdev, 
                    phost,
                    phost->device_prop.Cfg_Desc.bConfigurationValue) == USBH_OK)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
    if (USBH_SetCfg(pdev, 
 8004430:	b29b      	uxth	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	6839      	ldr	r1, [r7, #0]
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f001 f988 	bl	800574c <USBH_SetCfg>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d119      	bne.n	8004476 <USBH_HandleEnum+0x2d2>
    {
      phost->EnumState = ENUM_DEV_CONFIGURED;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2209      	movs	r2, #9
 8004446:	709a      	strb	r2, [r3, #2]
    }
    break;
 8004448:	e015      	b.n	8004476 <USBH_HandleEnum+0x2d2>

    
  case ENUM_DEV_CONFIGURED:
    /* user callback for enumeration done */
    Status = USBH_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    break;
 8004450:	e012      	b.n	8004478 <USBH_HandleEnum+0x2d4>
    
  default:
    break;
 8004452:	bf00      	nop
 8004454:	e010      	b.n	8004478 <USBH_HandleEnum+0x2d4>
    break;
 8004456:	bf00      	nop
 8004458:	e00e      	b.n	8004478 <USBH_HandleEnum+0x2d4>
    break;
 800445a:	bf00      	nop
 800445c:	e00c      	b.n	8004478 <USBH_HandleEnum+0x2d4>
    break;
 800445e:	bf00      	nop
 8004460:	e00a      	b.n	8004478 <USBH_HandleEnum+0x2d4>
    break;
 8004462:	bf00      	nop
 8004464:	e008      	b.n	8004478 <USBH_HandleEnum+0x2d4>
    break;
 8004466:	bf00      	nop
 8004468:	e006      	b.n	8004478 <USBH_HandleEnum+0x2d4>
    break;
 800446a:	bf00      	nop
 800446c:	e004      	b.n	8004478 <USBH_HandleEnum+0x2d4>
    break;
 800446e:	bf00      	nop
 8004470:	e002      	b.n	8004478 <USBH_HandleEnum+0x2d4>
    break;
 8004472:	bf00      	nop
 8004474:	e000      	b.n	8004478 <USBH_HandleEnum+0x2d4>
    break;
 8004476:	bf00      	nop
  }  
  return Status;
 8004478:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800447c:	4618      	mov	r0, r3
 800447e:	3750      	adds	r7, #80	; 0x50
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	08006308 	.word	0x08006308

08004488 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  pdev: Selected device
  * @retval Status
  */
USBH_Status USBH_HandleControl (USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint8_t direction;  
  static uint16_t timeout = 0;
  USBH_Status status = USBH_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	73fb      	strb	r3, [r7, #15]
  URB_STATE URB_Status = URB_IDLE;
 8004496:	2300      	movs	r3, #0
 8004498:	73bb      	strb	r3, [r7, #14]
  
  phost->Control.status = CTRL_START;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2200      	movs	r2, #0
 800449e:	749a      	strb	r2, [r3, #18]

  
  switch (phost->Control.state)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	7f1b      	ldrb	r3, [r3, #28]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	2b0a      	cmp	r3, #10
 80044a8:	f200 817e 	bhi.w	80047a8 <USBH_HandleControl+0x320>
 80044ac:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <USBH_HandleControl+0x2c>)
 80044ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b2:	bf00      	nop
 80044b4:	080044e1 	.word	0x080044e1
 80044b8:	080044fb 	.word	0x080044fb
 80044bc:	08004581 	.word	0x08004581
 80044c0:	0800459b 	.word	0x0800459b
 80044c4:	080045f5 	.word	0x080045f5
 80044c8:	08004621 	.word	0x08004621
 80044cc:	08004673 	.word	0x08004673
 80044d0:	08004689 	.word	0x08004689
 80044d4:	080046f5 	.word	0x080046f5
 80044d8:	08004737 	.word	0x08004737
 80044dc:	08004779 	.word	0x08004779
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (pdev, 
	                   phost->Control.setup.d8 , 
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	f103 0114 	add.w	r1, r3, #20
    USBH_CtlSendSetup     (pdev, 
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	795b      	ldrb	r3, [r3, #5]
 80044ea:	461a      	mov	r2, r3
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 ff05 	bl	80052fc <USBH_CtlSendSetup>
	                   phost->Control.hc_num_out);  
    phost->Control.state = CTRL_SETUP_WAIT;  
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2202      	movs	r2, #2
 80044f6:	771a      	strb	r2, [r3, #28]
    break; 
 80044f8:	e163      	b.n	80047c2 <USBH_HandleControl+0x33a>
    
  case CTRL_SETUP_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out); 
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	795b      	ldrb	r3, [r3, #5]
 80044fe:	4619      	mov	r1, r3
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7fe faa5 	bl	8002a50 <HCD_GetURB_State>
 8004506:	4603      	mov	r3, r0
 8004508:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == URB_DONE)
 800450a:	7bbb      	ldrb	r3, [r7, #14]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d12c      	bne.n	800456a <USBH_HandleControl+0xe2>
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	7d1b      	ldrb	r3, [r3, #20]
 8004514:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004518:	737b      	strb	r3, [r7, #13]
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	8b5b      	ldrh	r3, [r3, #26]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00e      	beq.n	8004540 <USBH_HandleControl+0xb8>
      {        
        timeout = DATA_STAGE_TIMEOUT;
 8004522:	4ba6      	ldr	r3, [pc, #664]	; (80047bc <USBH_HandleControl+0x334>)
 8004524:	f241 3288 	movw	r2, #5000	; 0x1388
 8004528:	801a      	strh	r2, [r3, #0]
        if (direction == USB_D2H)
 800452a:	7b7b      	ldrb	r3, [r7, #13]
 800452c:	2b80      	cmp	r3, #128	; 0x80
 800452e:	d103      	bne.n	8004538 <USBH_HandleControl+0xb0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2203      	movs	r2, #3
 8004534:	771a      	strb	r2, [r3, #28]
 8004536:	e010      	b.n	800455a <USBH_HandleControl+0xd2>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2205      	movs	r2, #5
 800453c:	771a      	strb	r2, [r3, #28]
 800453e:	e00c      	b.n	800455a <USBH_HandleControl+0xd2>
        } 
      }
      /* No DATA stage */
      else
      {
        timeout = NODATA_STAGE_TIMEOUT;
 8004540:	4b9e      	ldr	r3, [pc, #632]	; (80047bc <USBH_HandleControl+0x334>)
 8004542:	2232      	movs	r2, #50	; 0x32
 8004544:	801a      	strh	r2, [r3, #0]
        
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 8004546:	7b7b      	ldrb	r3, [r7, #13]
 8004548:	2b80      	cmp	r3, #128	; 0x80
 800454a:	d103      	bne.n	8004554 <USBH_HandleControl+0xcc>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2209      	movs	r2, #9
 8004550:	771a      	strb	r2, [r3, #28]
 8004552:	e002      	b.n	800455a <USBH_HandleControl+0xd2>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2207      	movs	r2, #7
 8004558:	771a      	strb	r2, [r3, #28]
        } 
      }          
      /* Set the delay timer to enable timeout for data stage completion */
      phost->Control.timer = HCD_GetCurrentFrame(pdev);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fe fa6a 	bl	8002a34 <HCD_GetCurrentFrame>
 8004560:	4603      	mov	r3, r0
 8004562:	b29a      	uxth	r2, r3
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	821a      	strh	r2, [r3, #16]
    else if(URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;     
      phost->Control.status = CTRL_XACTERR;
    }    
    break;
 8004568:	e120      	b.n	80047ac <USBH_HandleControl+0x324>
    else if(URB_Status == URB_ERROR)
 800456a:	7bbb      	ldrb	r3, [r7, #14]
 800456c:	2b03      	cmp	r3, #3
 800456e:	f040 811d 	bne.w	80047ac <USBH_HandleControl+0x324>
      phost->Control.state = CTRL_ERROR;     
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	220b      	movs	r2, #11
 8004576:	771a      	strb	r2, [r3, #28]
      phost->Control.status = CTRL_XACTERR;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2205      	movs	r2, #5
 800457c:	749a      	strb	r2, [r3, #18]
    break;
 800457e:	e115      	b.n	80047ac <USBH_HandleControl+0x324>
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
    USBH_CtlReceiveData(pdev,
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	6899      	ldr	r1, [r3, #8]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	899a      	ldrh	r2, [r3, #12]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	791b      	ldrb	r3, [r3, #4]
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 ff3e 	bl	800540e <USBH_CtlReceiveData>
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.hc_num_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2204      	movs	r2, #4
 8004596:	771a      	strb	r2, [r3, #28]
    break;    
 8004598:	e113      	b.n	80047c2 <USBH_HandleControl+0x33a>
    
  case CTRL_DATA_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	791b      	ldrb	r3, [r3, #4]
 800459e:	4619      	mov	r1, r3
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7fe fa55 	bl	8002a50 <HCD_GetURB_State>
 80045a6:	4603      	mov	r3, r0
 80045a8:	73bb      	strb	r3, [r7, #14]
    
    /* check is DATA packet transfered successfully */
    if  (URB_Status == URB_DONE)
 80045aa:	7bbb      	ldrb	r3, [r7, #14]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d102      	bne.n	80045b6 <USBH_HandleControl+0x12e>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	2209      	movs	r2, #9
 80045b4:	771a      	strb	r2, [r3, #28]
    }
   
    /* manage error cases*/
    if  (URB_Status == URB_STALL) 
 80045b6:	7bbb      	ldrb	r3, [r7, #14]
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d104      	bne.n	80045c6 <USBH_HandleControl+0x13e>
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	785a      	ldrb	r2, [r3, #1]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	701a      	strb	r2, [r3, #0]
    else if ((HCD_GetCurrentFrame(pdev)- phost->Control.timer) > timeout)
    {
      /* timeout for IN transfer */
      phost->Control.state = CTRL_ERROR; 
    }   
    break;
 80045c4:	e0f4      	b.n	80047b0 <USBH_HandleControl+0x328>
    else if (URB_Status == URB_ERROR)
 80045c6:	7bbb      	ldrb	r3, [r7, #14]
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d103      	bne.n	80045d4 <USBH_HandleControl+0x14c>
      phost->Control.state = CTRL_ERROR;    
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	220b      	movs	r2, #11
 80045d0:	771a      	strb	r2, [r3, #28]
    break;
 80045d2:	e0ed      	b.n	80047b0 <USBH_HandleControl+0x328>
    else if ((HCD_GetCurrentFrame(pdev)- phost->Control.timer) > timeout)
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7fe fa2d 	bl	8002a34 <HCD_GetCurrentFrame>
 80045da:	4602      	mov	r2, r0
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	8a1b      	ldrh	r3, [r3, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	4a76      	ldr	r2, [pc, #472]	; (80047bc <USBH_HandleControl+0x334>)
 80045e4:	8812      	ldrh	r2, [r2, #0]
 80045e6:	4293      	cmp	r3, r2
 80045e8:	f240 80e2 	bls.w	80047b0 <USBH_HandleControl+0x328>
      phost->Control.state = CTRL_ERROR; 
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	220b      	movs	r2, #11
 80045f0:	771a      	strb	r2, [r3, #28]
    break;
 80045f2:	e0dd      	b.n	80047b0 <USBH_HandleControl+0x328>
    
  case CTRL_DATA_OUT:
    /* Start DATA out transfer (only one DATA packet)*/
    pdev->host.hc[phost->Control.hc_num_out].toggle_out = 1; 
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	795b      	ldrb	r3, [r3, #5]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	331e      	adds	r3, #30
 80045fc:	015b      	lsls	r3, r3, #5
 80045fe:	4413      	add	r3, r2
 8004600:	3305      	adds	r3, #5
 8004602:	2201      	movs	r2, #1
 8004604:	701a      	strb	r2, [r3, #0]
        
    USBH_CtlSendData (pdev,
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6899      	ldr	r1, [r3, #8]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	899a      	ldrh	r2, [r3, #12]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	795b      	ldrb	r3, [r3, #5]
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fea6 	bl	8005364 <USBH_CtlSendData>
    



    
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2206      	movs	r2, #6
 800461c:	771a      	strb	r2, [r3, #28]
    break;
 800461e:	e0d0      	b.n	80047c2 <USBH_HandleControl+0x33a>
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);     
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	795b      	ldrb	r3, [r3, #5]
 8004624:	4619      	mov	r1, r3
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fe fa12 	bl	8002a50 <HCD_GetURB_State>
 800462c:	4603      	mov	r3, r0
 800462e:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == URB_DONE)
 8004630:	7bbb      	ldrb	r3, [r7, #14]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d103      	bne.n	800463e <USBH_HandleControl+0x1b6>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2207      	movs	r2, #7
 800463a:	771a      	strb	r2, [r3, #28]
    else if (URB_Status == URB_ERROR)
    {
      /* device error */
      phost->Control.state = CTRL_ERROR;      
    } 
    break;
 800463c:	e0ba      	b.n	80047b4 <USBH_HandleControl+0x32c>
    else if  (URB_Status == URB_STALL) 
 800463e:	7bbb      	ldrb	r3, [r7, #14]
 8004640:	2b04      	cmp	r3, #4
 8004642:	d107      	bne.n	8004654 <USBH_HandleControl+0x1cc>
      phost->gState =   phost->gStateBkp;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	785a      	ldrb	r2, [r3, #1]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	701a      	strb	r2, [r3, #0]
      phost->Control.state = CTRL_STALLED;  
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	220c      	movs	r2, #12
 8004650:	771a      	strb	r2, [r3, #28]
    break;
 8004652:	e0af      	b.n	80047b4 <USBH_HandleControl+0x32c>
    else if  (URB_Status == URB_NOTREADY)
 8004654:	7bbb      	ldrb	r3, [r7, #14]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d103      	bne.n	8004662 <USBH_HandleControl+0x1da>
      phost->Control.state = CTRL_DATA_OUT;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2205      	movs	r2, #5
 800465e:	771a      	strb	r2, [r3, #28]
    break;
 8004660:	e0a8      	b.n	80047b4 <USBH_HandleControl+0x32c>
    else if (URB_Status == URB_ERROR)
 8004662:	7bbb      	ldrb	r3, [r7, #14]
 8004664:	2b03      	cmp	r3, #3
 8004666:	f040 80a5 	bne.w	80047b4 <USBH_HandleControl+0x32c>
      phost->Control.state = CTRL_ERROR;      
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	220b      	movs	r2, #11
 800466e:	771a      	strb	r2, [r3, #28]
    break;
 8004670:	e0a0      	b.n	80047b4 <USBH_HandleControl+0x32c>
    
    
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (pdev,
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	791b      	ldrb	r3, [r3, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	2100      	movs	r1, #0
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fec7 	bl	800540e <USBH_CtlReceiveData>
                         0,
                         0,
                         phost->Control.hc_num_in);
    
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2208      	movs	r2, #8
 8004684:	771a      	strb	r2, [r3, #28]
    
    break;
 8004686:	e09c      	b.n	80047c2 <USBH_HandleControl+0x33a>
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	791b      	ldrb	r3, [r3, #4]
 800468c:	4619      	mov	r1, r3
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fe f9de 	bl	8002a50 <HCD_GetURB_State>
 8004694:	4603      	mov	r3, r0
 8004696:	73bb      	strb	r3, [r7, #14]
    
    if  ( URB_Status == URB_DONE)
 8004698:	7bbb      	ldrb	r3, [r7, #14]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d107      	bne.n	80046ae <USBH_HandleControl+0x226>
    { /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	785a      	ldrb	r2, [r3, #1]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	701a      	strb	r2, [r3, #0]
      phost->Control.state = CTRL_COMPLETE;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	220d      	movs	r2, #13
 80046aa:	771a      	strb	r2, [r3, #28]
      /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
      phost->Control.status = CTRL_STALL;
      status = USBH_NOT_SUPPORTED;
    }
    break;
 80046ac:	e084      	b.n	80047b8 <USBH_HandleControl+0x330>
    else if (URB_Status == URB_ERROR)
 80046ae:	7bbb      	ldrb	r3, [r7, #14]
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d103      	bne.n	80046bc <USBH_HandleControl+0x234>
      phost->Control.state = CTRL_ERROR;  
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	220b      	movs	r2, #11
 80046b8:	771a      	strb	r2, [r3, #28]
    break;
 80046ba:	e07d      	b.n	80047b8 <USBH_HandleControl+0x330>
    else if((HCD_GetCurrentFrame(pdev)\
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7fe f9b9 	bl	8002a34 <HCD_GetCurrentFrame>
 80046c2:	4602      	mov	r2, r0
      - phost->Control.timer) > timeout)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	8a1b      	ldrh	r3, [r3, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	4a3c      	ldr	r2, [pc, #240]	; (80047bc <USBH_HandleControl+0x334>)
 80046cc:	8812      	ldrh	r2, [r2, #0]
    else if((HCD_GetCurrentFrame(pdev)\
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d903      	bls.n	80046da <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_ERROR; 
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	220b      	movs	r2, #11
 80046d6:	771a      	strb	r2, [r3, #28]
    break;
 80046d8:	e06e      	b.n	80047b8 <USBH_HandleControl+0x330>
     else if(URB_Status == URB_STALL)
 80046da:	7bbb      	ldrb	r3, [r7, #14]
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d16b      	bne.n	80047b8 <USBH_HandleControl+0x330>
      phost->gState =   phost->gStateBkp;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	785a      	ldrb	r2, [r3, #1]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	701a      	strb	r2, [r3, #0]
      phost->Control.status = CTRL_STALL;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	2204      	movs	r2, #4
 80046ec:	749a      	strb	r2, [r3, #18]
      status = USBH_NOT_SUPPORTED;
 80046ee:	2303      	movs	r3, #3
 80046f0:	73fb      	strb	r3, [r7, #15]
    break;
 80046f2:	e061      	b.n	80047b8 <USBH_HandleControl+0x330>
    
  case CTRL_STATUS_OUT:
    pdev->host.hc[phost->Control.hc_num_out].toggle_out ^= 1; 
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	795b      	ldrb	r3, [r3, #5]
 80046f8:	4618      	mov	r0, r3
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	795b      	ldrb	r3, [r3, #5]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	331e      	adds	r3, #30
 8004702:	015b      	lsls	r3, r3, #5
 8004704:	4413      	add	r3, r2
 8004706:	3305      	adds	r3, #5
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	f083 0301 	eor.w	r3, r3, #1
 800470e:	b2d9      	uxtb	r1, r3
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	f100 031e 	add.w	r3, r0, #30
 8004716:	015b      	lsls	r3, r3, #5
 8004718:	4413      	add	r3, r2
 800471a:	3305      	adds	r3, #5
 800471c:	460a      	mov	r2, r1
 800471e:	701a      	strb	r2, [r3, #0]
    USBH_CtlSendData (pdev,
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	795b      	ldrb	r3, [r3, #5]
 8004724:	2200      	movs	r2, #0
 8004726:	2100      	movs	r1, #0
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 fe1b 	bl	8005364 <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.hc_num_out);
    
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	220a      	movs	r2, #10
 8004732:	771a      	strb	r2, [r3, #28]
    break;
 8004734:	e045      	b.n	80047c2 <USBH_HandleControl+0x33a>
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);  
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	795b      	ldrb	r3, [r3, #5]
 800473a:	4619      	mov	r1, r3
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7fe f987 	bl	8002a50 <HCD_GetURB_State>
 8004742:	4603      	mov	r3, r0
 8004744:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == URB_DONE)
 8004746:	7bbb      	ldrb	r3, [r7, #14]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d107      	bne.n	800475c <USBH_HandleControl+0x2d4>
    { 
      phost->gState =   phost->gStateBkp; 
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	785a      	ldrb	r2, [r3, #1]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	701a      	strb	r2, [r3, #0]
      phost->Control.state = CTRL_COMPLETE; 
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	220d      	movs	r2, #13
 8004758:	771a      	strb	r2, [r3, #28]
    }      
    else if (URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;      
    }
    break;
 800475a:	e031      	b.n	80047c0 <USBH_HandleControl+0x338>
    else if  (URB_Status == URB_NOTREADY)
 800475c:	7bbb      	ldrb	r3, [r7, #14]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d103      	bne.n	800476a <USBH_HandleControl+0x2e2>
      phost->Control.state = CTRL_STATUS_OUT;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2209      	movs	r2, #9
 8004766:	771a      	strb	r2, [r3, #28]
    break;
 8004768:	e02a      	b.n	80047c0 <USBH_HandleControl+0x338>
    else if (URB_Status == URB_ERROR)
 800476a:	7bbb      	ldrb	r3, [r7, #14]
 800476c:	2b03      	cmp	r3, #3
 800476e:	d127      	bne.n	80047c0 <USBH_HandleControl+0x338>
      phost->Control.state = CTRL_ERROR;      
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	220b      	movs	r2, #11
 8004774:	771a      	strb	r2, [r3, #28]
    break;
 8004776:	e023      	b.n	80047c0 <USBH_HandleControl+0x338>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	7b9b      	ldrb	r3, [r3, #14]
 800477c:	3301      	adds	r3, #1
 800477e:	b2da      	uxtb	r2, r3
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	739a      	strb	r2, [r3, #14]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	7b9b      	ldrb	r3, [r3, #14]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d803      	bhi.n	8004794 <USBH_HandleControl+0x30c>
    {
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2201      	movs	r2, #1
 8004790:	771a      	strb	r2, [r3, #28]
      phost->Control.status = CTRL_FAIL;
      phost->gState =   phost->gStateBkp;
      
      status = USBH_FAIL;
    }
    break;
 8004792:	e016      	b.n	80047c2 <USBH_HandleControl+0x33a>
      phost->Control.status = CTRL_FAIL;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2208      	movs	r2, #8
 8004798:	749a      	strb	r2, [r3, #18]
      phost->gState =   phost->gStateBkp;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	785a      	ldrb	r2, [r3, #1]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	701a      	strb	r2, [r3, #0]
      status = USBH_FAIL;
 80047a2:	2302      	movs	r3, #2
 80047a4:	73fb      	strb	r3, [r7, #15]
    break;
 80047a6:	e00c      	b.n	80047c2 <USBH_HandleControl+0x33a>
    
  default:
    break;
 80047a8:	bf00      	nop
 80047aa:	e00a      	b.n	80047c2 <USBH_HandleControl+0x33a>
    break;
 80047ac:	bf00      	nop
 80047ae:	e008      	b.n	80047c2 <USBH_HandleControl+0x33a>
    break;
 80047b0:	bf00      	nop
 80047b2:	e006      	b.n	80047c2 <USBH_HandleControl+0x33a>
    break;
 80047b4:	bf00      	nop
 80047b6:	e004      	b.n	80047c2 <USBH_HandleControl+0x33a>
    break;
 80047b8:	bf00      	nop
 80047ba:	e002      	b.n	80047c2 <USBH_HandleControl+0x33a>
 80047bc:	20000148 	.word	0x20000148
    break;
 80047c0:	bf00      	nop
  }
  return status;
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <USBH_Open_Channel>:
                            uint8_t hc_num,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	4608      	mov	r0, r1
 80047d6:	4611      	mov	r1, r2
 80047d8:	461a      	mov	r2, r3
 80047da:	4603      	mov	r3, r0
 80047dc:	70fb      	strb	r3, [r7, #3]
 80047de:	460b      	mov	r3, r1
 80047e0:	70bb      	strb	r3, [r7, #2]
 80047e2:	4613      	mov	r3, r2
 80047e4:	707b      	strb	r3, [r7, #1]

  pdev->host.hc[hc_num].ep_num = pdev->host.channel[hc_num]& 0x7F;
 80047e6:	78f9      	ldrb	r1, [r7, #3]
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	4413      	add	r3, r2
 80047f4:	889b      	ldrh	r3, [r3, #4]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047fc:	b2d8      	uxtb	r0, r3
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	014b      	lsls	r3, r1, #5
 8004802:	4413      	add	r3, r2
 8004804:	f203 33ad 	addw	r3, r3, #941	; 0x3ad
 8004808:	4602      	mov	r2, r0
 800480a:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].ep_is_in = (pdev->host.channel[hc_num] & 0x80 ) == 0x80;  
 800480c:	78f9      	ldrb	r1, [r7, #3]
 800480e:	78fb      	ldrb	r3, [r7, #3]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	4413      	add	r3, r2
 800481a:	889b      	ldrh	r3, [r3, #4]
 800481c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf14      	ite	ne
 8004824:	2301      	movne	r3, #1
 8004826:	2300      	moveq	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	4618      	mov	r0, r3
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	014b      	lsls	r3, r1, #5
 8004830:	4413      	add	r3, r2
 8004832:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8004836:	4602      	mov	r2, r0
 8004838:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].dev_addr = dev_address;  
 800483a:	78fb      	ldrb	r3, [r7, #3]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	015b      	lsls	r3, r3, #5
 8004840:	4413      	add	r3, r2
 8004842:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8004846:	78ba      	ldrb	r2, [r7, #2]
 8004848:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].ep_type = ep_type;  
 800484a:	78fb      	ldrb	r3, [r7, #3]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	015b      	lsls	r3, r3, #5
 8004850:	4413      	add	r3, r2
 8004852:	f203 33b1 	addw	r3, r3, #945	; 0x3b1
 8004856:	7c3a      	ldrb	r2, [r7, #16]
 8004858:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].max_packet = mps; 
 800485a:	78fb      	ldrb	r3, [r7, #3]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	015b      	lsls	r3, r3, #5
 8004860:	4413      	add	r3, r2
 8004862:	f203 33b2 	addw	r3, r3, #946	; 0x3b2
 8004866:	8aba      	ldrh	r2, [r7, #20]
 8004868:	801a      	strh	r2, [r3, #0]
  pdev->host.hc[hc_num].speed = speed; 
 800486a:	78fb      	ldrb	r3, [r7, #3]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	015b      	lsls	r3, r3, #5
 8004870:	4413      	add	r3, r2
 8004872:	f203 33af 	addw	r3, r3, #943	; 0x3af
 8004876:	787a      	ldrb	r2, [r7, #1]
 8004878:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].toggle_in = 0; 
 800487a:	78fb      	ldrb	r3, [r7, #3]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	331e      	adds	r3, #30
 8004880:	015b      	lsls	r3, r3, #5
 8004882:	4413      	add	r3, r2
 8004884:	3304      	adds	r3, #4
 8004886:	2200      	movs	r2, #0
 8004888:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].toggle_out = 0;   
 800488a:	78fb      	ldrb	r3, [r7, #3]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	331e      	adds	r3, #30
 8004890:	015b      	lsls	r3, r3, #5
 8004892:	4413      	add	r3, r2
 8004894:	3305      	adds	r3, #5
 8004896:	2200      	movs	r2, #0
 8004898:	701a      	strb	r2, [r3, #0]
  if(speed == HPRT0_PRTSPD_HIGH_SPEED)
 800489a:	787b      	ldrb	r3, [r7, #1]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d107      	bne.n	80048b0 <USBH_Open_Channel+0xe4>
  {
    pdev->host.hc[hc_num].do_ping = 1;
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	015b      	lsls	r3, r3, #5
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 80048ac:	2201      	movs	r2, #1
 80048ae:	701a      	strb	r2, [r3, #0]
  }
  
  USB_OTG_HC_Init(pdev, hc_num) ;
 80048b0:	78fb      	ldrb	r3, [r7, #3]
 80048b2:	4619      	mov	r1, r3
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7fd fd15 	bl	80022e4 <USB_OTG_HC_Init>
  
  return HC_OK; 
 80048ba:	2300      	movs	r3, #0

}
 80048bc:	4618      	mov	r0, r3
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <USBH_Modify_Channel>:
                            uint8_t hc_num,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	4608      	mov	r0, r1
 80048ce:	4611      	mov	r1, r2
 80048d0:	461a      	mov	r2, r3
 80048d2:	4603      	mov	r3, r0
 80048d4:	70fb      	strb	r3, [r7, #3]
 80048d6:	460b      	mov	r3, r1
 80048d8:	70bb      	strb	r3, [r7, #2]
 80048da:	4613      	mov	r3, r2
 80048dc:	707b      	strb	r3, [r7, #1]
  
  if(dev_address != 0)
 80048de:	78bb      	ldrb	r3, [r7, #2]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d007      	beq.n	80048f4 <USBH_Modify_Channel+0x30>
  {
    pdev->host.hc[hc_num].dev_addr = dev_address;  
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	015b      	lsls	r3, r3, #5
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 80048f0:	78ba      	ldrb	r2, [r7, #2]
 80048f2:	701a      	strb	r2, [r3, #0]
  }
  
  if((pdev->host.hc[hc_num].max_packet != mps) && (mps != 0))
 80048f4:	78fb      	ldrb	r3, [r7, #3]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	015b      	lsls	r3, r3, #5
 80048fa:	4413      	add	r3, r2
 80048fc:	f203 33b2 	addw	r3, r3, #946	; 0x3b2
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	8aba      	ldrh	r2, [r7, #20]
 8004904:	429a      	cmp	r2, r3
 8004906:	d00a      	beq.n	800491e <USBH_Modify_Channel+0x5a>
 8004908:	8abb      	ldrh	r3, [r7, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d007      	beq.n	800491e <USBH_Modify_Channel+0x5a>
  {
    pdev->host.hc[hc_num].max_packet = mps; 
 800490e:	78fb      	ldrb	r3, [r7, #3]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	015b      	lsls	r3, r3, #5
 8004914:	4413      	add	r3, r2
 8004916:	f203 33b2 	addw	r3, r3, #946	; 0x3b2
 800491a:	8aba      	ldrh	r2, [r7, #20]
 800491c:	801a      	strh	r2, [r3, #0]
  }
  
  if((pdev->host.hc[hc_num].speed != speed ) && (speed != 0 )) 
 800491e:	78fb      	ldrb	r3, [r7, #3]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	015b      	lsls	r3, r3, #5
 8004924:	4413      	add	r3, r2
 8004926:	f203 33af 	addw	r3, r3, #943	; 0x3af
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	787a      	ldrb	r2, [r7, #1]
 800492e:	429a      	cmp	r2, r3
 8004930:	d00a      	beq.n	8004948 <USBH_Modify_Channel+0x84>
 8004932:	787b      	ldrb	r3, [r7, #1]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d007      	beq.n	8004948 <USBH_Modify_Channel+0x84>
  {
    pdev->host.hc[hc_num].speed = speed; 
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	015b      	lsls	r3, r3, #5
 800493e:	4413      	add	r3, r2
 8004940:	f203 33af 	addw	r3, r3, #943	; 0x3af
 8004944:	787a      	ldrb	r2, [r7, #1]
 8004946:	701a      	strb	r2, [r3, #0]
  }
  
  USB_OTG_HC_Init(pdev, hc_num);
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	4619      	mov	r1, r3
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7fd fcc9 	bl	80022e4 <USB_OTG_HC_Init>
  return HC_OK; 
 8004952:	2300      	movs	r3, #0

}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <USBH_Alloc_Channel>:
  *         Allocate a new channel for the pipe
  * @param  ep_addr: End point for which the channel to be allocated
  * @retval hc_num: Host channel number
  */
uint8_t USBH_Alloc_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t ep_addr)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	70fb      	strb	r3, [r7, #3]
  uint16_t hc_num;
  
  hc_num =  USBH_GetFreeChannel(pdev);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f85a 	bl	8004a22 <USBH_GetFreeChannel>
 800496e:	4603      	mov	r3, r0
 8004970:	81fb      	strh	r3, [r7, #14]

  if (hc_num != HC_ERROR)
 8004972:	89fb      	ldrh	r3, [r7, #14]
 8004974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004978:	4293      	cmp	r3, r2
 800497a:	d00e      	beq.n	800499a <USBH_Alloc_Channel+0x3e>
  {
	pdev->host.channel[hc_num] = HC_USED | ep_addr;
 800497c:	89f9      	ldrh	r1, [r7, #14]
 800497e:	78fb      	ldrb	r3, [r7, #3]
 8004980:	b29b      	uxth	r3, r3
 8004982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800498a:	b298      	uxth	r0, r3
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	f501 7331 	add.w	r3, r1, #708	; 0x2c4
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	4413      	add	r3, r2
 8004996:	4602      	mov	r2, r0
 8004998:	809a      	strh	r2, [r3, #4]
  }
  return hc_num;
 800499a:	89fb      	ldrh	r3, [r7, #14]
 800499c:	b2db      	uxtb	r3, r3
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <USBH_Free_Channel>:
  *         Free the USB host channel
  * @param  idx: Channel number to be freed 
  * @retval Status
  */
uint8_t USBH_Free_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t idx)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	460b      	mov	r3, r1
 80049b0:	70fb      	strb	r3, [r7, #3]
   if(idx < HC_MAX)
 80049b2:	78fb      	ldrb	r3, [r7, #3]
 80049b4:	2b07      	cmp	r3, #7
 80049b6:	d811      	bhi.n	80049dc <USBH_Free_Channel+0x36>
   {
	 pdev->host.channel[idx] &= HC_USED_MASK;
 80049b8:	78f9      	ldrb	r1, [r7, #3]
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	4413      	add	r3, r2
 80049c6:	889b      	ldrh	r3, [r3, #4]
 80049c8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80049cc:	b298      	uxth	r0, r3
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	f501 7331 	add.w	r3, r1, #708	; 0x2c4
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	4413      	add	r3, r2
 80049d8:	4602      	mov	r2, r0
 80049da:	809a      	strh	r2, [r3, #4]
   }
   return USBH_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <USBH_DeAllocate_AllChannel>:
  *         Free all USB host channel
* @param  pdev : core instance
  * @retval Status
  */
uint8_t USBH_DeAllocate_AllChannel  (USB_OTG_CORE_HANDLE *pdev)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b085      	sub	sp, #20
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
   uint8_t idx;
   
   for (idx = 2; idx < HC_MAX ; idx ++)
 80049f2:	2302      	movs	r3, #2
 80049f4:	73fb      	strb	r3, [r7, #15]
 80049f6:	e00a      	b.n	8004a0e <USBH_DeAllocate_AllChannel+0x24>
   {
	 pdev->host.channel[idx] = 0;
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	4413      	add	r3, r2
 8004a04:	2200      	movs	r2, #0
 8004a06:	809a      	strh	r2, [r3, #4]
   for (idx = 2; idx < HC_MAX ; idx ++)
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	73fb      	strb	r3, [r7, #15]
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	2b07      	cmp	r3, #7
 8004a12:	d9f1      	bls.n	80049f8 <USBH_DeAllocate_AllChannel+0xe>
   }
   return USBH_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <USBH_GetFreeChannel>:
  *         Get a free channel number for allocation to a device endpoint
  * @param  None
  * @retval idx: Free Channel number
  */
static uint16_t USBH_GetFreeChannel (USB_OTG_CORE_HANDLE *pdev)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b085      	sub	sp, #20
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	73fb      	strb	r3, [r7, #15]
  
  for (idx = 0 ; idx < HC_MAX ; idx++)
 8004a2e:	2300      	movs	r3, #0
 8004a30:	73fb      	strb	r3, [r7, #15]
 8004a32:	e00f      	b.n	8004a54 <USBH_GetFreeChannel+0x32>
  {
	if ((pdev->host.channel[idx] & HC_USED) == 0)
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	4413      	add	r3, r2
 8004a40:	889b      	ldrh	r3, [r3, #4]
 8004a42:	b21b      	sxth	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	db02      	blt.n	8004a4e <USBH_GetFreeChannel+0x2c>
	{
	   return idx;
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	e007      	b.n	8004a5e <USBH_GetFreeChannel+0x3c>
  for (idx = 0 ; idx < HC_MAX ; idx++)
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	3301      	adds	r3, #1
 8004a52:	73fb      	strb	r3, [r7, #15]
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	2b07      	cmp	r3, #7
 8004a58:	d9ec      	bls.n	8004a34 <USBH_GetFreeChannel+0x12>
	} 
  }
  return HC_ERROR;
 8004a5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
	...

08004a6c <USBH_HID_InterfaceInit>:
* @param  hdev: Selected device property
* @retval  USBH_Status :Response for USB HID driver intialization
*/
static USBH_Status USBH_HID_InterfaceInit ( USB_OTG_CORE_HANDLE *pdev, 
                                           void *phost)
{	
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint8_t maxEP;
  USBH_HOST *pphost = phost;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	613b      	str	r3, [r7, #16]
    
  uint8_t num =0;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	75fb      	strb	r3, [r7, #23]
  USBH_Status status = USBH_BUSY ;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	75bb      	strb	r3, [r7, #22]
  HID_Machine.state = HID_ERROR;
 8004a82:	4b60      	ldr	r3, [pc, #384]	; (8004c04 <USBH_HID_InterfaceInit+0x198>)
 8004a84:	2206      	movs	r2, #6
 8004a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  
  if(pphost->device_prop.Itf_Desc[0].bInterfaceSubClass  == HID_BOOT_CODE)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	f040 80ac 	bne.w	8004bee <USBH_HID_InterfaceInit+0x182>
  {
    /*Decode Bootclass Protocl: Mouse or Keyboard*/
    if(pphost->device_prop.Itf_Desc[0].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d103      	bne.n	8004aa8 <USBH_HID_InterfaceInit+0x3c>
    {
      HID_Machine.cb = &HID_KEYBRD_cb;
 8004aa0:	4b58      	ldr	r3, [pc, #352]	; (8004c04 <USBH_HID_InterfaceInit+0x198>)
 8004aa2:	4a59      	ldr	r2, [pc, #356]	; (8004c08 <USBH_HID_InterfaceInit+0x19c>)
 8004aa4:	651a      	str	r2, [r3, #80]	; 0x50
 8004aa6:	e007      	b.n	8004ab8 <USBH_HID_InterfaceInit+0x4c>
    }
    else if(pphost->device_prop.Itf_Desc[0].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)		  
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d102      	bne.n	8004ab8 <USBH_HID_InterfaceInit+0x4c>
    {
      HID_Machine.cb = &HID_MOUSE_cb;
 8004ab2:	4b54      	ldr	r3, [pc, #336]	; (8004c04 <USBH_HID_InterfaceInit+0x198>)
 8004ab4:	4a55      	ldr	r2, [pc, #340]	; (8004c0c <USBH_HID_InterfaceInit+0x1a0>)
 8004ab6:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    HID_Machine.state     = HID_IDLE;
 8004ab8:	4b52      	ldr	r3, [pc, #328]	; (8004c04 <USBH_HID_InterfaceInit+0x198>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    HID_Machine.ctl_state = HID_REQ_IDLE; 
 8004ac0:	4b50      	ldr	r3, [pc, #320]	; (8004c04 <USBH_HID_InterfaceInit+0x198>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    HID_Machine.ep_addr   = pphost->device_prop.Ep_Desc[0][0].bEndpointAddress;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8004ace:	4b4d      	ldr	r3, [pc, #308]	; (8004c04 <USBH_HID_InterfaceInit+0x198>)
 8004ad0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    HID_Machine.length    = pphost->device_prop.Ep_Desc[0][0].wMaxPacketSize;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8004ada:	4b4a      	ldr	r3, [pc, #296]	; (8004c04 <USBH_HID_InterfaceInit+0x198>)
 8004adc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    HID_Machine.poll      = pphost->device_prop.Ep_Desc[0][0].bInterval ;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	4b46      	ldr	r3, [pc, #280]	; (8004c04 <USBH_HID_InterfaceInit+0x198>)
 8004aea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    
    if (HID_Machine.poll  < HID_MIN_POLL) 
 8004aee:	4b45      	ldr	r3, [pc, #276]	; (8004c04 <USBH_HID_InterfaceInit+0x198>)
 8004af0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004af4:	2b09      	cmp	r3, #9
 8004af6:	d803      	bhi.n	8004b00 <USBH_HID_InterfaceInit+0x94>
    {
       HID_Machine.poll = HID_MIN_POLL;
 8004af8:	4b42      	ldr	r3, [pc, #264]	; (8004c04 <USBH_HID_InterfaceInit+0x198>)
 8004afa:	220a      	movs	r2, #10
 8004afc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    
    /* Check fo available number of endpoints */
    /* Find the number of EPs in the Interface Descriptor */      
    /* Choose the lower number in order not to overrun the buffer allocated */
    maxEP = ( (pphost->device_prop.Itf_Desc[0].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ? 
             pphost->device_prop.Itf_Desc[0].bNumEndpoints :
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    maxEP = ( (pphost->device_prop.Itf_Desc[0].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ? 
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	bf28      	it	cs
 8004b0a:	2302      	movcs	r3, #2
 8004b0c:	73fb      	strb	r3, [r7, #15]
                 USBH_MAX_NUM_ENDPOINTS); 
    
    
    /* Decode endpoint IN and OUT address from interface descriptor */
    for (num=0; num < maxEP; num++)
 8004b0e:	2300      	movs	r3, #0
 8004b10:	75fb      	strb	r3, [r7, #23]
 8004b12:	e062      	b.n	8004bda <USBH_HID_InterfaceInit+0x16e>
    {
      if(pphost->device_prop.Ep_Desc[0][num].bEndpointAddress & 0x80)
 8004b14:	7dfb      	ldrb	r3, [r7, #23]
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	330a      	adds	r3, #10
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	789b      	ldrb	r3, [r3, #2]
 8004b20:	b25b      	sxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	da2b      	bge.n	8004b7e <USBH_HID_InterfaceInit+0x112>
      {
        HID_Machine.HIDIntInEp = (pphost->device_prop.Ep_Desc[0][num].bEndpointAddress);
 8004b26:	7dfb      	ldrb	r3, [r7, #23]
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	330a      	adds	r3, #10
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	4413      	add	r3, r2
 8004b30:	789a      	ldrb	r2, [r3, #2]
 8004b32:	4b34      	ldr	r3, [pc, #208]	; (8004c04 <USBH_HID_InterfaceInit+0x198>)
 8004b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        HID_Machine.hc_num_in  =\
               USBH_Alloc_Channel(pdev, 
 8004b38:	7dfb      	ldrb	r3, [r7, #23]
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	330a      	adds	r3, #10
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	4413      	add	r3, r2
 8004b42:	789b      	ldrb	r3, [r3, #2]
 8004b44:	4619      	mov	r1, r3
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff ff08 	bl	800495c <USBH_Alloc_Channel>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	461a      	mov	r2, r3
        HID_Machine.hc_num_in  =\
 8004b50:	4b2c      	ldr	r3, [pc, #176]	; (8004c04 <USBH_HID_InterfaceInit+0x198>)
 8004b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                  pphost->device_prop.Ep_Desc[0][num].bEndpointAddress);
        
        /* Open channel for IN endpoint */
        USBH_Open_Channel  (pdev,
 8004b56:	4b2b      	ldr	r3, [pc, #172]	; (8004c04 <USBH_HID_InterfaceInit+0x198>)
 8004b58:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 8004b68:	4b26      	ldr	r3, [pc, #152]	; (8004c04 <USBH_HID_InterfaceInit+0x198>)
 8004b6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b6e:	9301      	str	r3, [sp, #4]
 8004b70:	2303      	movs	r3, #3
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	4603      	mov	r3, r0
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff fe28 	bl	80047cc <USBH_Open_Channel>
 8004b7c:	e02a      	b.n	8004bd4 <USBH_HID_InterfaceInit+0x168>
                            EP_TYPE_INTR,
                            HID_Machine.length); 
      }
      else
      {
        HID_Machine.HIDIntOutEp = (pphost->device_prop.Ep_Desc[0][num].bEndpointAddress);
 8004b7e:	7dfb      	ldrb	r3, [r7, #23]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	330a      	adds	r3, #10
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	4413      	add	r3, r2
 8004b88:	789a      	ldrb	r2, [r3, #2]
 8004b8a:	4b1e      	ldr	r3, [pc, #120]	; (8004c04 <USBH_HID_InterfaceInit+0x198>)
 8004b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        HID_Machine.hc_num_out  =\
                USBH_Alloc_Channel(pdev, 
 8004b90:	7dfb      	ldrb	r3, [r7, #23]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	330a      	adds	r3, #10
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	4413      	add	r3, r2
 8004b9a:	789b      	ldrb	r3, [r3, #2]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff fedc 	bl	800495c <USBH_Alloc_Channel>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	461a      	mov	r2, r3
        HID_Machine.hc_num_out  =\
 8004ba8:	4b16      	ldr	r3, [pc, #88]	; (8004c04 <USBH_HID_InterfaceInit+0x198>)
 8004baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                   pphost->device_prop.Ep_Desc[0][num].bEndpointAddress);
        
        /* Open channel for OUT endpoint */
        USBH_Open_Channel  (pdev,
 8004bae:	4b15      	ldr	r3, [pc, #84]	; (8004c04 <USBH_HID_InterfaceInit+0x198>)
 8004bb0:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 8004bc0:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <USBH_HID_InterfaceInit+0x198>)
 8004bc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bc6:	9301      	str	r3, [sp, #4]
 8004bc8:	2303      	movs	r3, #3
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	4603      	mov	r3, r0
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7ff fdfc 	bl	80047cc <USBH_Open_Channel>
    for (num=0; num < maxEP; num++)
 8004bd4:	7dfb      	ldrb	r3, [r7, #23]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	75fb      	strb	r3, [r7, #23]
 8004bda:	7dfa      	ldrb	r2, [r7, #23]
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d398      	bcc.n	8004b14 <USBH_HID_InterfaceInit+0xa8>
                            HID_Machine.length); 
      }
      
    }   
    
     start_toggle =0;
 8004be2:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <USBH_HID_InterfaceInit+0x1a4>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
     status = USBH_OK; 
 8004be8:	2300      	movs	r3, #0
 8004bea:	75bb      	strb	r3, [r7, #22]
 8004bec:	e004      	b.n	8004bf8 <USBH_HID_InterfaceInit+0x18c>
  }
  else
  {
    pphost->usr_cb->DeviceNotSupported();   
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	4798      	blx	r3
  }
  
  return status;
 8004bf8:	7dbb      	ldrb	r3, [r7, #22]
  
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	200008b0 	.word	0x200008b0
 8004c08:	20000090 	.word	0x20000090
 8004c0c:	20000098 	.word	0x20000098
 8004c10:	2000014a 	.word	0x2000014a

08004c14 <USBH_HID_InterfaceDeInit>:
* @param  hdev: Selected device property
* @retval None
*/
void USBH_HID_InterfaceDeInit ( USB_OTG_CORE_HANDLE *pdev,
                               void *phost)
{	
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
   //USBH_HOST *pphost = phost;
    
  if(HID_Machine.hc_num_in != 0x00)
 8004c1e:	4b1a      	ldr	r3, [pc, #104]	; (8004c88 <USBH_HID_InterfaceDeInit+0x74>)
 8004c20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d011      	beq.n	8004c4c <USBH_HID_InterfaceDeInit+0x38>
  {   
    USB_OTG_HC_Halt(pdev, HID_Machine.hc_num_in);
 8004c28:	4b17      	ldr	r3, [pc, #92]	; (8004c88 <USBH_HID_InterfaceDeInit+0x74>)
 8004c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7fd fe03 	bl	800283c <USB_OTG_HC_Halt>
    USBH_Free_Channel  (pdev, HID_Machine.hc_num_in);
 8004c36:	4b14      	ldr	r3, [pc, #80]	; (8004c88 <USBH_HID_InterfaceDeInit+0x74>)
 8004c38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7ff feb1 	bl	80049a6 <USBH_Free_Channel>
    HID_Machine.hc_num_in = 0;     /* Reset the Channel as Free */  
 8004c44:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <USBH_HID_InterfaceDeInit+0x74>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }
  
  if(HID_Machine.hc_num_out != 0x00)
 8004c4c:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <USBH_HID_InterfaceDeInit+0x74>)
 8004c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d011      	beq.n	8004c7a <USBH_HID_InterfaceDeInit+0x66>
  {   
    USB_OTG_HC_Halt(pdev, HID_Machine.hc_num_out);
 8004c56:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <USBH_HID_InterfaceDeInit+0x74>)
 8004c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fd fdec 	bl	800283c <USB_OTG_HC_Halt>
    USBH_Free_Channel  (pdev, HID_Machine.hc_num_out);
 8004c64:	4b08      	ldr	r3, [pc, #32]	; (8004c88 <USBH_HID_InterfaceDeInit+0x74>)
 8004c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff fe9a 	bl	80049a6 <USBH_Free_Channel>
    HID_Machine.hc_num_out = 0;     /* Reset the Channel as Free */  
 8004c72:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <USBH_HID_InterfaceDeInit+0x74>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
 
  start_toggle = 0;
 8004c7a:	4b04      	ldr	r3, [pc, #16]	; (8004c8c <USBH_HID_InterfaceDeInit+0x78>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]
}
 8004c80:	bf00      	nop
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	200008b0 	.word	0x200008b0
 8004c8c:	2000014a 	.word	0x2000014a

08004c90 <USBH_HID_ClassRequest>:
* @param  hdev: Selected device property
* @retval  USBH_Status :Response for USB Set Protocol request
*/
static USBH_Status USBH_HID_ClassRequest(USB_OTG_CORE_HANDLE *pdev , 
                                         void *phost)
{   
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
    USBH_HOST *pphost = phost;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	613b      	str	r3, [r7, #16]
    
  USBH_Status status         = USBH_BUSY;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	75fb      	strb	r3, [r7, #23]
  USBH_Status classReqStatus = USBH_BUSY;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	73fb      	strb	r3, [r7, #15]
  
  
  /* Switch HID state machine */
  switch (HID_Machine.ctl_state)
 8004ca6:	4b35      	ldr	r3, [pc, #212]	; (8004d7c <USBH_HID_ClassRequest+0xec>)
 8004ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d857      	bhi.n	8004d60 <USBH_HID_ClassRequest+0xd0>
 8004cb0:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <USBH_HID_ClassRequest+0x28>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004ccd 	.word	0x08004ccd
 8004cbc:	08004cf5 	.word	0x08004cf5
 8004cc0:	08004ccd 	.word	0x08004ccd
 8004cc4:	08004d13 	.word	0x08004d13
 8004cc8:	08004d43 	.word	0x08004d43
  {
  case HID_IDLE:  
  case HID_REQ_GET_HID_DESC:
    
    /* Get HID Desc */ 
    if (USBH_Get_HID_Descriptor (pdev, pphost, USB_HID_DESC_SIZE)== USBH_OK)
 8004ccc:	2209      	movs	r2, #9
 8004cce:	6939      	ldr	r1, [r7, #16]
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f914 	bl	8004efe <USBH_Get_HID_Descriptor>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d143      	bne.n	8004d64 <USBH_HID_ClassRequest+0xd4>
    {
      
      USBH_ParseHIDDesc(&HID_Desc, pdev->host.Rx_Buffer);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4826      	ldr	r0, [pc, #152]	; (8004d80 <USBH_HID_ClassRequest+0xf0>)
 8004ce6:	f000 f979 	bl	8004fdc <USBH_ParseHIDDesc>
      HID_Machine.ctl_state = HID_REQ_GET_REPORT_DESC;
 8004cea:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <USBH_HID_ClassRequest+0xec>)
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    
    break;     
 8004cf2:	e037      	b.n	8004d64 <USBH_HID_ClassRequest+0xd4>
  case HID_REQ_GET_REPORT_DESC:
    
    
    /* Get Report Desc */ 
    if (USBH_Get_HID_ReportDescriptor(pdev , pphost, HID_Desc.wItemLength) == USBH_OK)
 8004cf4:	4b22      	ldr	r3, [pc, #136]	; (8004d80 <USBH_HID_ClassRequest+0xf0>)
 8004cf6:	891b      	ldrh	r3, [r3, #8]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	6939      	ldr	r1, [r7, #16]
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f8e3 	bl	8004ec8 <USBH_Get_HID_ReportDescriptor>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d12f      	bne.n	8004d68 <USBH_HID_ClassRequest+0xd8>
    {
      HID_Machine.ctl_state = HID_REQ_SET_IDLE;
 8004d08:	4b1c      	ldr	r3, [pc, #112]	; (8004d7c <USBH_HID_ClassRequest+0xec>)
 8004d0a:	2203      	movs	r2, #3
 8004d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    
    break;
 8004d10:	e02a      	b.n	8004d68 <USBH_HID_ClassRequest+0xd8>
    
  case HID_REQ_SET_IDLE:
    
    classReqStatus = USBH_Set_Idle (pdev, pphost, 0, 0);
 8004d12:	2300      	movs	r3, #0
 8004d14:	2200      	movs	r2, #0
 8004d16:	6939      	ldr	r1, [r7, #16]
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f90b 	bl	8004f34 <USBH_Set_Idle>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	73fb      	strb	r3, [r7, #15]
    
    /* set Idle */
    if (classReqStatus == USBH_OK)
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d104      	bne.n	8004d32 <USBH_HID_ClassRequest+0xa2>
    {
      HID_Machine.ctl_state = HID_REQ_SET_PROTOCOL;  
 8004d28:	4b14      	ldr	r3, [pc, #80]	; (8004d7c <USBH_HID_ClassRequest+0xec>)
 8004d2a:	2204      	movs	r2, #4
 8004d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    else if(classReqStatus == USBH_NOT_SUPPORTED) 
    {
      HID_Machine.ctl_state = HID_REQ_SET_PROTOCOL;        
    } 
    break; 
 8004d30:	e01c      	b.n	8004d6c <USBH_HID_ClassRequest+0xdc>
    else if(classReqStatus == USBH_NOT_SUPPORTED) 
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	2b03      	cmp	r3, #3
 8004d36:	d119      	bne.n	8004d6c <USBH_HID_ClassRequest+0xdc>
      HID_Machine.ctl_state = HID_REQ_SET_PROTOCOL;        
 8004d38:	4b10      	ldr	r3, [pc, #64]	; (8004d7c <USBH_HID_ClassRequest+0xec>)
 8004d3a:	2204      	movs	r2, #4
 8004d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    break; 
 8004d40:	e014      	b.n	8004d6c <USBH_HID_ClassRequest+0xdc>
    
  case HID_REQ_SET_PROTOCOL:
    /* set protocol */
    if (USBH_Set_Protocol (pdev ,pphost, 0) == USBH_OK)
 8004d42:	2200      	movs	r2, #0
 8004d44:	6939      	ldr	r1, [r7, #16]
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f920 	bl	8004f8c <USBH_Set_Protocol>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10e      	bne.n	8004d70 <USBH_HID_ClassRequest+0xe0>
    {
      HID_Machine.ctl_state = HID_REQ_IDLE;
 8004d52:	4b0a      	ldr	r3, [pc, #40]	; (8004d7c <USBH_HID_ClassRequest+0xec>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* all requests performed*/
      status = USBH_OK; 
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	75fb      	strb	r3, [r7, #23]
    } 
    break;
 8004d5e:	e007      	b.n	8004d70 <USBH_HID_ClassRequest+0xe0>
    
  default:
    break;
 8004d60:	bf00      	nop
 8004d62:	e006      	b.n	8004d72 <USBH_HID_ClassRequest+0xe2>
    break;     
 8004d64:	bf00      	nop
 8004d66:	e004      	b.n	8004d72 <USBH_HID_ClassRequest+0xe2>
    break;
 8004d68:	bf00      	nop
 8004d6a:	e002      	b.n	8004d72 <USBH_HID_ClassRequest+0xe2>
    break; 
 8004d6c:	bf00      	nop
 8004d6e:	e000      	b.n	8004d72 <USBH_HID_ClassRequest+0xe2>
    break;
 8004d70:	bf00      	nop
  }
  
  return status; 
 8004d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	200008b0 	.word	0x200008b0
 8004d80:	20000904 	.word	0x20000904

08004d84 <USBH_HID_Handle>:
* @param  hdev: Selected device property
* @retval USBH_Status
*/
static USBH_Status USBH_HID_Handle(USB_OTG_CORE_HANDLE *pdev , 
                                   void   *phost)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  USBH_HOST *pphost = phost;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	60fb      	str	r3, [r7, #12]
  USBH_Status status = USBH_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	72fb      	strb	r3, [r7, #11]
  
  switch (HID_Machine.state)
 8004d96:	4b4a      	ldr	r3, [pc, #296]	; (8004ec0 <USBH_HID_Handle+0x13c>)
 8004d98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d9c:	2b05      	cmp	r3, #5
 8004d9e:	f200 8084 	bhi.w	8004eaa <USBH_HID_Handle+0x126>
 8004da2:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <USBH_HID_Handle+0x24>)
 8004da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da8:	08004dc1 	.word	0x08004dc1
 8004dac:	08004eab 	.word	0x08004eab
 8004db0:	08004eab 	.word	0x08004eab
 8004db4:	08004de7 	.word	0x08004de7
 8004db8:	08004dd1 	.word	0x08004dd1
 8004dbc:	08004e1d 	.word	0x08004e1d
  {
    
  case HID_IDLE:
    HID_Machine.cb->Init();
 8004dc0:	4b3f      	ldr	r3, [pc, #252]	; (8004ec0 <USBH_HID_Handle+0x13c>)
 8004dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4798      	blx	r3
    HID_Machine.state = HID_SYNC;
 8004dc8:	4b3d      	ldr	r3, [pc, #244]	; (8004ec0 <USBH_HID_Handle+0x13c>)
 8004dca:	2204      	movs	r2, #4
 8004dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    
  case HID_SYNC:

    /* Sync with start of Even Frame */
    if(USB_OTG_IsEvenFrame(pdev) == TRUE)
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7fd f986 	bl	80020e2 <USB_OTG_IsEvenFrame>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d168      	bne.n	8004eae <USBH_HID_Handle+0x12a>
    {
      HID_Machine.state = HID_GET_DATA;  
 8004ddc:	4b38      	ldr	r3, [pc, #224]	; (8004ec0 <USBH_HID_Handle+0x13c>)
 8004dde:	2203      	movs	r2, #3
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    }
    break;
 8004de4:	e063      	b.n	8004eae <USBH_HID_Handle+0x12a>
    
  case HID_GET_DATA:

    USBH_InterruptReceiveData(pdev, 
                              HID_Machine.buff,
                              HID_Machine.length,
 8004de6:	4b36      	ldr	r3, [pc, #216]	; (8004ec0 <USBH_HID_Handle+0x13c>)
 8004de8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
    USBH_InterruptReceiveData(pdev, 
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	4b34      	ldr	r3, [pc, #208]	; (8004ec0 <USBH_HID_Handle+0x13c>)
 8004df0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004df4:	4932      	ldr	r1, [pc, #200]	; (8004ec0 <USBH_HID_Handle+0x13c>)
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fb40 	bl	800547c <USBH_InterruptReceiveData>
                              HID_Machine.hc_num_in);
    start_toggle = 1;
 8004dfc:	4b31      	ldr	r3, [pc, #196]	; (8004ec4 <USBH_HID_Handle+0x140>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	701a      	strb	r2, [r3, #0]
    
    HID_Machine.state = HID_POLL;
 8004e02:	4b2f      	ldr	r3, [pc, #188]	; (8004ec0 <USBH_HID_Handle+0x13c>)
 8004e04:	2205      	movs	r2, #5
 8004e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    HID_Machine.timer = HCD_GetCurrentFrame(pdev);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fd fe12 	bl	8002a34 <HCD_GetCurrentFrame>
 8004e10:	4603      	mov	r3, r0
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	4b2a      	ldr	r3, [pc, #168]	; (8004ec0 <USBH_HID_Handle+0x13c>)
 8004e16:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    break;
 8004e1a:	e04b      	b.n	8004eb4 <USBH_HID_Handle+0x130>
    
  case HID_POLL:
    if(( HCD_GetCurrentFrame(pdev) - HID_Machine.timer) >= HID_Machine.poll)
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7fd fe09 	bl	8002a34 <HCD_GetCurrentFrame>
 8004e22:	4602      	mov	r2, r0
 8004e24:	4b26      	ldr	r3, [pc, #152]	; (8004ec0 <USBH_HID_Handle+0x13c>)
 8004e26:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	4a24      	ldr	r2, [pc, #144]	; (8004ec0 <USBH_HID_Handle+0x13c>)
 8004e30:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d304      	bcc.n	8004e42 <USBH_HID_Handle+0xbe>
    {
      HID_Machine.state = HID_GET_DATA;
 8004e38:	4b21      	ldr	r3, [pc, #132]	; (8004ec0 <USBH_HID_Handle+0x13c>)
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        HID_Machine.state = HID_GET_DATA;
        
      }
      
    }      
    break;
 8004e40:	e037      	b.n	8004eb2 <USBH_HID_Handle+0x12e>
    else if(HCD_GetURB_State(pdev , HID_Machine.hc_num_in) == URB_DONE)
 8004e42:	4b1f      	ldr	r3, [pc, #124]	; (8004ec0 <USBH_HID_Handle+0x13c>)
 8004e44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e48:	4619      	mov	r1, r3
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fd fe00 	bl	8002a50 <HCD_GetURB_State>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d10d      	bne.n	8004e72 <USBH_HID_Handle+0xee>
      if(start_toggle == 1) /* handle data once */
 8004e56:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <USBH_HID_Handle+0x140>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d128      	bne.n	8004eb2 <USBH_HID_Handle+0x12e>
        start_toggle = 0;
 8004e60:	4b18      	ldr	r3, [pc, #96]	; (8004ec4 <USBH_HID_Handle+0x140>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	701a      	strb	r2, [r3, #0]
        HID_Machine.cb->Decode(HID_Machine.buff);
 8004e66:	4b16      	ldr	r3, [pc, #88]	; (8004ec0 <USBH_HID_Handle+0x13c>)
 8004e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	4814      	ldr	r0, [pc, #80]	; (8004ec0 <USBH_HID_Handle+0x13c>)
 8004e6e:	4798      	blx	r3
    break;
 8004e70:	e01f      	b.n	8004eb2 <USBH_HID_Handle+0x12e>
    else if(HCD_GetURB_State(pdev, HID_Machine.hc_num_in) == URB_STALL) /* IN Endpoint Stalled */
 8004e72:	4b13      	ldr	r3, [pc, #76]	; (8004ec0 <USBH_HID_Handle+0x13c>)
 8004e74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e78:	4619      	mov	r1, r3
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fd fde8 	bl	8002a50 <HCD_GetURB_State>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d115      	bne.n	8004eb2 <USBH_HID_Handle+0x12e>
      if( (USBH_ClrFeature(pdev, 
 8004e86:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <USBH_HID_Handle+0x13c>)
 8004e88:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8004e8c:	4b0c      	ldr	r3, [pc, #48]	; (8004ec0 <USBH_HID_Handle+0x13c>)
 8004e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e92:	68f9      	ldr	r1, [r7, #12]
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fc7a 	bl	800578e <USBH_ClrFeature>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d108      	bne.n	8004eb2 <USBH_HID_Handle+0x12e>
        HID_Machine.state = HID_GET_DATA;
 8004ea0:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <USBH_HID_Handle+0x13c>)
 8004ea2:	2203      	movs	r2, #3
 8004ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    break;
 8004ea8:	e003      	b.n	8004eb2 <USBH_HID_Handle+0x12e>
    
  default:
    break;
 8004eaa:	bf00      	nop
 8004eac:	e002      	b.n	8004eb4 <USBH_HID_Handle+0x130>
    break;
 8004eae:	bf00      	nop
 8004eb0:	e000      	b.n	8004eb4 <USBH_HID_Handle+0x130>
    break;
 8004eb2:	bf00      	nop
  }
  return status;
 8004eb4:	7afb      	ldrb	r3, [r7, #11]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	200008b0 	.word	0x200008b0
 8004ec4:	2000014a 	.word	0x2000014a

08004ec8 <USBH_Get_HID_ReportDescriptor>:
* @retval USBH_Status : Response for USB HID Get Report Descriptor Request
*/
static USBH_Status USBH_Get_HID_ReportDescriptor (USB_OTG_CORE_HANDLE *pdev,
                                                  USBH_HOST *phost,
                                                  uint16_t length)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	80fb      	strh	r3, [r7, #6]
  status = USBH_GetDescriptor(pdev,
                              phost,
                              USB_REQ_RECIPIENT_INTERFACE
                                | USB_REQ_TYPE_STANDARD,                                  
                                USB_DESC_HID_REPORT, 
                                pdev->host.Rx_Buffer,
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f503 7388 	add.w	r3, r3, #272	; 0x110
  status = USBH_GetDescriptor(pdev,
 8004edc:	88fa      	ldrh	r2, [r7, #6]
 8004ede:	9201      	str	r2, [sp, #4]
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	68b9      	ldr	r1, [r7, #8]
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 fbd9 	bl	80056a2 <USBH_GetDescriptor>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	75fb      	strb	r3, [r7, #23]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/
  
  
  return status;
 8004ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <USBH_Get_HID_Descriptor>:
* @retval USBH_Status : Response for USB HID Get Report Descriptor Request
*/
static USBH_Status USBH_Get_HID_Descriptor (USB_OTG_CORE_HANDLE *pdev,
                                            USBH_HOST *phost,
                                            uint16_t length)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b088      	sub	sp, #32
 8004f02:	af02      	add	r7, sp, #8
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	80fb      	strh	r3, [r7, #6]
  status = USBH_GetDescriptor(pdev, 
                              phost,
                              USB_REQ_RECIPIENT_INTERFACE
                                | USB_REQ_TYPE_STANDARD,                                  
                                USB_DESC_HID,
                                pdev->host.Rx_Buffer,
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f503 7388 	add.w	r3, r3, #272	; 0x110
  status = USBH_GetDescriptor(pdev, 
 8004f12:	88fa      	ldrh	r2, [r7, #6]
 8004f14:	9201      	str	r2, [sp, #4]
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	68b9      	ldr	r1, [r7, #8]
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 fbbe 	bl	80056a2 <USBH_GetDescriptor>
 8004f26:	4603      	mov	r3, r0
 8004f28:	75fb      	strb	r3, [r7, #23]
                                length);
 
  return status;
 8004f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <USBH_Set_Idle>:
*/
static USBH_Status USBH_Set_Idle (USB_OTG_CORE_HANDLE *pdev,
                                  USBH_HOST *phost,
                                  uint8_t duration,
                                  uint8_t reportId)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	4611      	mov	r1, r2
 8004f40:	461a      	mov	r2, r3
 8004f42:	460b      	mov	r3, r1
 8004f44:	71fb      	strb	r3, [r7, #7]
 8004f46:	4613      	mov	r3, r2
 8004f48:	71bb      	strb	r3, [r7, #6]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2221      	movs	r2, #33	; 0x21
 8004f4e:	751a      	strb	r2, [r3, #20]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	220a      	movs	r2, #10
 8004f54:	755a      	strb	r2, [r3, #21]
  phost->Control.setup.b.wValue.w = (duration << 8 ) | reportId;
 8004f56:	79fb      	ldrb	r3, [r7, #7]
 8004f58:	021b      	lsls	r3, r3, #8
 8004f5a:	b21a      	sxth	r2, r3
 8004f5c:	79bb      	ldrb	r3, [r7, #6]
 8004f5e:	b21b      	sxth	r3, r3
 8004f60:	4313      	orrs	r3, r2
 8004f62:	b21b      	sxth	r3, r3
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	82da      	strh	r2, [r3, #22]
  
  phost->Control.setup.b.wIndex.w = 0;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 0;
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2200      	movs	r2, #0
 8004f74:	835a      	strh	r2, [r3, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
 8004f76:	2300      	movs	r3, #0
 8004f78:	2200      	movs	r2, #0
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f97b 	bl	8005278 <USBH_CtlReq>
 8004f82:	4603      	mov	r3, r0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <USBH_Set_Protocol>:
* @retval USBH_Status : Response for USB Set Protocol request
*/
static USBH_Status USBH_Set_Protocol(USB_OTG_CORE_HANDLE *pdev,
                                     USBH_HOST *phost,
                                     uint8_t protocol)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	4613      	mov	r3, r2
 8004f98:	71fb      	strb	r3, [r7, #7]
  
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2221      	movs	r2, #33	; 0x21
 8004f9e:	751a      	strb	r2, [r3, #20]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	220b      	movs	r2, #11
 8004fa4:	755a      	strb	r2, [r3, #21]
  
  if(protocol != 0)
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <USBH_Set_Protocol+0x28>
  {
    /* Boot Protocol */
    phost->Control.setup.b.wValue.w = 0;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	82da      	strh	r2, [r3, #22]
 8004fb2:	e002      	b.n	8004fba <USBH_Set_Protocol+0x2e>
  }
  else
  {
    /*Report Protocol*/
    phost->Control.setup.b.wValue.w = 1;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	82da      	strh	r2, [r3, #22]
  }
  
  phost->Control.setup.b.wIndex.w = 0;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 0;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	835a      	strh	r2, [r3, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	2200      	movs	r2, #0
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 f953 	bl	8005278 <USBH_CtlReq>
 8004fd2:	4603      	mov	r3, r0
  
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <USBH_ParseHIDDesc>:
*         This function Parse the HID descriptor
* @param  buf: Buffer where the source descriptor is available
* @retval None
*/
static void  USBH_ParseHIDDesc (USBH_HIDDesc_TypeDef *desc, uint8_t *buf)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  
  desc->bLength                  = *(uint8_t  *) (buf + 0);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781a      	ldrb	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	701a      	strb	r2, [r3, #0]
  desc->bDescriptorType          = *(uint8_t  *) (buf + 1);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	785a      	ldrb	r2, [r3, #1]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	705a      	strb	r2, [r3, #1]
  desc->bcdHID                   =  LE16  (buf + 2);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	3302      	adds	r3, #2
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	3302      	adds	r3, #2
 8005002:	3301      	adds	r3, #1
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	b29b      	uxth	r3, r3
 8005008:	021b      	lsls	r3, r3, #8
 800500a:	b29b      	uxth	r3, r3
 800500c:	4413      	add	r3, r2
 800500e:	b29a      	uxth	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	805a      	strh	r2, [r3, #2]
  desc->bCountryCode             = *(uint8_t  *) (buf + 4);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	791a      	ldrb	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	711a      	strb	r2, [r3, #4]
  desc->bNumDescriptors          = *(uint8_t  *) (buf + 5);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	795a      	ldrb	r2, [r3, #5]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	715a      	strb	r2, [r3, #5]
  desc->bReportDescriptorType    = *(uint8_t  *) (buf + 6);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	799a      	ldrb	r2, [r3, #6]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	719a      	strb	r2, [r3, #6]
  desc->wItemLength              =  LE16  (buf + 7);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	3307      	adds	r3, #7
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	b29a      	uxth	r2, r3
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	3307      	adds	r3, #7
 8005038:	3301      	adds	r3, #1
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	b29b      	uxth	r3, r3
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	b29b      	uxth	r3, r3
 8005042:	4413      	add	r3, r2
 8005044:	b29a      	uxth	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	811a      	strh	r2, [r3, #8]
  
} 
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <KEYBRD_Init>:
 *         Initialize the keyboard function.
 * @param  None
 * @retval None
 */
static void  KEYBRD_Init (void)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	af00      	add	r7, sp, #0
	/* Call User Init*/
	USR_KEYBRD_Init();
 800505a:	f000 ff47 	bl	8005eec <USR_KEYBRD_Init>
}
 800505e:	bf00      	nop
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <KEYBRD_Decode>:
 * @param  pbuf : Pointer to the HID IN report data buffer
 * @retval None
 */

static void KEYBRD_Decode(uint8_t *pbuf)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
	uint8_t   ix;
	uint8_t   jx;
	uint8_t   error;
	uint8_t   output;

	nbr_keys      = 0;
 800506c:	4b66      	ldr	r3, [pc, #408]	; (8005208 <KEYBRD_Decode+0x1a4>)
 800506e:	2200      	movs	r2, #0
 8005070:	701a      	strb	r2, [r3, #0]
	nbr_keys_new  = 0;
 8005072:	4b66      	ldr	r3, [pc, #408]	; (800520c <KEYBRD_Decode+0x1a8>)
 8005074:	2200      	movs	r2, #0
 8005076:	701a      	strb	r2, [r3, #0]
	nbr_keys_last = 0;
 8005078:	4b65      	ldr	r3, [pc, #404]	; (8005210 <KEYBRD_Decode+0x1ac>)
 800507a:	2200      	movs	r2, #0
 800507c:	701a      	strb	r2, [r3, #0]
	key_newest    = 0x00;
 800507e:	4b65      	ldr	r3, [pc, #404]	; (8005214 <KEYBRD_Decode+0x1b0>)
 8005080:	2200      	movs	r2, #0
 8005082:	701a      	strb	r2, [r3, #0]


	/* Check if Shift key is pressed */
	if ((pbuf[0] == KBD_LEFT_SHIFT) || (pbuf[0] == KBD_RIGHT_SHIFT)) {
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b02      	cmp	r3, #2
 800508a:	d003      	beq.n	8005094 <KEYBRD_Decode+0x30>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	2b20      	cmp	r3, #32
 8005092:	d103      	bne.n	800509c <KEYBRD_Decode+0x38>
		shift = TRUE;
 8005094:	4b60      	ldr	r3, [pc, #384]	; (8005218 <KEYBRD_Decode+0x1b4>)
 8005096:	2201      	movs	r2, #1
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	e002      	b.n	80050a2 <KEYBRD_Decode+0x3e>
	} else {
		shift = FALSE;
 800509c:	4b5e      	ldr	r3, [pc, #376]	; (8005218 <KEYBRD_Decode+0x1b4>)
 800509e:	2200      	movs	r2, #0
 80050a0:	701a      	strb	r2, [r3, #0]
	}

	error = FALSE;
 80050a2:	2300      	movs	r3, #0
 80050a4:	737b      	strb	r3, [r7, #13]

	/* Check for the value of pressed key */
	for (ix = 2; ix < 2 + KBR_MAX_NBR_PRESSED; ix++) {
 80050a6:	2302      	movs	r3, #2
 80050a8:	73fb      	strb	r3, [r7, #15]
 80050aa:	e016      	b.n	80050da <KEYBRD_Decode+0x76>
		if ((pbuf[ix] == 0x01) ||
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	4413      	add	r3, r2
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d00b      	beq.n	80050d0 <KEYBRD_Decode+0x6c>
				(pbuf[ix] == 0x02) ||
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	4413      	add	r3, r2
 80050be:	781b      	ldrb	r3, [r3, #0]
		if ((pbuf[ix] == 0x01) ||
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d005      	beq.n	80050d0 <KEYBRD_Decode+0x6c>
				(pbuf[ix] == 0x03)) {
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	4413      	add	r3, r2
 80050ca:	781b      	ldrb	r3, [r3, #0]
				(pbuf[ix] == 0x02) ||
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d101      	bne.n	80050d4 <KEYBRD_Decode+0x70>
			error = TRUE;
 80050d0:	2301      	movs	r3, #1
 80050d2:	737b      	strb	r3, [r7, #13]
	for (ix = 2; ix < 2 + KBR_MAX_NBR_PRESSED; ix++) {
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	3301      	adds	r3, #1
 80050d8:	73fb      	strb	r3, [r7, #15]
 80050da:	7bfb      	ldrb	r3, [r7, #15]
 80050dc:	2b07      	cmp	r3, #7
 80050de:	d9e5      	bls.n	80050ac <KEYBRD_Decode+0x48>
		}
	}

	if (error == TRUE) {
 80050e0:	7b7b      	ldrb	r3, [r7, #13]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	f000 808c 	beq.w	8005200 <KEYBRD_Decode+0x19c>
		return;
	}
	HC05_HID_SendKeyboardState(pbuf);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7fb f8a1 	bl	8000230 <HC05_HID_SendKeyboardState>
	nbr_keys     = 0;
 80050ee:	4b46      	ldr	r3, [pc, #280]	; (8005208 <KEYBRD_Decode+0x1a4>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	701a      	strb	r2, [r3, #0]
	nbr_keys_new = 0;
 80050f4:	4b45      	ldr	r3, [pc, #276]	; (800520c <KEYBRD_Decode+0x1a8>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	701a      	strb	r2, [r3, #0]
	for (ix = 2; ix < 2 + KBR_MAX_NBR_PRESSED; ix++)
 80050fa:	2302      	movs	r3, #2
 80050fc:	73fb      	strb	r3, [r7, #15]
 80050fe:	e041      	b.n	8005184 <KEYBRD_Decode+0x120>
	{
		if (pbuf[ix] != 0)
 8005100:	7bfb      	ldrb	r3, [r7, #15]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	4413      	add	r3, r2
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d038      	beq.n	800517e <KEYBRD_Decode+0x11a>
		{
			keys[nbr_keys] = pbuf[ix];
 800510c:	4b3e      	ldr	r3, [pc, #248]	; (8005208 <KEYBRD_Decode+0x1a4>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	4619      	mov	r1, r3
 8005112:	7bfb      	ldrb	r3, [r7, #15]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	4413      	add	r3, r2
 8005118:	781a      	ldrb	r2, [r3, #0]
 800511a:	4b40      	ldr	r3, [pc, #256]	; (800521c <KEYBRD_Decode+0x1b8>)
 800511c:	545a      	strb	r2, [r3, r1]
			nbr_keys++;
 800511e:	4b3a      	ldr	r3, [pc, #232]	; (8005208 <KEYBRD_Decode+0x1a4>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	3301      	adds	r3, #1
 8005124:	b2da      	uxtb	r2, r3
 8005126:	4b38      	ldr	r3, [pc, #224]	; (8005208 <KEYBRD_Decode+0x1a4>)
 8005128:	701a      	strb	r2, [r3, #0]
			for (jx = 0; jx < nbr_keys_last; jx++)
 800512a:	2300      	movs	r3, #0
 800512c:	73bb      	strb	r3, [r7, #14]
 800512e:	e00b      	b.n	8005148 <KEYBRD_Decode+0xe4>
			{
				if (pbuf[ix] == keys_last[jx])
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	4413      	add	r3, r2
 8005136:	781a      	ldrb	r2, [r3, #0]
 8005138:	7bbb      	ldrb	r3, [r7, #14]
 800513a:	4939      	ldr	r1, [pc, #228]	; (8005220 <KEYBRD_Decode+0x1bc>)
 800513c:	5ccb      	ldrb	r3, [r1, r3]
 800513e:	429a      	cmp	r2, r3
 8005140:	d008      	beq.n	8005154 <KEYBRD_Decode+0xf0>
			for (jx = 0; jx < nbr_keys_last; jx++)
 8005142:	7bbb      	ldrb	r3, [r7, #14]
 8005144:	3301      	adds	r3, #1
 8005146:	73bb      	strb	r3, [r7, #14]
 8005148:	4b31      	ldr	r3, [pc, #196]	; (8005210 <KEYBRD_Decode+0x1ac>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	7bba      	ldrb	r2, [r7, #14]
 800514e:	429a      	cmp	r2, r3
 8005150:	d3ee      	bcc.n	8005130 <KEYBRD_Decode+0xcc>
 8005152:	e000      	b.n	8005156 <KEYBRD_Decode+0xf2>
				{
					break;
 8005154:	bf00      	nop
				}
			}

			if (jx == nbr_keys_last) {
 8005156:	4b2e      	ldr	r3, [pc, #184]	; (8005210 <KEYBRD_Decode+0x1ac>)
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	7bba      	ldrb	r2, [r7, #14]
 800515c:	429a      	cmp	r2, r3
 800515e:	d10e      	bne.n	800517e <KEYBRD_Decode+0x11a>
				keys_new[nbr_keys_new] = pbuf[ix];
 8005160:	4b2a      	ldr	r3, [pc, #168]	; (800520c <KEYBRD_Decode+0x1a8>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	4619      	mov	r1, r3
 8005166:	7bfb      	ldrb	r3, [r7, #15]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	4413      	add	r3, r2
 800516c:	781a      	ldrb	r2, [r3, #0]
 800516e:	4b2d      	ldr	r3, [pc, #180]	; (8005224 <KEYBRD_Decode+0x1c0>)
 8005170:	545a      	strb	r2, [r3, r1]
				nbr_keys_new++;
 8005172:	4b26      	ldr	r3, [pc, #152]	; (800520c <KEYBRD_Decode+0x1a8>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	3301      	adds	r3, #1
 8005178:	b2da      	uxtb	r2, r3
 800517a:	4b24      	ldr	r3, [pc, #144]	; (800520c <KEYBRD_Decode+0x1a8>)
 800517c:	701a      	strb	r2, [r3, #0]
	for (ix = 2; ix < 2 + KBR_MAX_NBR_PRESSED; ix++)
 800517e:	7bfb      	ldrb	r3, [r7, #15]
 8005180:	3301      	adds	r3, #1
 8005182:	73fb      	strb	r3, [r7, #15]
 8005184:	7bfb      	ldrb	r3, [r7, #15]
 8005186:	2b07      	cmp	r3, #7
 8005188:	d9ba      	bls.n	8005100 <KEYBRD_Decode+0x9c>
			}
		}
	}

	if (nbr_keys_new == 1) {
 800518a:	4b20      	ldr	r3, [pc, #128]	; (800520c <KEYBRD_Decode+0x1a8>)
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d11f      	bne.n	80051d2 <KEYBRD_Decode+0x16e>
		key_newest = keys_new[0];
 8005192:	4b24      	ldr	r3, [pc, #144]	; (8005224 <KEYBRD_Decode+0x1c0>)
 8005194:	781a      	ldrb	r2, [r3, #0]
 8005196:	4b1f      	ldr	r3, [pc, #124]	; (8005214 <KEYBRD_Decode+0x1b0>)
 8005198:	701a      	strb	r2, [r3, #0]

		if (shift == TRUE) {
 800519a:	4b1f      	ldr	r3, [pc, #124]	; (8005218 <KEYBRD_Decode+0x1b4>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d109      	bne.n	80051b6 <KEYBRD_Decode+0x152>
			output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[key_newest]];
 80051a2:	4b1c      	ldr	r3, [pc, #112]	; (8005214 <KEYBRD_Decode+0x1b0>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	4b1f      	ldr	r3, [pc, #124]	; (8005228 <KEYBRD_Decode+0x1c4>)
 80051aa:	5c9b      	ldrb	r3, [r3, r2]
 80051ac:	461a      	mov	r2, r3
 80051ae:	4b1f      	ldr	r3, [pc, #124]	; (800522c <KEYBRD_Decode+0x1c8>)
 80051b0:	569b      	ldrsb	r3, [r3, r2]
 80051b2:	733b      	strb	r3, [r7, #12]
 80051b4:	e008      	b.n	80051c8 <KEYBRD_Decode+0x164>
		} else {
			output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[key_newest]];
 80051b6:	4b17      	ldr	r3, [pc, #92]	; (8005214 <KEYBRD_Decode+0x1b0>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	4b1a      	ldr	r3, [pc, #104]	; (8005228 <KEYBRD_Decode+0x1c4>)
 80051be:	5c9b      	ldrb	r3, [r3, r2]
 80051c0:	461a      	mov	r2, r3
 80051c2:	4b1b      	ldr	r3, [pc, #108]	; (8005230 <KEYBRD_Decode+0x1cc>)
 80051c4:	569b      	ldrsb	r3, [r3, r2]
 80051c6:	733b      	strb	r3, [r7, #12]
		}

		/* call user process handle */
		USR_KEYBRD_ProcessData(output);
 80051c8:	7b3b      	ldrb	r3, [r7, #12]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fea0 	bl	8005f10 <USR_KEYBRD_ProcessData>
 80051d0:	e002      	b.n	80051d8 <KEYBRD_Decode+0x174>
	} else {
		key_newest = 0x00;
 80051d2:	4b10      	ldr	r3, [pc, #64]	; (8005214 <KEYBRD_Decode+0x1b0>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	701a      	strb	r2, [r3, #0]
	}


	nbr_keys_last  = nbr_keys;
 80051d8:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <KEYBRD_Decode+0x1a4>)
 80051da:	781a      	ldrb	r2, [r3, #0]
 80051dc:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <KEYBRD_Decode+0x1ac>)
 80051de:	701a      	strb	r2, [r3, #0]
	for (ix = 0; ix < KBR_MAX_NBR_PRESSED; ix++) {
 80051e0:	2300      	movs	r3, #0
 80051e2:	73fb      	strb	r3, [r7, #15]
 80051e4:	e008      	b.n	80051f8 <KEYBRD_Decode+0x194>
		keys_last[ix] = keys[ix];
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	7bfa      	ldrb	r2, [r7, #15]
 80051ea:	490c      	ldr	r1, [pc, #48]	; (800521c <KEYBRD_Decode+0x1b8>)
 80051ec:	5c89      	ldrb	r1, [r1, r2]
 80051ee:	4a0c      	ldr	r2, [pc, #48]	; (8005220 <KEYBRD_Decode+0x1bc>)
 80051f0:	54d1      	strb	r1, [r2, r3]
	for (ix = 0; ix < KBR_MAX_NBR_PRESSED; ix++) {
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
 80051f4:	3301      	adds	r3, #1
 80051f6:	73fb      	strb	r3, [r7, #15]
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	2b05      	cmp	r3, #5
 80051fc:	d9f3      	bls.n	80051e6 <KEYBRD_Decode+0x182>
 80051fe:	e000      	b.n	8005202 <KEYBRD_Decode+0x19e>
		return;
 8005200:	bf00      	nop
	}
}
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	2000014b 	.word	0x2000014b
 800520c:	2000014c 	.word	0x2000014c
 8005210:	2000014d 	.word	0x2000014d
 8005214:	2000014e 	.word	0x2000014e
 8005218:	2000014f 	.word	0x2000014f
 800521c:	20000150 	.word	0x20000150
 8005220:	20000158 	.word	0x20000158
 8005224:	20000160 	.word	0x20000160
 8005228:	0800630c 	.word	0x0800630c
 800522c:	08006478 	.word	0x08006478
 8005230:	080063f4 	.word	0x080063f4

08005234 <MOUSE_Init>:
*         Init Mouse State.
* @param  None
* @retval None
*/
static void  MOUSE_Init ( void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
 /* Call User Init*/
 USR_MOUSE_Init();
 8005238:	f000 fd9e 	bl	8005d78 <USR_MOUSE_Init>
}
 800523c:	bf00      	nop
 800523e:	bd80      	pop	{r7, pc}

08005240 <MOUSE_Decode>:
*         Decode Mouse data
* @param  data : Pointer to Mouse HID data buffer
* @retval None
*/
static void  MOUSE_Decode(uint8_t *data)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  HID_MOUSE_Data.button = data[0];
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	781a      	ldrb	r2, [r3, #0]
 800524c:	4b09      	ldr	r3, [pc, #36]	; (8005274 <MOUSE_Decode+0x34>)
 800524e:	70da      	strb	r2, [r3, #3]

  HID_MOUSE_Data.x      = data[1];
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	785a      	ldrb	r2, [r3, #1]
 8005254:	4b07      	ldr	r3, [pc, #28]	; (8005274 <MOUSE_Decode+0x34>)
 8005256:	701a      	strb	r2, [r3, #0]
  HID_MOUSE_Data.y      = data[2];
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	789a      	ldrb	r2, [r3, #2]
 800525c:	4b05      	ldr	r3, [pc, #20]	; (8005274 <MOUSE_Decode+0x34>)
 800525e:	705a      	strb	r2, [r3, #1]
  
  USR_MOUSE_ProcessData(&HID_MOUSE_Data);
 8005260:	4804      	ldr	r0, [pc, #16]	; (8005274 <MOUSE_Decode+0x34>)
 8005262:	f000 fdb5 	bl	8005dd0 <USR_MOUSE_ProcessData>

  HC05_HID_SendMouseState(data);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7fb f816 	bl	8000298 <HC05_HID_SendMouseState>

}
 800526c:	bf00      	nop
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20000918 	.word	0x20000918

08005278 <USBH_CtlReq>:
  */
USBH_Status USBH_CtlReq     (USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	807b      	strh	r3, [r7, #2]
  USBH_Status status;
  status = USBH_BUSY;
 8005286:	2301      	movs	r3, #1
 8005288:	75fb      	strb	r3, [r7, #23]
  
  switch (phost->RequestState)
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	78db      	ldrb	r3, [r3, #3]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d002      	beq.n	8005298 <USBH_CtlReq+0x20>
 8005292:	2b02      	cmp	r3, #2
 8005294:	d00c      	beq.n	80052b0 <USBH_CtlReq+0x38>
      status = USBH_NOT_SUPPORTED;
    }
    break;
    
  default:
    break; 
 8005296:	e02c      	b.n	80052f2 <USBH_CtlReq+0x7a>
    USBH_SubmitSetupRequest(phost, buff, length);
 8005298:	887b      	ldrh	r3, [r7, #2]
 800529a:	461a      	mov	r2, r3
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	68b8      	ldr	r0, [r7, #8]
 80052a0:	f000 f948 	bl	8005534 <USBH_SubmitSetupRequest>
    phost->RequestState = CMD_WAIT;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2202      	movs	r2, #2
 80052a8:	70da      	strb	r2, [r3, #3]
    status = USBH_BUSY;
 80052aa:	2301      	movs	r3, #1
 80052ac:	75fb      	strb	r3, [r7, #23]
    break;
 80052ae:	e020      	b.n	80052f2 <USBH_CtlReq+0x7a>
     if (phost->Control.state == CTRL_COMPLETE ) 
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	7f1b      	ldrb	r3, [r3, #28]
 80052b4:	2b0d      	cmp	r3, #13
 80052b6:	d108      	bne.n	80052ca <USBH_CtlReq+0x52>
      phost->RequestState = CMD_SEND;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2201      	movs	r2, #1
 80052bc:	70da      	strb	r2, [r3, #3]
      phost->Control.state =CTRL_IDLE;  
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2200      	movs	r2, #0
 80052c2:	771a      	strb	r2, [r3, #28]
      status = USBH_OK;      
 80052c4:	2300      	movs	r3, #0
 80052c6:	75fb      	strb	r3, [r7, #23]
    break;
 80052c8:	e012      	b.n	80052f0 <USBH_CtlReq+0x78>
    else if  (phost->Control.state == CTRL_ERROR)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	7f1b      	ldrb	r3, [r3, #28]
 80052ce:	2b0b      	cmp	r3, #11
 80052d0:	d105      	bne.n	80052de <USBH_CtlReq+0x66>
      phost->RequestState = CMD_SEND;
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2201      	movs	r2, #1
 80052d6:	70da      	strb	r2, [r3, #3]
      status = USBH_FAIL;
 80052d8:	2302      	movs	r3, #2
 80052da:	75fb      	strb	r3, [r7, #23]
    break;
 80052dc:	e008      	b.n	80052f0 <USBH_CtlReq+0x78>
     else if  (phost->Control.state == CTRL_STALLED )
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	7f1b      	ldrb	r3, [r3, #28]
 80052e2:	2b0c      	cmp	r3, #12
 80052e4:	d104      	bne.n	80052f0 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2201      	movs	r2, #1
 80052ea:	70da      	strb	r2, [r3, #3]
      status = USBH_NOT_SUPPORTED;
 80052ec:	2303      	movs	r3, #3
 80052ee:	75fb      	strb	r3, [r7, #23]
    break;
 80052f0:	bf00      	nop
  }
  return status;
 80052f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <USBH_CtlSendSetup>:
  * @param  hc_num: Host channel Number
  * @retval Status
  */
USBH_Status USBH_CtlSendSetup ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t hc_num){
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	4613      	mov	r3, r2
 8005308:	71fb      	strb	r3, [r7, #7]
  pdev->host.hc[hc_num].ep_is_in = 0;
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	015b      	lsls	r3, r3, #5
 8005310:	4413      	add	r3, r2
 8005312:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].data_pid = HC_PID_SETUP;   
 800531a:	79fb      	ldrb	r3, [r7, #7]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	3315      	adds	r3, #21
 8005320:	015b      	lsls	r3, r3, #5
 8005322:	4413      	add	r3, r2
 8005324:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8005328:	2203      	movs	r2, #3
 800532a:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	3315      	adds	r3, #21
 8005332:	015b      	lsls	r3, r3, #5
 8005334:	4413      	add	r3, r2
 8005336:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = USBH_SETUP_PKT_SIZE;   
 800533e:	79fb      	ldrb	r3, [r7, #7]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	015b      	lsls	r3, r3, #5
 8005344:	4413      	add	r3, r2
 8005346:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800534a:	2208      	movs	r2, #8
 800534c:	601a      	str	r2, [r3, #0]

  return (USBH_Status)HCD_SubmitRequest (pdev , hc_num);   
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	4619      	mov	r1, r3
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f7fd fb8e 	bl	8002a74 <HCD_SubmitRequest>
 8005358:	4603      	mov	r3, r0
 800535a:	b2db      	uxtb	r3, r3
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <USBH_CtlSendData>:
  */
USBH_Status USBH_CtlSendData ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	4611      	mov	r1, r2
 8005370:	461a      	mov	r2, r3
 8005372:	460b      	mov	r3, r1
 8005374:	80fb      	strh	r3, [r7, #6]
 8005376:	4613      	mov	r3, r2
 8005378:	717b      	strb	r3, [r7, #5]
  pdev->host.hc[hc_num].ep_is_in = 0;
 800537a:	797b      	ldrb	r3, [r7, #5]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	015b      	lsls	r3, r3, #5
 8005380:	4413      	add	r3, r2
 8005382:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8005386:	2200      	movs	r2, #0
 8005388:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 800538a:	797b      	ldrb	r3, [r7, #5]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	3315      	adds	r3, #21
 8005390:	015b      	lsls	r3, r3, #5
 8005392:	4413      	add	r3, r2
 8005394:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;
 800539c:	797b      	ldrb	r3, [r7, #5]
 800539e:	88fa      	ldrh	r2, [r7, #6]
 80053a0:	68f9      	ldr	r1, [r7, #12]
 80053a2:	015b      	lsls	r3, r3, #5
 80053a4:	440b      	add	r3, r1
 80053a6:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80053aa:	601a      	str	r2, [r3, #0]
 
  if ( length == 0 )
 80053ac:	88fb      	ldrh	r3, [r7, #6]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d107      	bne.n	80053c2 <USBH_CtlSendData+0x5e>
  { /* For Status OUT stage, Length==0, Status Out PID = 1 */
    pdev->host.hc[hc_num].toggle_out = 1;   
 80053b2:	797b      	ldrb	r3, [r7, #5]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	331e      	adds	r3, #30
 80053b8:	015b      	lsls	r3, r3, #5
 80053ba:	4413      	add	r3, r2
 80053bc:	3305      	adds	r3, #5
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]
  }
 
 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 80053c2:	797b      	ldrb	r3, [r7, #5]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	331e      	adds	r3, #30
 80053c8:	015b      	lsls	r3, r3, #5
 80053ca:	4413      	add	r3, r2
 80053cc:	3305      	adds	r3, #5
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d109      	bne.n	80053e8 <USBH_CtlSendData+0x84>
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
 80053d4:	797b      	ldrb	r3, [r7, #5]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	3315      	adds	r3, #21
 80053da:	015b      	lsls	r3, r3, #5
 80053dc:	4413      	add	r3, r2
 80053de:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80053e2:	2200      	movs	r2, #0
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	e008      	b.n	80053fa <USBH_CtlSendData+0x96>
  }
 else
 { /* Put the PID 1 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA1 ;
 80053e8:	797b      	ldrb	r3, [r7, #5]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	3315      	adds	r3, #21
 80053ee:	015b      	lsls	r3, r3, #5
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80053f6:	2202      	movs	r2, #2
 80053f8:	701a      	strb	r2, [r3, #0]
 }

  HCD_SubmitRequest (pdev , hc_num);   
 80053fa:	797b      	ldrb	r3, [r7, #5]
 80053fc:	4619      	mov	r1, r3
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f7fd fb38 	bl	8002a74 <HCD_SubmitRequest>
   
  return USBH_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <USBH_CtlReceiveData>:
  */
USBH_Status USBH_CtlReceiveData(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b084      	sub	sp, #16
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	4611      	mov	r1, r2
 800541a:	461a      	mov	r2, r3
 800541c:	460b      	mov	r3, r1
 800541e:	80fb      	strh	r3, [r7, #6]
 8005420:	4613      	mov	r3, r2
 8005422:	717b      	strb	r3, [r7, #5]

  pdev->host.hc[hc_num].ep_is_in = 1;
 8005424:	797b      	ldrb	r3, [r7, #5]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	015b      	lsls	r3, r3, #5
 800542a:	4413      	add	r3, r2
 800542c:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 8005430:	2201      	movs	r2, #1
 8005432:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8005434:	797b      	ldrb	r3, [r7, #5]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	3315      	adds	r3, #21
 800543a:	015b      	lsls	r3, r3, #5
 800543c:	4413      	add	r3, r2
 800543e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8005442:	2202      	movs	r2, #2
 8005444:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 8005446:	797b      	ldrb	r3, [r7, #5]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	3315      	adds	r3, #21
 800544c:	015b      	lsls	r3, r3, #5
 800544e:	4413      	add	r3, r2
 8005450:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;  
 8005458:	797b      	ldrb	r3, [r7, #5]
 800545a:	88fa      	ldrh	r2, [r7, #6]
 800545c:	68f9      	ldr	r1, [r7, #12]
 800545e:	015b      	lsls	r3, r3, #5
 8005460:	440b      	add	r3, r1
 8005462:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8005466:	601a      	str	r2, [r3, #0]

  HCD_SubmitRequest (pdev , hc_num);   
 8005468:	797b      	ldrb	r3, [r7, #5]
 800546a:	4619      	mov	r1, r3
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f7fd fb01 	bl	8002a74 <HCD_SubmitRequest>
  
  return USBH_OK;
 8005472:	2300      	movs	r3, #0
  
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <USBH_InterruptReceiveData>:
  */
USBH_Status USBH_InterruptReceiveData( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t length,
                                uint8_t hc_num)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	4611      	mov	r1, r2
 8005488:	461a      	mov	r2, r3
 800548a:	460b      	mov	r3, r1
 800548c:	71fb      	strb	r3, [r7, #7]
 800548e:	4613      	mov	r3, r2
 8005490:	71bb      	strb	r3, [r7, #6]

  pdev->host.hc[hc_num].ep_is_in = 1;  
 8005492:	79bb      	ldrb	r3, [r7, #6]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	015b      	lsls	r3, r3, #5
 8005498:	4413      	add	r3, r2
 800549a:	f203 33ae 	addw	r3, r3, #942	; 0x3ae
 800549e:	2201      	movs	r2, #1
 80054a0:	701a      	strb	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_buff = buff;
 80054a2:	79bb      	ldrb	r3, [r7, #6]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	3315      	adds	r3, #21
 80054a8:	015b      	lsls	r3, r3, #5
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;
 80054b4:	79bb      	ldrb	r3, [r7, #6]
 80054b6:	79fa      	ldrb	r2, [r7, #7]
 80054b8:	68f9      	ldr	r1, [r7, #12]
 80054ba:	015b      	lsls	r3, r3, #5
 80054bc:	440b      	add	r3, r1
 80054be:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80054c2:	601a      	str	r2, [r3, #0]
  

  
  if(pdev->host.hc[hc_num].toggle_in == 0)
 80054c4:	79bb      	ldrb	r3, [r7, #6]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	331e      	adds	r3, #30
 80054ca:	015b      	lsls	r3, r3, #5
 80054cc:	4413      	add	r3, r2
 80054ce:	3304      	adds	r3, #4
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d109      	bne.n	80054ea <USBH_InterruptReceiveData+0x6e>
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
 80054d6:	79bb      	ldrb	r3, [r7, #6]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	3315      	adds	r3, #21
 80054dc:	015b      	lsls	r3, r3, #5
 80054de:	4413      	add	r3, r2
 80054e0:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80054e4:	2200      	movs	r2, #0
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	e008      	b.n	80054fc <USBH_InterruptReceiveData+0x80>
  }
  else
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 80054ea:	79bb      	ldrb	r3, [r7, #6]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	3315      	adds	r3, #21
 80054f0:	015b      	lsls	r3, r3, #5
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80054f8:	2202      	movs	r2, #2
 80054fa:	701a      	strb	r2, [r3, #0]
  }

  /* toggle DATA PID */
  pdev->host.hc[hc_num].toggle_in ^= 1;  
 80054fc:	79bb      	ldrb	r3, [r7, #6]
 80054fe:	79ba      	ldrb	r2, [r7, #6]
 8005500:	68f9      	ldr	r1, [r7, #12]
 8005502:	321e      	adds	r2, #30
 8005504:	0152      	lsls	r2, r2, #5
 8005506:	440a      	add	r2, r1
 8005508:	3204      	adds	r2, #4
 800550a:	7812      	ldrb	r2, [r2, #0]
 800550c:	f082 0201 	eor.w	r2, r2, #1
 8005510:	b2d1      	uxtb	r1, r2
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	331e      	adds	r3, #30
 8005516:	015b      	lsls	r3, r3, #5
 8005518:	4413      	add	r3, r2
 800551a:	3304      	adds	r3, #4
 800551c:	460a      	mov	r2, r1
 800551e:	701a      	strb	r2, [r3, #0]
  
  HCD_SubmitRequest (pdev , hc_num);  
 8005520:	79bb      	ldrb	r3, [r7, #6]
 8005522:	4619      	mov	r1, r3
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f7fd faa5 	bl	8002a74 <HCD_SubmitRequest>
  
  return USBH_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <USBH_SubmitSetupRequest>:
  * @retval Status. 
*/
static USBH_Status USBH_SubmitSetupRequest(USBH_HOST *phost,
                                           uint8_t* buff, 
                                           uint16_t length)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	4613      	mov	r3, r2
 8005540:	80fb      	strh	r3, [r7, #6]
  
  /* Save Global State */
  phost->gStateBkp =   phost->gState; 
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	781a      	ldrb	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	705a      	strb	r2, [r3, #1]
  
  /* Prepare the Transactions */
  phost->gState = HOST_CTRL_XFER;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2207      	movs	r2, #7
 800554e:	701a      	strb	r2, [r3, #0]
  phost->Control.buff = buff; 
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	609a      	str	r2, [r3, #8]
  phost->Control.length = length;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	88fa      	ldrh	r2, [r7, #6]
 800555a:	819a      	strh	r2, [r3, #12]
  phost->Control.state = CTRL_SETUP;  
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	771a      	strb	r2, [r3, #28]

  return USBH_OK;  
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <USBH_Get_DevDesc>:
* @retval Status
*/
USBH_Status USBH_Get_DevDesc(USB_OTG_CORE_HANDLE *pdev,
                             USBH_HOST *phost,
                             uint8_t length)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af02      	add	r7, sp, #8
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	4613      	mov	r3, r2
 800557c:	71fb      	strb	r3, [r7, #7]
  
  if((status = USBH_GetDescriptor(pdev, 
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_DEVICE, 
                                  pdev->host.Rx_Buffer,
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f503 7388 	add.w	r3, r3, #272	; 0x110
  if((status = USBH_GetDescriptor(pdev, 
 8005584:	79fa      	ldrb	r2, [r7, #7]
 8005586:	b292      	uxth	r2, r2
 8005588:	9201      	str	r2, [sp, #4]
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005590:	2200      	movs	r2, #0
 8005592:	68b9      	ldr	r1, [r7, #8]
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 f884 	bl	80056a2 <USBH_GetDescriptor>
 800559a:	4603      	mov	r3, r0
 800559c:	75fb      	strb	r3, [r7, #23]
 800559e:	7dfb      	ldrb	r3, [r7, #23]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10a      	bne.n	80055ba <USBH_Get_DevDesc+0x4a>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */       
    USBH_ParseDevDesc(&phost->device_prop.Dev_Desc, pdev->host.Rx_Buffer, length);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f103 0022 	add.w	r0, r3, #34	; 0x22
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80055b0:	79fa      	ldrb	r2, [r7, #7]
 80055b2:	b292      	uxth	r2, r2
 80055b4:	4619      	mov	r1, r3
 80055b6:	f000 f925 	bl	8005804 <USBH_ParseDevDesc>
  }
  return status;      
 80055ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <USBH_Get_CfgDesc>:
*/
USBH_Status USBH_Get_CfgDesc(USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost,                      
                             uint16_t length)

{
 80055c4:	b590      	push	{r4, r7, lr}
 80055c6:	b089      	sub	sp, #36	; 0x24
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	4613      	mov	r3, r2
 80055d0:	80fb      	strh	r3, [r7, #6]
  USBH_Status status;
  uint16_t index = 0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	82fb      	strh	r3, [r7, #22]
  
  if((status = USBH_GetDescriptor(pdev,
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_CONFIGURATION, 
                                  pdev->host.Rx_Buffer,
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f503 7388 	add.w	r3, r3, #272	; 0x110
  if((status = USBH_GetDescriptor(pdev,
 80055dc:	88fa      	ldrh	r2, [r7, #6]
 80055de:	9201      	str	r2, [sp, #4]
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055e6:	2200      	movs	r2, #0
 80055e8:	68b9      	ldr	r1, [r7, #8]
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 f859 	bl	80056a2 <USBH_GetDescriptor>
 80055f0:	4603      	mov	r3, r0
 80055f2:	757b      	strb	r3, [r7, #21]
 80055f4:	7d7b      	ldrb	r3, [r7, #21]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d120      	bne.n	800563c <USBH_Get_CfgDesc+0x78>
                                  length)) == USBH_OK)
  {
    /*save Cfg descriptor for class parsing usage */
    for( ; index < length ; index ++)
 80055fa:	e00a      	b.n	8005612 <USBH_Get_CfgDesc+0x4e>
    {
      USBH_CfgDesc[index] = pdev->host.Rx_Buffer[index];
 80055fc:	8afb      	ldrh	r3, [r7, #22]
 80055fe:	8afa      	ldrh	r2, [r7, #22]
 8005600:	68f9      	ldr	r1, [r7, #12]
 8005602:	440a      	add	r2, r1
 8005604:	f892 1110 	ldrb.w	r1, [r2, #272]	; 0x110
 8005608:	4a0f      	ldr	r2, [pc, #60]	; (8005648 <USBH_Get_CfgDesc+0x84>)
 800560a:	54d1      	strb	r1, [r2, r3]
    for( ; index < length ; index ++)
 800560c:	8afb      	ldrh	r3, [r7, #22]
 800560e:	3301      	adds	r3, #1
 8005610:	82fb      	strh	r3, [r7, #22]
 8005612:	8afa      	ldrh	r2, [r7, #22]
 8005614:	88fb      	ldrh	r3, [r7, #6]
 8005616:	429a      	cmp	r2, r3
 8005618:	d3f0      	bcc.n	80055fc <USBH_Get_CfgDesc+0x38>
    }
    
    /* Commands successfully sent and Response Received  */       
    USBH_ParseCfgDesc (&phost->device_prop.Cfg_Desc,
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f103 0034 	add.w	r0, r3, #52	; 0x34
                       phost->device_prop.Itf_Desc,
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f103 013e 	add.w	r1, r3, #62	; 0x3e
                       phost->device_prop.Ep_Desc, 
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f103 0250 	add.w	r2, r3, #80	; 0x50
                       pdev->host.Rx_Buffer,
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f503 7488 	add.w	r4, r3, #272	; 0x110
    USBH_ParseCfgDesc (&phost->device_prop.Cfg_Desc,
 8005632:	88fb      	ldrh	r3, [r7, #6]
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	4623      	mov	r3, r4
 8005638:	f000 f958 	bl	80058ec <USBH_ParseCfgDesc>
                       length); 
    
  }
  return status;
 800563c:	7d7b      	ldrb	r3, [r7, #21]
}
 800563e:	4618      	mov	r0, r3
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	bd90      	pop	{r4, r7, pc}
 8005646:	bf00      	nop
 8005648:	2000091c 	.word	0x2000091c

0800564c <USBH_Get_StringDesc>:
USBH_Status USBH_Get_StringDesc(USB_OTG_CORE_HANDLE *pdev,
                                USBH_HOST *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af02      	add	r7, sp, #8
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	603b      	str	r3, [r7, #0]
 8005658:	4613      	mov	r3, r2
 800565a:	71fb      	strb	r3, [r7, #7]
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev,
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	b29b      	uxth	r3, r3
 8005660:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005664:	b299      	uxth	r1, r3
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
                                  USB_DESC_STRING | string_index, 
                                  pdev->host.Rx_Buffer,
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f503 7388 	add.w	r3, r3, #272	; 0x110
  if((status = USBH_GetDescriptor(pdev,
 800566c:	8c3a      	ldrh	r2, [r7, #32]
 800566e:	9201      	str	r2, [sp, #4]
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	460b      	mov	r3, r1
 8005674:	2200      	movs	r2, #0
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f812 	bl	80056a2 <USBH_GetDescriptor>
 800567e:	4603      	mov	r3, r0
 8005680:	75fb      	strb	r3, [r7, #23]
 8005682:	7dfb      	ldrb	r3, [r7, #23]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d107      	bne.n	8005698 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseStringDesc(pdev->host.Rx_Buffer,buff, length);    
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800568e:	8c3a      	ldrh	r2, [r7, #32]
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fa69 	bl	8005b6a <USBH_ParseStringDesc>
  }
  return status;
 8005698:	7dfb      	ldrb	r3, [r7, #23]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <USBH_GetDescriptor>:
                               USBH_HOST           *phost,                                
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	4611      	mov	r1, r2
 80056ae:	461a      	mov	r2, r3
 80056b0:	460b      	mov	r3, r1
 80056b2:	71fb      	strb	r3, [r7, #7]
 80056b4:	4613      	mov	r3, r2
 80056b6:	80bb      	strh	r3, [r7, #4]
  phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80056b8:	79fb      	ldrb	r3, [r7, #7]
 80056ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	751a      	strb	r2, [r3, #20]
  phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2206      	movs	r2, #6
 80056c8:	755a      	strb	r2, [r3, #21]
  phost->Control.setup.b.wValue.w = value_idx;
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	88ba      	ldrh	r2, [r7, #4]
 80056ce:	82da      	strh	r2, [r3, #22]
  
  if ((value_idx & 0xff00) == USB_DESC_STRING)
 80056d0:	88bb      	ldrh	r3, [r7, #4]
 80056d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80056d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056da:	d104      	bne.n	80056e6 <USBH_GetDescriptor+0x44>
  {
    phost->Control.setup.b.wIndex.w = 0x0409;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f240 4209 	movw	r2, #1033	; 0x409
 80056e2:	831a      	strh	r2, [r3, #24]
 80056e4:	e002      	b.n	80056ec <USBH_GetDescriptor+0x4a>
  }
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	2200      	movs	r2, #0
 80056ea:	831a      	strh	r2, [r3, #24]
  }
  phost->Control.setup.b.wLength.w = length;           
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	8bba      	ldrh	r2, [r7, #28]
 80056f0:	835a      	strh	r2, [r3, #26]
  return USBH_CtlReq(pdev, phost, buff , length );     
 80056f2:	8bbb      	ldrh	r3, [r7, #28]
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f7ff fdbd 	bl	8005278 <USBH_CtlReq>
 80056fe:	4603      	mov	r3, r0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <USBH_SetAddress>:
* @retval Status
*/
USBH_Status USBH_SetAddress(USB_OTG_CORE_HANDLE *pdev, 
                            USBH_HOST *phost,
                            uint8_t DeviceAddress)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	4613      	mov	r3, r2
 8005714:	71fb      	strb	r3, [r7, #7]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2200      	movs	r2, #0
 800571a:	751a      	strb	r2, [r3, #20]
    USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2205      	movs	r2, #5
 8005720:	755a      	strb	r2, [r3, #21]
  
  phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	b29a      	uxth	r2, r3
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	82da      	strh	r2, [r3, #22]
  phost->Control.setup.b.wIndex.w = 0;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	2200      	movs	r2, #0
 800572e:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 0;
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2200      	movs	r2, #0
 8005734:	835a      	strh	r2, [r3, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
 8005736:	2300      	movs	r3, #0
 8005738:	2200      	movs	r2, #0
 800573a:	68b9      	ldr	r1, [r7, #8]
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f7ff fd9b 	bl	8005278 <USBH_CtlReq>
 8005742:	4603      	mov	r3, r0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <USBH_SetCfg>:
* @retval Status
*/
USBH_Status USBH_SetCfg(USB_OTG_CORE_HANDLE *pdev, 
                        USBH_HOST *phost,
                        uint16_t cfg_idx)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	4613      	mov	r3, r2
 8005758:	80fb      	strh	r3, [r7, #6]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2200      	movs	r2, #0
 800575e:	751a      	strb	r2, [r3, #20]
    USB_REQ_TYPE_STANDARD;
  phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2209      	movs	r2, #9
 8005764:	755a      	strb	r2, [r3, #21]
  phost->Control.setup.b.wValue.w = cfg_idx;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	88fa      	ldrh	r2, [r7, #6]
 800576a:	82da      	strh	r2, [r3, #22]
  phost->Control.setup.b.wIndex.w = 0;
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2200      	movs	r2, #0
 8005770:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 0;           
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2200      	movs	r2, #0
 8005776:	835a      	strh	r2, [r3, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );      
 8005778:	2300      	movs	r3, #0
 800577a:	2200      	movs	r2, #0
 800577c:	68b9      	ldr	r1, [r7, #8]
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f7ff fd7a 	bl	8005278 <USBH_CtlReq>
 8005784:	4603      	mov	r3, r0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <USBH_ClrFeature>:
*/
USBH_Status USBH_ClrFeature(USB_OTG_CORE_HANDLE *pdev,
                            USBH_HOST *phost,
                            uint8_t ep_num, 
                            uint8_t hc_num) 
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b084      	sub	sp, #16
 8005792:	af00      	add	r7, sp, #0
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	4611      	mov	r1, r2
 800579a:	461a      	mov	r2, r3
 800579c:	460b      	mov	r3, r1
 800579e:	71fb      	strb	r3, [r7, #7]
 80057a0:	4613      	mov	r3, r2
 80057a2:	71bb      	strb	r3, [r7, #6]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | 
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2202      	movs	r2, #2
 80057a8:	751a      	strb	r2, [r3, #20]
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2201      	movs	r2, #1
 80057ae:	755a      	strb	r2, [r3, #21]
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2200      	movs	r2, #0
 80057b4:	82da      	strh	r2, [r3, #22]
  phost->Control.setup.b.wIndex.w = ep_num;
 80057b6:	79fb      	ldrb	r3, [r7, #7]
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 0;           
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2200      	movs	r2, #0
 80057c2:	835a      	strh	r2, [r3, #26]
  
  if ((ep_num & USB_REQ_DIR_MASK ) == USB_D2H)
 80057c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	da08      	bge.n	80057de <USBH_ClrFeature+0x50>
  { /* EP Type is IN */
    pdev->host.hc[hc_num].toggle_in = 0; 
 80057cc:	79bb      	ldrb	r3, [r7, #6]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	331e      	adds	r3, #30
 80057d2:	015b      	lsls	r3, r3, #5
 80057d4:	4413      	add	r3, r2
 80057d6:	3304      	adds	r3, #4
 80057d8:	2200      	movs	r2, #0
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	e007      	b.n	80057ee <USBH_ClrFeature+0x60>
  }
  else
  {/* EP Type is OUT */
    pdev->host.hc[hc_num].toggle_out = 0; 
 80057de:	79bb      	ldrb	r3, [r7, #6]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	331e      	adds	r3, #30
 80057e4:	015b      	lsls	r3, r3, #5
 80057e6:	4413      	add	r3, r2
 80057e8:	3305      	adds	r3, #5
 80057ea:	2200      	movs	r2, #0
 80057ec:	701a      	strb	r2, [r3, #0]
  }
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );   
 80057ee:	2300      	movs	r3, #0
 80057f0:	2200      	movs	r2, #0
 80057f2:	68b9      	ldr	r1, [r7, #8]
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f7ff fd3f 	bl	8005278 <USBH_CtlReq>
 80057fa:	4603      	mov	r3, r0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <USBH_ParseDevDesc>:
* @retval None
*/
static void  USBH_ParseDevDesc (USBH_DevDesc_TypeDef* dev_desc,
                                uint8_t *buf, 
                                uint16_t length)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	4613      	mov	r3, r2
 8005810:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	781a      	ldrb	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	785a      	ldrb	r2, [r3, #1]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	3302      	adds	r3, #2
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	b29a      	uxth	r2, r3
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	3302      	adds	r3, #2
 800582e:	3301      	adds	r3, #1
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	b29b      	uxth	r3, r3
 8005834:	021b      	lsls	r3, r3, #8
 8005836:	b29b      	uxth	r3, r3
 8005838:	4413      	add	r3, r2
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	791a      	ldrb	r2, [r3, #4]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	795a      	ldrb	r2, [r3, #5]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	799a      	ldrb	r2, [r3, #6]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	79da      	ldrb	r2, [r3, #7]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	71da      	strb	r2, [r3, #7]
  
  if (length > 8)
 8005860:	88fb      	ldrh	r3, [r7, #6]
 8005862:	2b08      	cmp	r3, #8
 8005864:	d93c      	bls.n	80058e0 <USBH_ParseDevDesc+0xdc>
  { /* For 1st time after device connection, Host may issue only 8 bytes for 
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	3308      	adds	r3, #8
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	b29a      	uxth	r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	3308      	adds	r3, #8
 8005872:	3301      	adds	r3, #1
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	b29b      	uxth	r3, r3
 8005878:	021b      	lsls	r3, r3, #8
 800587a:	b29b      	uxth	r3, r3
 800587c:	4413      	add	r3, r2
 800587e:	b29a      	uxth	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	330a      	adds	r3, #10
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	b29a      	uxth	r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	330a      	adds	r3, #10
 8005890:	3301      	adds	r3, #1
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	b29b      	uxth	r3, r3
 8005896:	021b      	lsls	r3, r3, #8
 8005898:	b29b      	uxth	r3, r3
 800589a:	4413      	add	r3, r2
 800589c:	b29a      	uxth	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	330c      	adds	r3, #12
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	330c      	adds	r3, #12
 80058ae:	3301      	adds	r3, #1
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	021b      	lsls	r3, r3, #8
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	4413      	add	r3, r2
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	7b9a      	ldrb	r2, [r3, #14]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	7bda      	ldrb	r2, [r3, #15]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	7c1a      	ldrb	r2, [r3, #16]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	7c5a      	ldrb	r2, [r3, #17]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	745a      	strb	r2, [r3, #17]
  }
}
 80058e0:	bf00      	nop
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <USBH_ParseCfgDesc>:
static void  USBH_ParseCfgDesc (USBH_CfgDesc_TypeDef* cfg_desc,
                                USBH_InterfaceDesc_TypeDef* itf_desc,
                                USBH_EpDesc_TypeDef   ep_desc[][USBH_MAX_NUM_ENDPOINTS], 
                                uint8_t *buf, 
                                uint16_t length)
{  
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08c      	sub	sp, #48	; 0x30
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	603b      	str	r3, [r7, #0]
  USBH_InterfaceDesc_TypeDef    *pif ;
  USBH_InterfaceDesc_TypeDef    temp_pif ;  
  USBH_EpDesc_TypeDef           *pep;  
  USBH_DescHeader_t             *pdesc = (USBH_DescHeader_t *)buf;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t                      ptr;
  int8_t                        if_ix = 0;
 80058fe:	2300      	movs	r3, #0
 8005900:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  int8_t                        ep_ix = 0;  
 8005904:	2300      	movs	r3, #0
 8005906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  static uint16_t               prev_ep_size = 0;
  static uint8_t                prev_itf = 0;  
  
  
  pdesc   = (USBH_DescHeader_t *)buf;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781a      	ldrb	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	785a      	ldrb	r2, [r3, #1]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	3302      	adds	r3, #2
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	b29a      	uxth	r2, r3
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	3302      	adds	r3, #2
 800592a:	3301      	adds	r3, #1
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	b29b      	uxth	r3, r3
 8005930:	021b      	lsls	r3, r3, #8
 8005932:	b29b      	uxth	r3, r3
 8005934:	4413      	add	r3, r2
 8005936:	b29a      	uxth	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	791a      	ldrb	r2, [r3, #4]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	795a      	ldrb	r2, [r3, #5]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	799a      	ldrb	r2, [r3, #6]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	79da      	ldrb	r2, [r3, #7]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	7a1a      	ldrb	r2, [r3, #8]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	721a      	strb	r2, [r3, #8]
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8005964:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005966:	2b09      	cmp	r3, #9
 8005968:	f240 809a 	bls.w	8005aa0 <USBH_ParseCfgDesc+0x1b4>
  {
    ptr = USB_LEN_CFG_DESC;
 800596c:	2309      	movs	r3, #9
 800596e:	827b      	strh	r3, [r7, #18]
    
    if ( cfg_desc->bNumInterfaces <= USBH_MAX_NUM_INTERFACES) 
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	791b      	ldrb	r3, [r3, #4]
 8005974:	2b02      	cmp	r3, #2
 8005976:	f200 808d 	bhi.w	8005a94 <USBH_ParseCfgDesc+0x1a8>
    {
      pif = (USBH_InterfaceDesc_TypeDef *)0;
 800597a:	2300      	movs	r3, #0
 800597c:	627b      	str	r3, [r7, #36]	; 0x24
      
      while (ptr < cfg_desc->wTotalLength ) 
 800597e:	e083      	b.n	8005a88 <USBH_ParseCfgDesc+0x19c>
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005980:	f107 0312 	add.w	r3, r7, #18
 8005984:	4619      	mov	r1, r3
 8005986:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005988:	f000 f922 	bl	8005bd0 <USBH_GetNextDesc>
 800598c:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 800598e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	2b04      	cmp	r3, #4
 8005994:	d178      	bne.n	8005a88 <USBH_ParseCfgDesc+0x19c>
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
 8005996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005998:	3302      	adds	r3, #2
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
          pif               = &itf_desc[if_ix];
 80059a0:	f997 202a 	ldrsb.w	r2, [r7, #42]	; 0x2a
 80059a4:	4613      	mov	r3, r2
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	4413      	add	r3, r2
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	4413      	add	r3, r2
 80059ae:	627b      	str	r3, [r7, #36]	; 0x24
          
          if((*((uint8_t *)pdesc + 3)) < 3)
 80059b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b2:	3303      	adds	r3, #3
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d866      	bhi.n	8005a88 <USBH_ParseCfgDesc+0x19c>
          {
          USBH_ParseInterfaceDesc (&temp_pif, (uint8_t *)pdesc);            
 80059ba:	f107 0314 	add.w	r3, r7, #20
 80059be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 f875 	bl	8005ab0 <USBH_ParseInterfaceDesc>
          ep_ix = 0;
 80059c6:	2300      	movs	r3, #0
 80059c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          
          /* Parse Ep descriptors relative to the current interface */
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
 80059cc:	7e3b      	ldrb	r3, [r7, #24]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d85a      	bhi.n	8005a88 <USBH_ParseCfgDesc+0x19c>
          {          
            while (ep_ix < temp_pif.bNumEndpoints) 
 80059d2:	e054      	b.n	8005a7e <USBH_ParseCfgDesc+0x192>
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
 80059d4:	f107 0312 	add.w	r3, r7, #18
 80059d8:	4619      	mov	r1, r3
 80059da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059dc:	f000 f8f8 	bl	8005bd0 <USBH_GetNextDesc>
 80059e0:	62f8      	str	r0, [r7, #44]	; 0x2c
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 80059e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e4:	785b      	ldrb	r3, [r3, #1]
 80059e6:	2b05      	cmp	r3, #5
 80059e8:	d149      	bne.n	8005a7e <USBH_ParseCfgDesc+0x192>
              {  
                pep               = &ep_desc[if_ix][ep_ix];
 80059ea:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	441a      	add	r2, r3
 80059f4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	4413      	add	r3, r2
 80059fc:	623b      	str	r3, [r7, #32]
                
                if(prev_itf != if_ix)
 80059fe:	4b2a      	ldr	r3, [pc, #168]	; (8005aa8 <USBH_ParseCfgDesc+0x1bc>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d00a      	beq.n	8005a22 <USBH_ParseCfgDesc+0x136>
                {
                  prev_itf = if_ix;
 8005a0c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8005a10:	4b25      	ldr	r3, [pc, #148]	; (8005aa8 <USBH_ParseCfgDesc+0x1bc>)
 8005a12:	701a      	strb	r2, [r3, #0]
                  USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif); 
 8005a14:	f107 0314 	add.w	r3, r7, #20
 8005a18:	4619      	mov	r1, r3
 8005a1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a1c:	f000 f848 	bl	8005ab0 <USBH_ParseInterfaceDesc>
 8005a20:	e014      	b.n	8005a4c <USBH_ParseCfgDesc+0x160>
                }
                else
                {
                  if(prev_ep_size > LE16((uint8_t *)pdesc + 4))
 8005a22:	4b22      	ldr	r3, [pc, #136]	; (8005aac <USBH_ParseCfgDesc+0x1c0>)
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a32:	3305      	adds	r3, #5
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	021b      	lsls	r3, r3, #8
 8005a38:	440b      	add	r3, r1
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	dd00      	ble.n	8005a40 <USBH_ParseCfgDesc+0x154>
                  {
                    break;
 8005a3e:	e023      	b.n	8005a88 <USBH_ParseCfgDesc+0x19c>
                  }
                  else
                  {
                    USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif);    
 8005a40:	f107 0314 	add.w	r3, r7, #20
 8005a44:	4619      	mov	r1, r3
 8005a46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a48:	f000 f832 	bl	8005ab0 <USBH_ParseInterfaceDesc>
                  }
                }
                USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
 8005a4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a4e:	6a38      	ldr	r0, [r7, #32]
 8005a50:	f000 f85d 	bl	8005b0e <USBH_ParseEPDesc>
                prev_ep_size = LE16((uint8_t *)pdesc + 4);
 8005a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a56:	3304      	adds	r3, #4
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5e:	3305      	adds	r3, #5
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	4413      	add	r3, r2
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	4b0f      	ldr	r3, [pc, #60]	; (8005aac <USBH_ParseCfgDesc+0x1c0>)
 8005a6e:	801a      	strh	r2, [r3, #0]
                ep_ix++;
 8005a70:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	3301      	adds	r3, #1
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            while (ep_ix < temp_pif.bNumEndpoints) 
 8005a7e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005a82:	7e3a      	ldrb	r2, [r7, #24]
 8005a84:	4293      	cmp	r3, r2
 8005a86:	dba5      	blt.n	80059d4 <USBH_ParseCfgDesc+0xe8>
      while (ptr < cfg_desc->wTotalLength ) 
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	885a      	ldrh	r2, [r3, #2]
 8005a8c:	8a7b      	ldrh	r3, [r7, #18]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	f63f af76 	bhi.w	8005980 <USBH_ParseCfgDesc+0x94>
          }
         }
        }
      }
    }
    prev_ep_size = 0;
 8005a94:	4b05      	ldr	r3, [pc, #20]	; (8005aac <USBH_ParseCfgDesc+0x1c0>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	801a      	strh	r2, [r3, #0]
    prev_itf = 0; 
 8005a9a:	4b03      	ldr	r3, [pc, #12]	; (8005aa8 <USBH_ParseCfgDesc+0x1bc>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	701a      	strb	r2, [r3, #0]
  }  
}
 8005aa0:	bf00      	nop
 8005aa2:	3730      	adds	r7, #48	; 0x30
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	20000166 	.word	0x20000166
 8005aac:	20000168 	.word	0x20000168

08005ab0 <USBH_ParseInterfaceDesc>:
* @param  buf: Buffer where the descriptor data is available
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781a      	ldrb	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	785a      	ldrb	r2, [r3, #1]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	789a      	ldrb	r2, [r3, #2]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	78da      	ldrb	r2, [r3, #3]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	791a      	ldrb	r2, [r3, #4]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	795a      	ldrb	r2, [r3, #5]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	799a      	ldrb	r2, [r3, #6]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	79da      	ldrb	r2, [r3, #7]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	7a1a      	ldrb	r2, [r3, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	721a      	strb	r2, [r3, #8]
}
 8005b02:	bf00      	nop
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <USBH_ParseEPDesc>:
* @param  buf: Buffer where the parsed descriptor stored
* @retval None
*/
static void  USBH_ParseEPDesc (USBH_EpDesc_TypeDef  *ep_descriptor, 
                               uint8_t *buf)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	6039      	str	r1, [r7, #0]
  
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781a      	ldrb	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	785a      	ldrb	r2, [r3, #1]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	789a      	ldrb	r2, [r3, #2]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	78da      	ldrb	r2, [r3, #3]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	3304      	adds	r3, #4
 8005b44:	3301      	adds	r3, #1
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	021b      	lsls	r3, r3, #8
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	4413      	add	r3, r2
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	799a      	ldrb	r2, [r3, #6]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	719a      	strb	r2, [r3, #6]
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <USBH_ParseStringDesc>:
* @retval None
*/
static void USBH_ParseStringDesc (uint8_t* psrc, 
                                  uint8_t* pdest, 
                                  uint16_t length)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b087      	sub	sp, #28
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	4613      	mov	r3, r2
 8005b76:	80fb      	strh	r3, [r7, #6]
  */
  
  /* Check which is lower size, the Size of string or the length of bytes read 
  from the device */
  
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d120      	bne.n	8005bc4 <USBH_ParseStringDesc+0x5a>
  { /* Make sure the Descriptor is String Type */
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	1e9a      	subs	r2, r3, #2
 8005b88:	88fb      	ldrh	r3, [r7, #6]
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	bfa8      	it	ge
 8005b8e:	4613      	movge	r3, r2
 8005b90:	82bb      	strh	r3, [r7, #20]
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3302      	adds	r3, #2
 8005b96:	60fb      	str	r3, [r7, #12]
    
    for (idx = 0; idx < strlength; idx+=2 )
 8005b98:	2300      	movs	r3, #0
 8005b9a:	82fb      	strh	r3, [r7, #22]
 8005b9c:	e00b      	b.n	8005bb6 <USBH_ParseStringDesc+0x4c>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8005b9e:	8afb      	ldrh	r3, [r7, #22]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	781a      	ldrb	r2, [r3, #0]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	701a      	strb	r2, [r3, #0]
      pdest++;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	3301      	adds	r3, #1
 8005bae:	60bb      	str	r3, [r7, #8]
    for (idx = 0; idx < strlength; idx+=2 )
 8005bb0:	8afb      	ldrh	r3, [r7, #22]
 8005bb2:	3302      	adds	r3, #2
 8005bb4:	82fb      	strh	r3, [r7, #22]
 8005bb6:	8afa      	ldrh	r2, [r7, #22]
 8005bb8:	8abb      	ldrh	r3, [r7, #20]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d3ef      	bcc.n	8005b9e <USBH_ParseStringDesc+0x34>
    }  
    *pdest = 0; /* mark end of string */  
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	701a      	strb	r2, [r3, #0]
  }
}
 8005bc4:	bf00      	nop
 8005bc6:	371c      	adds	r7, #28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <USBH_GetNextDesc>:
* @param  buf: Buffer where the cfg descriptor is available
* @param  ptr: data popinter inside the cfg descriptor
* @retval next header
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	881a      	ldrh	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	4413      	add	r3, r2
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
         ((USBH_DescHeader_t *)pbuf)->bLength);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
 
  return(pnext);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
	...

08005c08 <USBH_USR_Init>:
* @brief  USBH_USR_Init 
*         Displays the message on LCD for host lib initialization
* @param  None
* @retval None
*/
void USBH_USR_Init(void) {
 8005c08:	b480      	push	{r7}
 8005c0a:	af00      	add	r7, sp, #0
	TM_USB_HIDHOST_INT_Result = TM_USB_HIDHOST_Result_Disconnected;
 8005c0c:	4b03      	ldr	r3, [pc, #12]	; (8005c1c <USBH_USR_Init+0x14>)
 8005c0e:	2203      	movs	r2, #3
 8005c10:	701a      	strb	r2, [r3, #0]
}
 8005c12:	bf00      	nop
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	20000b1c 	.word	0x20000b1c

08005c20 <USBH_USR_DeviceAttached>:
* @brief  USBH_USR_DeviceAttached 
*         Displays the message on LCD on device attached
* @param  None
* @retval None
*/
void USBH_USR_DeviceAttached(void) {
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
	TM_USB_HIDHOST_INT_Result = TM_USB_HIDHOST_Result_Disconnected;
 8005c24:	4b03      	ldr	r3, [pc, #12]	; (8005c34 <USBH_USR_DeviceAttached+0x14>)
 8005c26:	2203      	movs	r2, #3
 8005c28:	701a      	strb	r2, [r3, #0]
}
 8005c2a:	bf00      	nop
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	20000b1c 	.word	0x20000b1c

08005c38 <USBH_USR_UnrecoveredError>:
/**
* @brief  USBH_USR_UnrecoveredError
* @param  None
* @retval None
*/
void USBH_USR_UnrecoveredError(void) {
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
	TM_USB_HIDHOST_INT_Result = TM_USB_HIDHOST_Result_Error;
 8005c3c:	4b03      	ldr	r3, [pc, #12]	; (8005c4c <USBH_USR_UnrecoveredError+0x14>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	701a      	strb	r2, [r3, #0]
}
 8005c42:	bf00      	nop
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	20000b1c 	.word	0x20000b1c

08005c50 <USBH_USR_DeviceDisconnected>:
* @brief  USBH_DisconnectEvent
*         Device disconnect event
* @param  None
* @retval None
*/
void USBH_USR_DeviceDisconnected (void) {
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
	TM_USB_HIDHOST_INT_Result = TM_USB_HIDHOST_Result_Disconnected;
 8005c54:	4b03      	ldr	r3, [pc, #12]	; (8005c64 <USBH_USR_DeviceDisconnected+0x14>)
 8005c56:	2203      	movs	r2, #3
 8005c58:	701a      	strb	r2, [r3, #0]
}
 8005c5a:	bf00      	nop
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	20000b1c 	.word	0x20000b1c

08005c68 <USBH_USR_ResetDevice>:
* @brief  USBH_USR_ResetUSBDevice 
*         Reset USB Device
* @param  None
* @retval None
*/
void USBH_USR_ResetDevice(void) {
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
	TM_USB_HIDHOST_INT_Result = TM_USB_HIDHOST_Result_Disconnected;
 8005c6c:	4b03      	ldr	r3, [pc, #12]	; (8005c7c <USBH_USR_ResetDevice+0x14>)
 8005c6e:	2203      	movs	r2, #3
 8005c70:	701a      	strb	r2, [r3, #0]
}
 8005c72:	bf00      	nop
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	20000b1c 	.word	0x20000b1c

08005c80 <USBH_USR_DeviceSpeedDetected>:
* @brief  USBH_USR_DeviceSpeedDetected 
*         Displays the message on LCD for device speed
* @param  Devicespeed : Device Speed
* @retval None
*/
void USBH_USR_DeviceSpeedDetected(uint8_t DeviceSpeed) {
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	4603      	mov	r3, r0
 8005c88:	71fb      	strb	r3, [r7, #7]
	if (DeviceSpeed == HPRT0_PRTSPD_HIGH_SPEED) {
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d008      	beq.n	8005ca2 <USBH_USR_DeviceSpeedDetected+0x22>
	} else if (DeviceSpeed == HPRT0_PRTSPD_FULL_SPEED) {
 8005c90:	79fb      	ldrb	r3, [r7, #7]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d005      	beq.n	8005ca2 <USBH_USR_DeviceSpeedDetected+0x22>
	} else if (DeviceSpeed == HPRT0_PRTSPD_LOW_SPEED) {
 8005c96:	79fb      	ldrb	r3, [r7, #7]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d002      	beq.n	8005ca2 <USBH_USR_DeviceSpeedDetected+0x22>
	} else {
		TM_USB_HIDHOST_INT_Result = TM_USB_HIDHOST_Result_Error;
 8005c9c:	4b04      	ldr	r3, [pc, #16]	; (8005cb0 <USBH_USR_DeviceSpeedDetected+0x30>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	701a      	strb	r2, [r3, #0]
	}
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	20000b1c 	.word	0x20000b1c

08005cb4 <USBH_USR_Device_DescAvailable>:
* @brief  USBH_USR_Device_DescAvailable 
*         Displays the message on LCD for device descriptor
* @param  DeviceDesc : device descriptor
* @retval None
*/
void USBH_USR_Device_DescAvailable(void *DeviceDesc) {
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
	
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <USBH_USR_DeviceAddressAssigned>:
* @brief  USBH_USR_DeviceAddressAssigned 
*         USB device is successfully assigned the Address 
* @param  None
* @retval None
*/
void USBH_USR_DeviceAddressAssigned(void) {
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  
}
 8005ccc:	bf00      	nop
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <USBH_USR_Configuration_DescAvailable>:
* @retval None
*/
void USBH_USR_Configuration_DescAvailable(USBH_CfgDesc_TypeDef * cfgDesc,
                                          USBH_InterfaceDesc_TypeDef *itfDesc,
                                          USBH_EpDesc_TypeDef *epDesc)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b085      	sub	sp, #20
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	607a      	str	r2, [r7, #4]
   
}
 8005ce2:	bf00      	nop
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <USBH_USR_Manufacturer_String>:
* @brief  USBH_USR_Manufacturer_String 
*         Displays the message on LCD for Manufacturer String 
* @param  ManufacturerString : Manufacturer String of Device
* @retval None
*/
void USBH_USR_Manufacturer_String(void *ManufacturerString) {
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
	
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <USBH_USR_Product_String>:
* @brief  USBH_USR_Product_String 
*         Displays the message on LCD for Product String
* @param  ProductString : Product String of Device
* @retval None
*/
void USBH_USR_Product_String(void *ProductString) {
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]

}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <USBH_USR_SerialNum_String>:
* @brief  USBH_USR_SerialNum_String 
*         Displays the message on LCD for SerialNum_String 
* @param  SerialNumString : SerialNum_String of device
* @retval None
*/
void USBH_USR_SerialNum_String(void *SerialNumString) {
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
	
} 
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <USBH_USR_EnumerationDone>:
*         User response request is displayed to ask for
*         application jump to class
* @param  None
* @retval None
*/
void USBH_USR_EnumerationDone(void) {
 8005d2a:	b480      	push	{r7}
 8005d2c:	af00      	add	r7, sp, #0
	
} 
 8005d2e:	bf00      	nop
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <USBH_USR_DeviceNotSupported>:
* @brief  USBH_USR_DeviceNotSupported
*         Device is not supported
* @param  None
* @retval None
*/
void USBH_USR_DeviceNotSupported(void) {
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
	TM_USB_HIDHOST_INT_Result = TM_USB_HIDHOST_Result_DeviceNotSupported;
 8005d3c:	4b03      	ldr	r3, [pc, #12]	; (8005d4c <USBH_USR_DeviceNotSupported+0x14>)
 8005d3e:	2204      	movs	r2, #4
 8005d40:	701a      	strb	r2, [r3, #0]
}
 8005d42:	bf00      	nop
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	20000b1c 	.word	0x20000b1c

08005d50 <USBH_USR_UserInput>:
* @brief  USBH_USR_UserInput
*         User Action for application state entry
* @param  None
* @retval USBH_USR_Status : User response for key button
*/
USBH_USR_Status USBH_USR_UserInput(void) {
 8005d50:	b480      	push	{r7}
 8005d52:	af00      	add	r7, sp, #0
	return USBH_USR_RESP_OK;
 8005d54:	2301      	movs	r3, #1
} 
 8005d56:	4618      	mov	r0, r3
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <USBH_USR_OverCurrentDetected>:
* @brief  USBH_USR_OverCurrentDetected
*         Device Overcurrent detection event
* @param  None
* @retval None
*/
void USBH_USR_OverCurrentDetected(void) {
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
	TM_USB_HIDHOST_INT_Result = TM_USB_HIDHOST_Result_Error;
 8005d64:	4b03      	ldr	r3, [pc, #12]	; (8005d74 <USBH_USR_OverCurrentDetected+0x14>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	701a      	strb	r2, [r3, #0]
}
 8005d6a:	bf00      	nop
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	20000b1c 	.word	0x20000b1c

08005d78 <USR_MOUSE_Init>:
* @brief  USR_MOUSE_Init
*         Init Mouse window
* @param  None
* @retval None
*/
void USR_MOUSE_Init(void) {
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
	static uint8_t firstInit = 1;
	/* Mouse is connected and ready to use */
	TM_USB_HIDHOST_INT_Result = TM_USB_HIDHOST_Result_MouseConnected;
 8005d7c:	4b11      	ldr	r3, [pc, #68]	; (8005dc4 <USR_MOUSE_Init+0x4c>)
 8005d7e:	2202      	movs	r2, #2
 8005d80:	701a      	strb	r2, [r3, #0]
	
	if (firstInit) {
 8005d82:	4b11      	ldr	r3, [pc, #68]	; (8005dc8 <USR_MOUSE_Init+0x50>)
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d017      	beq.n	8005dba <USR_MOUSE_Init+0x42>
		firstInit = 0;
 8005d8a:	4b0f      	ldr	r3, [pc, #60]	; (8005dc8 <USR_MOUSE_Init+0x50>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	701a      	strb	r2, [r3, #0]
		
		/* Reset values */
		TM_USB_HIDHOST_INT_Mouse.AbsoluteX = 0;
 8005d90:	4b0e      	ldr	r3, [pc, #56]	; (8005dcc <USR_MOUSE_Init+0x54>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	801a      	strh	r2, [r3, #0]
		TM_USB_HIDHOST_INT_Mouse.AbsoluteY = 0;
 8005d96:	4b0d      	ldr	r3, [pc, #52]	; (8005dcc <USR_MOUSE_Init+0x54>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	805a      	strh	r2, [r3, #2]
		TM_USB_HIDHOST_INT_Mouse.DiffX = 0;
 8005d9c:	4b0b      	ldr	r3, [pc, #44]	; (8005dcc <USR_MOUSE_Init+0x54>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	809a      	strh	r2, [r3, #4]
		TM_USB_HIDHOST_INT_Mouse.DiffY = 0;
 8005da2:	4b0a      	ldr	r3, [pc, #40]	; (8005dcc <USR_MOUSE_Init+0x54>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	80da      	strh	r2, [r3, #6]
		TM_USB_HIDHOST_INT_Mouse.LeftButton = TM_USB_HIDHOST_Button_Released;
 8005da8:	4b08      	ldr	r3, [pc, #32]	; (8005dcc <USR_MOUSE_Init+0x54>)
 8005daa:	2201      	movs	r2, #1
 8005dac:	721a      	strb	r2, [r3, #8]
		TM_USB_HIDHOST_INT_Mouse.RightButton = TM_USB_HIDHOST_Button_Released;
 8005dae:	4b07      	ldr	r3, [pc, #28]	; (8005dcc <USR_MOUSE_Init+0x54>)
 8005db0:	2201      	movs	r2, #1
 8005db2:	725a      	strb	r2, [r3, #9]
		TM_USB_HIDHOST_INT_Mouse.MiddleButton = TM_USB_HIDHOST_Button_Released;
 8005db4:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <USR_MOUSE_Init+0x54>)
 8005db6:	2201      	movs	r2, #1
 8005db8:	729a      	strb	r2, [r3, #10]
	}
}
 8005dba:	bf00      	nop
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	20000b1c 	.word	0x20000b1c
 8005dc8:	200000e8 	.word	0x200000e8
 8005dcc:	20000b24 	.word	0x20000b24

08005dd0 <USR_MOUSE_ProcessData>:
* @brief  USR_MOUSE_ProcessData
*         Process Mouse data
* @param  data : Mouse data to be displayed
* @retval None
*/
void USR_MOUSE_ProcessData(HID_MOUSE_Data_TypeDef *data) {
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
	static uint8_t mouseButtons[] = {0, 0, 0};
	/* Check X movement */
	if (data->x != 0) {
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d012      	beq.n	8005e06 <USR_MOUSE_ProcessData+0x36>
		TM_USB_HIDHOST_INT_Mouse.DiffX = (int8_t)data->x;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	b25b      	sxtb	r3, r3
 8005de6:	b21a      	sxth	r2, r3
 8005de8:	4b3e      	ldr	r3, [pc, #248]	; (8005ee4 <USR_MOUSE_ProcessData+0x114>)
 8005dea:	809a      	strh	r2, [r3, #4]
		TM_USB_HIDHOST_INT_Mouse.AbsoluteX += (int8_t)data->x;
 8005dec:	4b3d      	ldr	r3, [pc, #244]	; (8005ee4 <USR_MOUSE_ProcessData+0x114>)
 8005dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	b25b      	sxtb	r3, r3
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	4413      	add	r3, r2
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	b21a      	sxth	r2, r3
 8005e02:	4b38      	ldr	r3, [pc, #224]	; (8005ee4 <USR_MOUSE_ProcessData+0x114>)
 8005e04:	801a      	strh	r2, [r3, #0]
	}
	/* Check Y movement */
	if (data->y != 0) {
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	785b      	ldrb	r3, [r3, #1]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d012      	beq.n	8005e34 <USR_MOUSE_ProcessData+0x64>
		TM_USB_HIDHOST_INT_Mouse.DiffY = (int8_t)data->y;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	785b      	ldrb	r3, [r3, #1]
 8005e12:	b25b      	sxtb	r3, r3
 8005e14:	b21a      	sxth	r2, r3
 8005e16:	4b33      	ldr	r3, [pc, #204]	; (8005ee4 <USR_MOUSE_ProcessData+0x114>)
 8005e18:	80da      	strh	r2, [r3, #6]
		TM_USB_HIDHOST_INT_Mouse.AbsoluteY += (int8_t)data->y;
 8005e1a:	4b32      	ldr	r3, [pc, #200]	; (8005ee4 <USR_MOUSE_ProcessData+0x114>)
 8005e1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	785b      	ldrb	r3, [r3, #1]
 8005e26:	b25b      	sxtb	r3, r3
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	4413      	add	r3, r2
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	b21a      	sxth	r2, r3
 8005e30:	4b2c      	ldr	r3, [pc, #176]	; (8005ee4 <USR_MOUSE_ProcessData+0x114>)
 8005e32:	805a      	strh	r2, [r3, #2]
	}
	
	/* Process button 1 */
	if (data->button & 0x01) {
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	78db      	ldrb	r3, [r3, #3]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00a      	beq.n	8005e56 <USR_MOUSE_ProcessData+0x86>
		/* Button 1 pressed */
		if (mouseButtons[0] == 0) {
 8005e40:	4b29      	ldr	r3, [pc, #164]	; (8005ee8 <USR_MOUSE_ProcessData+0x118>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d110      	bne.n	8005e6a <USR_MOUSE_ProcessData+0x9a>
			mouseButtons[0] = 1;
 8005e48:	4b27      	ldr	r3, [pc, #156]	; (8005ee8 <USR_MOUSE_ProcessData+0x118>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	701a      	strb	r2, [r3, #0]
			TM_USB_HIDHOST_INT_Mouse.LeftButton = TM_USB_HIDHOST_Button_Pressed;
 8005e4e:	4b25      	ldr	r3, [pc, #148]	; (8005ee4 <USR_MOUSE_ProcessData+0x114>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	721a      	strb	r2, [r3, #8]
 8005e54:	e009      	b.n	8005e6a <USR_MOUSE_ProcessData+0x9a>
		}
	} else {
		/* Button 1 released */
		if (mouseButtons[0] == 1) {
 8005e56:	4b24      	ldr	r3, [pc, #144]	; (8005ee8 <USR_MOUSE_ProcessData+0x118>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d105      	bne.n	8005e6a <USR_MOUSE_ProcessData+0x9a>
			mouseButtons[0] = 0;
 8005e5e:	4b22      	ldr	r3, [pc, #136]	; (8005ee8 <USR_MOUSE_ProcessData+0x118>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	701a      	strb	r2, [r3, #0]
			TM_USB_HIDHOST_INT_Mouse.LeftButton = TM_USB_HIDHOST_Button_Released;
 8005e64:	4b1f      	ldr	r3, [pc, #124]	; (8005ee4 <USR_MOUSE_ProcessData+0x114>)
 8005e66:	2201      	movs	r2, #1
 8005e68:	721a      	strb	r2, [r3, #8]
		}
	}
	
	/* Process button 2 */
	if (data->button & 0x02) {
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	78db      	ldrb	r3, [r3, #3]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <USR_MOUSE_ProcessData+0xbc>
		/* Button 2 pressed */
		if (mouseButtons[1] == 0) {
 8005e76:	4b1c      	ldr	r3, [pc, #112]	; (8005ee8 <USR_MOUSE_ProcessData+0x118>)
 8005e78:	785b      	ldrb	r3, [r3, #1]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d110      	bne.n	8005ea0 <USR_MOUSE_ProcessData+0xd0>
			mouseButtons[1] = 1;
 8005e7e:	4b1a      	ldr	r3, [pc, #104]	; (8005ee8 <USR_MOUSE_ProcessData+0x118>)
 8005e80:	2201      	movs	r2, #1
 8005e82:	705a      	strb	r2, [r3, #1]
			TM_USB_HIDHOST_INT_Mouse.RightButton = TM_USB_HIDHOST_Button_Pressed;
 8005e84:	4b17      	ldr	r3, [pc, #92]	; (8005ee4 <USR_MOUSE_ProcessData+0x114>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	725a      	strb	r2, [r3, #9]
 8005e8a:	e009      	b.n	8005ea0 <USR_MOUSE_ProcessData+0xd0>
		}
	} else {
		/* Button 2 released */
		if (mouseButtons[1] == 1) {
 8005e8c:	4b16      	ldr	r3, [pc, #88]	; (8005ee8 <USR_MOUSE_ProcessData+0x118>)
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d105      	bne.n	8005ea0 <USR_MOUSE_ProcessData+0xd0>
			mouseButtons[1] = 0;
 8005e94:	4b14      	ldr	r3, [pc, #80]	; (8005ee8 <USR_MOUSE_ProcessData+0x118>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	705a      	strb	r2, [r3, #1]
			TM_USB_HIDHOST_INT_Mouse.RightButton = TM_USB_HIDHOST_Button_Released;
 8005e9a:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <USR_MOUSE_ProcessData+0x114>)
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	725a      	strb	r2, [r3, #9]
		}
	}
	
	/* Process button 3 */
	if (data->button & 0x04) {
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	78db      	ldrb	r3, [r3, #3]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00a      	beq.n	8005ec2 <USR_MOUSE_ProcessData+0xf2>
		/* Button 3 pressed */
		if (mouseButtons[2] == 0) {
 8005eac:	4b0e      	ldr	r3, [pc, #56]	; (8005ee8 <USR_MOUSE_ProcessData+0x118>)
 8005eae:	789b      	ldrb	r3, [r3, #2]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d110      	bne.n	8005ed6 <USR_MOUSE_ProcessData+0x106>
			mouseButtons[2] = 1;
 8005eb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <USR_MOUSE_ProcessData+0x118>)
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	709a      	strb	r2, [r3, #2]
			TM_USB_HIDHOST_INT_Mouse.MiddleButton = TM_USB_HIDHOST_Button_Pressed;
 8005eba:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <USR_MOUSE_ProcessData+0x114>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	729a      	strb	r2, [r3, #10]
		if (mouseButtons[2] == 1) {
			mouseButtons[2] = 0;
			TM_USB_HIDHOST_INT_Mouse.MiddleButton = TM_USB_HIDHOST_Button_Released;
		}
	}
}
 8005ec0:	e009      	b.n	8005ed6 <USR_MOUSE_ProcessData+0x106>
		if (mouseButtons[2] == 1) {
 8005ec2:	4b09      	ldr	r3, [pc, #36]	; (8005ee8 <USR_MOUSE_ProcessData+0x118>)
 8005ec4:	789b      	ldrb	r3, [r3, #2]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d105      	bne.n	8005ed6 <USR_MOUSE_ProcessData+0x106>
			mouseButtons[2] = 0;
 8005eca:	4b07      	ldr	r3, [pc, #28]	; (8005ee8 <USR_MOUSE_ProcessData+0x118>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	709a      	strb	r2, [r3, #2]
			TM_USB_HIDHOST_INT_Mouse.MiddleButton = TM_USB_HIDHOST_Button_Released;
 8005ed0:	4b04      	ldr	r3, [pc, #16]	; (8005ee4 <USR_MOUSE_ProcessData+0x114>)
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	729a      	strb	r2, [r3, #10]
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	20000b24 	.word	0x20000b24
 8005ee8:	2000016c 	.word	0x2000016c

08005eec <USR_KEYBRD_Init>:
* @brief  USR_KEYBRD_Init
*         Init Keyboard window
* @param  None
* @retval None
*/
void USR_KEYBRD_Init(void) {
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
	/* Keyboard is connected */
	TM_USB_HIDHOST_INT_Result = TM_USB_HIDHOST_Result_KeyboardConnected;
 8005ef0:	4b05      	ldr	r3, [pc, #20]	; (8005f08 <USR_KEYBRD_Init+0x1c>)
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	701a      	strb	r2, [r3, #0]
	
	/* Reset */
	TM_USB_HIDHOST_INT_Keyboard.ButtonStatus = TM_USB_HIDHOST_Button_Released;
 8005ef6:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <USR_KEYBRD_Init+0x20>)
 8005ef8:	2201      	movs	r2, #1
 8005efa:	701a      	strb	r2, [r3, #0]
}
 8005efc:	bf00      	nop
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	20000b1c 	.word	0x20000b1c
 8005f0c:	20000b20 	.word	0x20000b20

08005f10 <USR_KEYBRD_ProcessData>:
* @brief  USR_KEYBRD_ProcessData
*         Process Keyboard data
* @param  data : Keyboard data to be displayed
* @retval None
*/
void USR_KEYBRD_ProcessData(uint8_t data) {
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	4603      	mov	r3, r0
 8005f18:	71fb      	strb	r3, [r7, #7]
	/* Set keyboard button */
	/* Button has been pressed */
	TM_USB_HIDHOST_INT_Keyboard.ButtonStatus = TM_USB_HIDHOST_Button_Pressed;
 8005f1a:	4b06      	ldr	r3, [pc, #24]	; (8005f34 <USR_KEYBRD_ProcessData+0x24>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	701a      	strb	r2, [r3, #0]
	/* Set button value */
	TM_USB_HIDHOST_INT_Keyboard.Button = data;
 8005f20:	4a04      	ldr	r2, [pc, #16]	; (8005f34 <USR_KEYBRD_ProcessData+0x24>)
 8005f22:	79fb      	ldrb	r3, [r7, #7]
 8005f24:	7053      	strb	r3, [r2, #1]
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	20000b20 	.word	0x20000b20

08005f38 <USBH_USR_DeInit>:
* @brief  USBH_USR_DeInit
*         Deint User state and associated variables
* @param  None
* @retval None
*/
void USBH_USR_DeInit(void) {
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
	//TM_USB_HIDHOST_INT_Result = TM_USB_HIDHOST_Result_Disconnected;
}
 8005f3c:	bf00      	nop
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
	...

08005f48 <Delayms>:
 * @param  Delays for specific amount of milliseconds
 * @param  millis: Time in milliseconds for delay
 * @retval None
 * @note   Declared as static inline
 */
static __INLINE void Delayms(uint32_t millis) {
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
	volatile uint32_t timer = TM_Time;
 8005f50:	4b11      	ldr	r3, [pc, #68]	; (8005f98 <Delayms+0x50>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f56:	f3ef 8305 	mrs	r3, IPSR
 8005f5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f5c:	68fb      	ldr	r3, [r7, #12]

	/* Called from thread */
	if (!__get_IPSR()) {
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d111      	bne.n	8005f86 <Delayms+0x3e>
		/* Wait for timer to count milliseconds */
		while ((TM_Time - timer) < millis) {
 8005f62:	bf00      	nop
 8005f64:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <Delayms+0x50>)
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	1ad2      	subs	r2, r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d3f8      	bcc.n	8005f64 <Delayms+0x1c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				millis--;
			}
		}
	}
}
 8005f72:	e00b      	b.n	8005f8c <Delayms+0x44>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8005f74:	4b09      	ldr	r3, [pc, #36]	; (8005f9c <Delayms+0x54>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d002      	beq.n	8005f86 <Delayms+0x3e>
				millis--;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	607b      	str	r3, [r7, #4]
		while (millis) {
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1f3      	bne.n	8005f74 <Delayms+0x2c>
}
 8005f8c:	bf00      	nop
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	2000010c 	.word	0x2000010c
 8005f9c:	e000e010 	.word	0xe000e010

08005fa0 <main>:
#include "tm_stm32f4_usb_hid_host.h"

#include "HC05_HID.h"
#include <stdio.h>

int main(void) {
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
	TM_USB_HIDHOST_Result_t USB_HID_Status;		/* USB HID Host status */
	TM_USB_HIDHOST_Mouse_t Mouse_Data;			/* Mouse handler */
	
	/* Initialize system */
	SystemInit();
 8005fa6:	f000 f8cd 	bl	8006144 <SystemInit>
	
	/* Leds init */
	TM_DISCO_LedInit();
 8005faa:	f7fa fe8d 	bl	8000cc8 <TM_DISCO_LedInit>
	
	/* Delay init */
	TM_DELAY_Init();
 8005fae:	f7fa fe63 	bl	8000c78 <TM_DELAY_Init>
	
	/*
	 * Init Uart for HC05
	 * */
	HC05_HID_COM_Init();
 8005fb2:	f7fa f931 	bl	8000218 <HC05_HID_COM_Init>
	/* Init USB HID */
	TM_USB_HIDHOST_Init();
 8005fb6:	f7fb fb93 	bl	80016e0 <TM_USB_HIDHOST_Init>

	while (1) {
		/* Process USB HID */
		/* This must be called periodically */
		TM_USB_HIDHOST_Process();
 8005fba:	f7fb fbad 	bl	8001718 <TM_USB_HIDHOST_Process>
		
		/* Get connected device */
		USB_HID_Status = TM_USB_HIDHOST_Device();
 8005fbe:	f7fb fbc3 	bl	8001748 <TM_USB_HIDHOST_Device>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	73fb      	strb	r3, [r7, #15]
		
		/* Switch status */
		switch (USB_HID_Status) {
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
 8005fc8:	2b05      	cmp	r3, #5
 8005fca:	d8f6      	bhi.n	8005fba <main+0x1a>
 8005fcc:	a201      	add	r2, pc, #4	; (adr r2, 8005fd4 <main+0x34>)
 8005fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd2:	bf00      	nop
 8005fd4:	08006071 	.word	0x08006071
 8005fd8:	08005fed 	.word	0x08005fed
 8005fdc:	08005ff7 	.word	0x08005ff7
 8005fe0:	08006053 	.word	0x08006053
 8005fe4:	0800605d 	.word	0x0800605d
 8005fe8:	08006085 	.word	0x08006085
			/* Keyboard connected */
			case TM_USB_HIDHOST_Result_KeyboardConnected:
				
				/* GREEN led ON */
				TM_DISCO_LedOn(LED_GREEN);
 8005fec:	4b2b      	ldr	r3, [pc, #172]	; (800609c <main+0xfc>)
 8005fee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ff2:	831a      	strh	r2, [r3, #24]

				break;
 8005ff4:	e051      	b.n	800609a <main+0xfa>
			
			/* Mouse connected */
			case TM_USB_HIDHOST_Result_MouseConnected:
				
				/* RED led ON */
				TM_DISCO_LedOn(LED_RED);
 8005ff6:	4b29      	ldr	r3, [pc, #164]	; (800609c <main+0xfc>)
 8005ff8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ffc:	831a      	strh	r2, [r3, #24]
			
				/* Get mouse data */
				TM_USB_HIDHOST_ReadMouse(&Mouse_Data);
 8005ffe:	463b      	mov	r3, r7
 8006000:	4618      	mov	r0, r3
 8006002:	f7fb fbb5 	bl	8001770 <TM_USB_HIDHOST_ReadMouse>

				/* Check buttons */
				if (Mouse_Data.LeftButton == TM_USB_HIDHOST_Button_Pressed) {	/* Left button */
 8006006:	7a3b      	ldrb	r3, [r7, #8]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d103      	bne.n	8006014 <main+0x74>
					TM_DISCO_LedOn(LED_GREEN);									/* Toggle GREEN led */
 800600c:	4b23      	ldr	r3, [pc, #140]	; (800609c <main+0xfc>)
 800600e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006012:	831a      	strh	r2, [r3, #24]
				}
				if (Mouse_Data.RightButton == TM_USB_HIDHOST_Button_Pressed) {	/* Right button */
 8006014:	7a7b      	ldrb	r3, [r7, #9]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d103      	bne.n	8006022 <main+0x82>
					TM_DISCO_LedOff(LED_GREEN);									/* Toggle GREEN led */
 800601a:	4b20      	ldr	r3, [pc, #128]	; (800609c <main+0xfc>)
 800601c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006020:	835a      	strh	r2, [r3, #26]
				}
				if (Mouse_Data.MiddleButton == TM_USB_HIDHOST_Button_Pressed) {	/* Middle button */
 8006022:	7abb      	ldrb	r3, [r7, #10]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d105      	bne.n	8006034 <main+0x94>
					TM_DISCO_LedToggle(LED_GREEN);								/* Toggle GREEN led */
 8006028:	4a1c      	ldr	r2, [pc, #112]	; (800609c <main+0xfc>)
 800602a:	4b1c      	ldr	r3, [pc, #112]	; (800609c <main+0xfc>)
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006032:	6153      	str	r3, [r2, #20]
				}
				if (Mouse_Data.DiffX != 0 || Mouse_Data.DiffY != 0) {
 8006034:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d103      	bne.n	8006044 <main+0xa4>
 800603c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d029      	beq.n	8006098 <main+0xf8>
					/* If there is a difference for mouse movement at any coordinate */
					TM_DISCO_LedToggle(LED_GREEN);								/* Toggle RED led */
 8006044:	4a15      	ldr	r2, [pc, #84]	; (800609c <main+0xfc>)
 8006046:	4b15      	ldr	r3, [pc, #84]	; (800609c <main+0xfc>)
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800604e:	6153      	str	r3, [r2, #20]
					/* Positions are stored like this */
					//Mouse_Data.AbsoluteX //Absolute X position for LCD
					//Mouse_Data.AbsoluteY //Absolute Y position for LCD
				}

				break;
 8006050:	e022      	b.n	8006098 <main+0xf8>
			
			/* No device connected */
			case TM_USB_HIDHOST_Result_Disconnected:
				
				/* Turn off leds */
				TM_DISCO_LedOff(LED_RED | LED_GREEN);
 8006052:	4b12      	ldr	r3, [pc, #72]	; (800609c <main+0xfc>)
 8006054:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8006058:	835a      	strh	r2, [r3, #26]
			
				break;
 800605a:	e01e      	b.n	800609a <main+0xfa>
			/* Device is not supported */
			case TM_USB_HIDHOST_Result_DeviceNotSupported:
				
				/* Device is not supported */
				/* Toggle leds forever */
				TM_DISCO_LedToggle(LED_RED | LED_GREEN);
 800605c:	4a0f      	ldr	r2, [pc, #60]	; (800609c <main+0xfc>)
 800605e:	4b0f      	ldr	r3, [pc, #60]	; (800609c <main+0xfc>)
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	f483 43a0 	eor.w	r3, r3, #20480	; 0x5000
 8006066:	6153      	str	r3, [r2, #20]
				/* Delay */
				Delayms(50);
 8006068:	2032      	movs	r0, #50	; 0x32
 800606a:	f7ff ff6d 	bl	8005f48 <Delayms>
			
				break;
 800606e:	e014      	b.n	800609a <main+0xfa>
			/* Error occurred somewhere */
			case TM_USB_HIDHOST_Result_Error:
				
				/* Error occurred */
				/* Toggle RED LED forever */
				TM_DISCO_LedToggle(LED_RED);
 8006070:	4a0a      	ldr	r2, [pc, #40]	; (800609c <main+0xfc>)
 8006072:	4b0a      	ldr	r3, [pc, #40]	; (800609c <main+0xfc>)
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800607a:	6153      	str	r3, [r2, #20]
				/* Delay */
				Delayms(50);
 800607c:	2032      	movs	r0, #50	; 0x32
 800607e:	f7ff ff63 	bl	8005f48 <Delayms>
			
				break;
 8006082:	e00a      	b.n	800609a <main+0xfa>
			/* Library is not initialized */
			case TM_USB_HIDHOST_Result_LibraryNotInitialized:
				
				/* Library is not initialized */
				/* Toggle GREEN LED */
				TM_DISCO_LedToggle(LED_GREEN);
 8006084:	4a05      	ldr	r2, [pc, #20]	; (800609c <main+0xfc>)
 8006086:	4b05      	ldr	r3, [pc, #20]	; (800609c <main+0xfc>)
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800608e:	6153      	str	r3, [r2, #20]
				/* Delay */
				Delayms(50);
 8006090:	2032      	movs	r0, #50	; 0x32
 8006092:	f7ff ff59 	bl	8005f48 <Delayms>
			
				break;
 8006096:	e000      	b.n	800609a <main+0xfa>
				break;
 8006098:	bf00      	nop
		TM_USB_HIDHOST_Process();
 800609a:	e78e      	b.n	8005fba <main+0x1a>
 800609c:	40020c00 	.word	0x40020c00

080060a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80060a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80060d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80060a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80060a6:	e003      	b.n	80060b0 <LoopCopyDataInit>

080060a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80060a8:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80060aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80060ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80060ae:	3104      	adds	r1, #4

080060b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80060b0:	480b      	ldr	r0, [pc, #44]	; (80060e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80060b2:	4b0c      	ldr	r3, [pc, #48]	; (80060e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80060b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80060b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80060b8:	d3f6      	bcc.n	80060a8 <CopyDataInit>
  ldr  r2, =_sbss
 80060ba:	4a0b      	ldr	r2, [pc, #44]	; (80060e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80060bc:	e002      	b.n	80060c4 <LoopFillZerobss>

080060be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80060be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80060c0:	f842 3b04 	str.w	r3, [r2], #4

080060c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80060c4:	4b09      	ldr	r3, [pc, #36]	; (80060ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80060c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80060c8:	d3f9      	bcc.n	80060be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80060ca:	f000 f83b 	bl	8006144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80060ce:	f000 f8eb 	bl	80062a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80060d2:	f7ff ff65 	bl	8005fa0 <main>
  bx  lr    
 80060d6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80060d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80060dc:	08006504 	.word	0x08006504
  ldr  r0, =_sdata
 80060e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80060e4:	200000f0 	.word	0x200000f0
  ldr  r2, =_sbss
 80060e8:	200000f0 	.word	0x200000f0
  ldr  r3, = _ebss
 80060ec:	20000b30 	.word	0x20000b30

080060f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80060f0:	e7fe      	b.n	80060f0 <ADC_IRQHandler>

080060f2 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80060f2:	b480      	push	{r7}
 80060f4:	af00      	add	r7, sp, #0
}
 80060f6:	bf00      	nop
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8006100:	b480      	push	{r7}
 8006102:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006104:	e7fe      	b.n	8006104 <HardFault_Handler+0x4>

08006106 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8006106:	b480      	push	{r7}
 8006108:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800610a:	e7fe      	b.n	800610a <MemManage_Handler+0x4>

0800610c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8006110:	e7fe      	b.n	8006110 <BusFault_Handler+0x4>

08006112 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8006112:	b480      	push	{r7}
 8006114:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8006116:	e7fe      	b.n	8006116 <UsageFault_Handler+0x4>

08006118 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8006118:	b480      	push	{r7}
 800611a:	af00      	add	r7, sp, #0
}
 800611c:	bf00      	nop
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8006126:	b480      	push	{r7}
 8006128:	af00      	add	r7, sp, #0
}
 800612a:	bf00      	nop
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8006134:	b480      	push	{r7}
 8006136:	af00      	add	r7, sp, #0
}
 8006138:	bf00      	nop
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
	...

08006144 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006148:	4a16      	ldr	r2, [pc, #88]	; (80061a4 <SystemInit+0x60>)
 800614a:	4b16      	ldr	r3, [pc, #88]	; (80061a4 <SystemInit+0x60>)
 800614c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006158:	4a13      	ldr	r2, [pc, #76]	; (80061a8 <SystemInit+0x64>)
 800615a:	4b13      	ldr	r3, [pc, #76]	; (80061a8 <SystemInit+0x64>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f043 0301 	orr.w	r3, r3, #1
 8006162:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006164:	4b10      	ldr	r3, [pc, #64]	; (80061a8 <SystemInit+0x64>)
 8006166:	2200      	movs	r2, #0
 8006168:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800616a:	4a0f      	ldr	r2, [pc, #60]	; (80061a8 <SystemInit+0x64>)
 800616c:	4b0e      	ldr	r3, [pc, #56]	; (80061a8 <SystemInit+0x64>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006178:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800617a:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <SystemInit+0x64>)
 800617c:	4a0b      	ldr	r2, [pc, #44]	; (80061ac <SystemInit+0x68>)
 800617e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006180:	4a09      	ldr	r2, [pc, #36]	; (80061a8 <SystemInit+0x64>)
 8006182:	4b09      	ldr	r3, [pc, #36]	; (80061a8 <SystemInit+0x64>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800618a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800618c:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <SystemInit+0x64>)
 800618e:	2200      	movs	r2, #0
 8006190:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8006192:	f000 f80d 	bl	80061b0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006196:	4b03      	ldr	r3, [pc, #12]	; (80061a4 <SystemInit+0x60>)
 8006198:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800619c:	609a      	str	r2, [r3, #8]
#endif
}
 800619e:	bf00      	nop
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	e000ed00 	.word	0xe000ed00
 80061a8:	40023800 	.word	0x40023800
 80061ac:	24003010 	.word	0x24003010

080061b0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx) || defined (STM32F401xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80061b6:	2300      	movs	r3, #0
 80061b8:	607b      	str	r3, [r7, #4]
 80061ba:	2300      	movs	r3, #0
 80061bc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80061be:	4a36      	ldr	r2, [pc, #216]	; (8006298 <SetSysClock+0xe8>)
 80061c0:	4b35      	ldr	r3, [pc, #212]	; (8006298 <SetSysClock+0xe8>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061c8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80061ca:	4b33      	ldr	r3, [pc, #204]	; (8006298 <SetSysClock+0xe8>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3301      	adds	r3, #1
 80061d8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d103      	bne.n	80061e8 <SetSysClock+0x38>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80061e6:	d1f0      	bne.n	80061ca <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80061e8:	4b2b      	ldr	r3, [pc, #172]	; (8006298 <SetSysClock+0xe8>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80061f4:	2301      	movs	r3, #1
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	e001      	b.n	80061fe <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80061fa:	2300      	movs	r3, #0
 80061fc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d142      	bne.n	800628a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8006204:	4a24      	ldr	r2, [pc, #144]	; (8006298 <SetSysClock+0xe8>)
 8006206:	4b24      	ldr	r3, [pc, #144]	; (8006298 <SetSysClock+0xe8>)
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800620e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8006210:	4a22      	ldr	r2, [pc, #136]	; (800629c <SetSysClock+0xec>)
 8006212:	4b22      	ldr	r3, [pc, #136]	; (800629c <SetSysClock+0xec>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800621a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800621c:	4a1e      	ldr	r2, [pc, #120]	; (8006298 <SetSysClock+0xe8>)
 800621e:	4b1e      	ldr	r3, [pc, #120]	; (8006298 <SetSysClock+0xe8>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8006224:	4a1c      	ldr	r2, [pc, #112]	; (8006298 <SetSysClock+0xe8>)
 8006226:	4b1c      	ldr	r3, [pc, #112]	; (8006298 <SetSysClock+0xe8>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800622e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8006230:	4a19      	ldr	r2, [pc, #100]	; (8006298 <SetSysClock+0xe8>)
 8006232:	4b19      	ldr	r3, [pc, #100]	; (8006298 <SetSysClock+0xe8>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800623a:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800623c:	4b16      	ldr	r3, [pc, #88]	; (8006298 <SetSysClock+0xe8>)
 800623e:	4a18      	ldr	r2, [pc, #96]	; (80062a0 <SetSysClock+0xf0>)
 8006240:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8006242:	4a15      	ldr	r2, [pc, #84]	; (8006298 <SetSysClock+0xe8>)
 8006244:	4b14      	ldr	r3, [pc, #80]	; (8006298 <SetSysClock+0xe8>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800624c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800624e:	bf00      	nop
 8006250:	4b11      	ldr	r3, [pc, #68]	; (8006298 <SetSysClock+0xe8>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d0f9      	beq.n	8006250 <SetSysClock+0xa0>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800625c:	4b11      	ldr	r3, [pc, #68]	; (80062a4 <SetSysClock+0xf4>)
 800625e:	f240 7205 	movw	r2, #1797	; 0x705
 8006262:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8006264:	4a0c      	ldr	r2, [pc, #48]	; (8006298 <SetSysClock+0xe8>)
 8006266:	4b0c      	ldr	r3, [pc, #48]	; (8006298 <SetSysClock+0xe8>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f023 0303 	bic.w	r3, r3, #3
 800626e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8006270:	4a09      	ldr	r2, [pc, #36]	; (8006298 <SetSysClock+0xe8>)
 8006272:	4b09      	ldr	r3, [pc, #36]	; (8006298 <SetSysClock+0xe8>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f043 0302 	orr.w	r3, r3, #2
 800627a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 800627c:	bf00      	nop
 800627e:	4b06      	ldr	r3, [pc, #24]	; (8006298 <SetSysClock+0xe8>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f003 030c 	and.w	r3, r3, #12
 8006286:	2b08      	cmp	r3, #8
 8006288:	d1f9      	bne.n	800627e <SetSysClock+0xce>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx */  
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	40023800 	.word	0x40023800
 800629c:	40007000 	.word	0x40007000
 80062a0:	07405408 	.word	0x07405408
 80062a4:	40023c00 	.word	0x40023c00

080062a8 <__libc_init_array>:
 80062a8:	b570      	push	{r4, r5, r6, lr}
 80062aa:	4e0d      	ldr	r6, [pc, #52]	; (80062e0 <__libc_init_array+0x38>)
 80062ac:	4c0d      	ldr	r4, [pc, #52]	; (80062e4 <__libc_init_array+0x3c>)
 80062ae:	1ba4      	subs	r4, r4, r6
 80062b0:	10a4      	asrs	r4, r4, #2
 80062b2:	2500      	movs	r5, #0
 80062b4:	42a5      	cmp	r5, r4
 80062b6:	d109      	bne.n	80062cc <__libc_init_array+0x24>
 80062b8:	4e0b      	ldr	r6, [pc, #44]	; (80062e8 <__libc_init_array+0x40>)
 80062ba:	4c0c      	ldr	r4, [pc, #48]	; (80062ec <__libc_init_array+0x44>)
 80062bc:	f000 f818 	bl	80062f0 <_init>
 80062c0:	1ba4      	subs	r4, r4, r6
 80062c2:	10a4      	asrs	r4, r4, #2
 80062c4:	2500      	movs	r5, #0
 80062c6:	42a5      	cmp	r5, r4
 80062c8:	d105      	bne.n	80062d6 <__libc_init_array+0x2e>
 80062ca:	bd70      	pop	{r4, r5, r6, pc}
 80062cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062d0:	4798      	blx	r3
 80062d2:	3501      	adds	r5, #1
 80062d4:	e7ee      	b.n	80062b4 <__libc_init_array+0xc>
 80062d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062da:	4798      	blx	r3
 80062dc:	3501      	adds	r5, #1
 80062de:	e7f2      	b.n	80062c6 <__libc_init_array+0x1e>
 80062e0:	080064fc 	.word	0x080064fc
 80062e4:	080064fc 	.word	0x080064fc
 80062e8:	080064fc 	.word	0x080064fc
 80062ec:	08006500 	.word	0x08006500

080062f0 <_init>:
 80062f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f2:	bf00      	nop
 80062f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062f6:	bc08      	pop	{r3}
 80062f8:	469e      	mov	lr, r3
 80062fa:	4770      	bx	lr

080062fc <_fini>:
 80062fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fe:	bf00      	nop
 8006300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006302:	bc08      	pop	{r3}
 8006304:	469e      	mov	lr, r3
 8006306:	4770      	bx	lr
